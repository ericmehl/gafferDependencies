From 33272b777e73873b299888cab24d7e67ecd9e12f Mon Sep 17 00:00:00 2001
From: Eric Mehl <eric@thinkhypothetical.com>
Date: Fri, 29 Apr 2022 17:44:00 -0400
Subject: [PATCH] Windows : Disable some warnings from external dependencies.

- MSVC seems to be inconsistent with considering headers included via double quotes as external. Rather than breaking with convention and including external dependencies in angle brackets, we disable these warnings until MSVC handles external warnings correctly.
- See https://developercommunity.visualstudio.com/t/analyze:external--and-external:I-flags/1688240#T-N1689542 for additional information. They are using `/analyze` but it seems to apply to compiling as well.
---
 SConstruct | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/SConstruct b/SConstruct
index a491b1ffe..fc6eebec4 100644
--- a/SConstruct
+++ b/SConstruct
@@ -1173,7 +1173,6 @@ else:
 			"/D_WINDLL",
 			"/D_MBCS",
 			"/W4",
-			"/experimental:external",
 			"/external:W0",
 			"/Zc:inline", # Remove unreferenced function or data if it is COMDAT or has internal linkage only
 			"/GR", # enable RTTI
@@ -1199,6 +1198,12 @@ else:
 				"/wd4305",  # suppress warning about conversion from double to float
 				"/wd4506",  # suppress warning about no definition for inline function. Needed for USD::Glf
 				"/wd4127",  # suppress warning "conditional expression is constant"  \todo: Remove this when Cortex moves to c++17 and use `if constexpr` in `datainterleaveop.cpp:182`
+				# NOTE : the following warnings are generated by external dependencies, even when using /external
+				# They may be able to be re-enabled after updating to MSVC 2022.
+				"/wd4456",  # suppress warning "declaration of 'x' hides previous local declaration"
+				"/wd4459",  # suppress warning "declaration of 'x' hides global declaration"
+				"/wd4201",  # suppress warning "nonstandard extension used : nameless struct/union"
+				"/wd4245",  # suppress warning "'initializing': conversion from 'int' to 'size_t', signed / unsigned mismatch
 				# suppress warning about exported class deriving from non-exported class.
 				# Microsoft states (in https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-2-c4275?view=msvc-170)
 				# that "C4275 can be ignored if you are deriving from a type in the
-- 
2.33.1.windows.1

