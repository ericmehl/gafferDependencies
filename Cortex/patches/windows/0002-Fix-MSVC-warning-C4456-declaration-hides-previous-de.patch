From 7df569d5c3a1c323180dcdd361a21181013111a2 Mon Sep 17 00:00:00 2001
From: Eric Mehl <eric@thinkhypothetical.com>
Date: Thu, 10 Mar 2022 13:03:57 -0500
Subject: [PATCH] Fix MSVC warning C4456 (declaration hides previous
 declaration)

---
 .../src/IECoreAlembic/AlembicScene.cpp        | 172 +++++++++---------
 src/IECoreGL/LuminanceTexture.cpp             |   6 +-
 src/IECoreGL/Renderer.cpp                     |   8 +-
 src/IECoreGL/ToGLStateConverter.cpp           |  12 +-
 src/IECoreImage/ImageThinner.cpp              |   4 +-
 src/IECoreScene/CurveExtrudeOp.cpp            |  50 ++---
 src/IECoreScene/MeshPrimitiveShrinkWrapOp.cpp |   6 +-
 src/IECoreScene/Primitive.cpp                 |   6 +-
 8 files changed, 132 insertions(+), 132 deletions(-)

diff --git a/contrib/IECoreAlembic/src/IECoreAlembic/AlembicScene.cpp b/contrib/IECoreAlembic/src/IECoreAlembic/AlembicScene.cpp
index 1d9c150d3..b1081f06f 100644
--- a/contrib/IECoreAlembic/src/IECoreAlembic/AlembicScene.cpp
+++ b/contrib/IECoreAlembic/src/IECoreAlembic/AlembicScene.cpp
@@ -1564,196 +1564,196 @@ class AlembicScene::AlembicWriter : public AlembicIO
 				return;
 			}
 
-			if( const IECore::BoolData *data = runTimeCast<const IECore::BoolData>( attribute ) )
+			if( const IECore::BoolData *bData = runTimeCast<const IECore::BoolData>( attribute ) )
 			{
-				setProperty<OBoolProperty>( name, time, data );
+				setProperty<OBoolProperty>( name, time, bData );
 			}
-			else if( const IECore::UCharData *data = runTimeCast<const IECore::UCharData>( attribute ) )
+			else if( const IECore::UCharData *ucData = runTimeCast<const IECore::UCharData>( attribute ) )
 			{
-				setProperty<OUcharProperty>( name, time, data );
+				setProperty<OUcharProperty>( name, time, ucData );
 			}
-			else if( const IECore::CharData *data = runTimeCast<const IECore::CharData>( attribute ) )
+			else if( const IECore::CharData *cData = runTimeCast<const IECore::CharData>( attribute ) )
 			{
-				setProperty<OCharProperty>( name, time, data );
+				setProperty<OCharProperty>( name, time, cData );
 			}
-			else if( const IECore::UShortData *data = runTimeCast<const IECore::UShortData>( attribute ) )
+			else if( const IECore::UShortData *usData = runTimeCast<const IECore::UShortData>( attribute ) )
 			{
-				setProperty<OUInt16Property>( name, time, data );
+				setProperty<OUInt16Property>( name, time, usData );
 			}
-			else if( const IECore::ShortData *data = runTimeCast<const IECore::ShortData>( attribute ) )
+			else if( const IECore::ShortData *sData = runTimeCast<const IECore::ShortData>( attribute ) )
 			{
-				setProperty<OInt16Property>( name, time, data );
+				setProperty<OInt16Property>( name, time, sData );
 			}
-			else if( const IECore::UIntData *data = runTimeCast<const IECore::UIntData>( attribute ) )
+			else if( const IECore::UIntData *uiData = runTimeCast<const IECore::UIntData>( attribute ) )
 			{
-				setProperty<OUInt32Property>( name, time, data );
+				setProperty<OUInt32Property>( name, time, uiData );
 			}
-			else if( const IECore::IntData *data = runTimeCast<const IECore::IntData>( attribute ) )
+			else if( const IECore::IntData *iData = runTimeCast<const IECore::IntData>( attribute ) )
 			{
-				setProperty<OInt32Property>( name, time, data );
+				setProperty<OInt32Property>( name, time, iData );
 			}
-			else if( const IECore::UInt64Data *data = runTimeCast<const IECore::UInt64Data>( attribute ) )
+			else if( const IECore::UInt64Data *ui64Data = runTimeCast<const IECore::UInt64Data>( attribute ) )
 			{
-				setProperty<OUInt64Property>( name, time, data );
+				setProperty<OUInt64Property>( name, time, ui64Data );
 			}
-			else if( const IECore::Int64Data *data = runTimeCast<const IECore::Int64Data>( attribute ) )
+			else if( const IECore::Int64Data *i64Data = runTimeCast<const IECore::Int64Data>( attribute ) )
 			{
-				setProperty<OInt64Property>( name, time, data );
+				setProperty<OInt64Property>( name, time, i64Data );
 			}
-			else if( const IECore::HalfData *data = runTimeCast<const IECore::HalfData>( attribute ) )
+			else if( const IECore::HalfData *hData = runTimeCast<const IECore::HalfData>( attribute ) )
 			{
-				setProperty<OHalfProperty>( name, time, data );
+				setProperty<OHalfProperty>( name, time, hData );
 			}
-			else if( const IECore::FloatData *data = runTimeCast<const IECore::FloatData>( attribute ) )
+			else if( const IECore::FloatData *fData = runTimeCast<const IECore::FloatData>( attribute ) )
 			{
-				setProperty<OFloatProperty>( name, time, data );
+				setProperty<OFloatProperty>( name, time, fData );
 			}
-			else if( const IECore::DoubleData *data = runTimeCast<const IECore::DoubleData>( attribute ) )
+			else if( const IECore::DoubleData *dData = runTimeCast<const IECore::DoubleData>( attribute ) )
 			{
-				setProperty<ODoubleProperty>( name, time, data );
+				setProperty<ODoubleProperty>( name, time, dData );
 			}
-			else if( const IECore::StringData *data = runTimeCast<const IECore::StringData>( attribute ) )
+			else if( const IECore::StringData *strData = runTimeCast<const IECore::StringData>( attribute ) )
 			{
-				setProperty<OStringProperty>( name, time, data );
+				setProperty<OStringProperty>( name, time, strData );
 			}
-			else if( const IECore::V2iData *data = runTimeCast<const IECore::V2iData>( attribute ) )
+			else if( const IECore::V2iData *v2iData = runTimeCast<const IECore::V2iData>( attribute ) )
 			{
-				if( data->getInterpretation() == GeometricData::Interpretation::Point )
+				if( v2iData->getInterpretation() == GeometricData::Interpretation::Point )
 				{
-					setProperty<OP2iProperty>( name, time, data );
+					setProperty<OP2iProperty>( name, time, v2iData );
 				}
 				else
 				{
-					setProperty<OV2iProperty>( name, time, data );
+					setProperty<OV2iProperty>( name, time, v2iData );
 				}
 			}
-			else if( const IECore::V2fData *data = runTimeCast<const IECore::V2fData>( attribute ) )
+			else if( const IECore::V2fData *v2fData = runTimeCast<const IECore::V2fData>( attribute ) )
 			{
-				if( data->getInterpretation() == GeometricData::Interpretation::Point )
+				if( v2fData->getInterpretation() == GeometricData::Interpretation::Point )
 				{
-					setProperty<OP2fProperty>( name, time, data );
+					setProperty<OP2fProperty>( name, time, v2fData );
 				}
-				else if( data->getInterpretation() == GeometricData::Interpretation::Normal )
+				else if( v2fData->getInterpretation() == GeometricData::Interpretation::Normal )
 				{
-					setProperty<ON2fProperty>( name, time, data );
+					setProperty<ON2fProperty>( name, time, v2fData );
 				}
 				else
 				{
-					setProperty<OV2fProperty>( name, time, data );
+					setProperty<OV2fProperty>( name, time, v2fData );
 				}
 			}
-			else if( const IECore::V2dData *data = runTimeCast<const IECore::V2dData>( attribute ) )
+			else if( const IECore::V2dData *v2dData = runTimeCast<const IECore::V2dData>( attribute ) )
 			{
-				if( data->getInterpretation() == GeometricData::Interpretation::Point )
+				if( v2dData->getInterpretation() == GeometricData::Interpretation::Point )
 				{
-					setProperty<OP2dProperty>( name, time, data );
+					setProperty<OP2dProperty>( name, time, v2dData );
 				}
-				else if( data->getInterpretation() == GeometricData::Interpretation::Normal )
+				else if( v2dData->getInterpretation() == GeometricData::Interpretation::Normal )
 				{
-					setProperty<ON2dProperty>( name, time, data );
+					setProperty<ON2dProperty>( name, time, v2dData );
 				}
 				else
 				{
-					setProperty<OV2dProperty>( name, time, data );
+					setProperty<OV2dProperty>( name, time, v2dData );
 				}
 			}
-			else if( const IECore::V3iData *data = runTimeCast<const IECore::V3iData>( attribute ) )
+			else if( const IECore::V3iData *v3iData = runTimeCast<const IECore::V3iData>( attribute ) )
 			{
-				if( data->getInterpretation() == GeometricData::Interpretation::Point )
+				if( v3iData->getInterpretation() == GeometricData::Interpretation::Point )
 				{
-					setProperty<OP3iProperty>( name, time, data );
+					setProperty<OP3iProperty>( name, time, v3iData );
 				}
 				else
 				{
-					setProperty<OV3iProperty>( name, time, data );
+					setProperty<OV3iProperty>( name, time, v3iData );
 				}
 			}
-			else if( const IECore::V3fData *data = runTimeCast<const IECore::V3fData>( attribute ) )
+			else if( const IECore::V3fData *v3fData = runTimeCast<const IECore::V3fData>( attribute ) )
 			{
-				if( data->getInterpretation() == GeometricData::Interpretation::Point )
+				if( v3fData->getInterpretation() == GeometricData::Interpretation::Point )
 				{
-					setProperty<OP3fProperty>( name, time, data );
+					setProperty<OP3fProperty>( name, time, v3fData );
 				}
-				else if( data->getInterpretation() == GeometricData::Interpretation::Normal )
+				else if( v3fData->getInterpretation() == GeometricData::Interpretation::Normal )
 				{
-					setProperty<ON3fProperty>( name, time, data );
+					setProperty<ON3fProperty>( name, time, v3fData );
 				}
 				else
 				{
-					setProperty<OV3fProperty>( name, time, data );
+					setProperty<OV3fProperty>( name, time, v3fData );
 				}
 			}
-			else if( const IECore::V3dData *data = runTimeCast<const IECore::V3dData>( attribute ) )
+			else if( const IECore::V3dData *v3dData = runTimeCast<const IECore::V3dData>( attribute ) )
 			{
 
-				if( data->getInterpretation() == GeometricData::Interpretation::Point )
+				if( v3dData->getInterpretation() == GeometricData::Interpretation::Point )
 				{
-					setProperty<OP3dProperty>( name, time, data );
+					setProperty<OP3dProperty>( name, time, v3dData );
 				}
-				else if( data->getInterpretation() == GeometricData::Interpretation::Normal )
+				else if( v3dData->getInterpretation() == GeometricData::Interpretation::Normal )
 				{
-					setProperty<ON3dProperty>( name, time, data );
+					setProperty<ON3dProperty>( name, time, v3dData );
 				}
 				else
 				{
-					setProperty<OV3dProperty>( name, time, data );
+					setProperty<OV3dProperty>( name, time, v3dData );
 				}
 			}
-			else if( const IECore::Box2iData *data = runTimeCast<const IECore::Box2iData>( attribute ) )
+			else if( const IECore::Box2iData *b2iData = runTimeCast<const IECore::Box2iData>( attribute ) )
 			{
-				setProperty<OBox2iProperty>( name, time, data );
+				setProperty<OBox2iProperty>( name, time, b2iData );
 			}
-			else if( const IECore::Box2fData *data = runTimeCast<const IECore::Box2fData>( attribute ) )
+			else if( const IECore::Box2fData *b2fData = runTimeCast<const IECore::Box2fData>( attribute ) )
 			{
-				setProperty<OBox2fProperty>( name, time, data );
+				setProperty<OBox2fProperty>( name, time, b2fData );
 			}
-			else if( const IECore::Box2dData *data = runTimeCast<const IECore::Box2dData>( attribute ) )
+			else if( const IECore::Box2dData *b2dData = runTimeCast<const IECore::Box2dData>( attribute ) )
 			{
-				setProperty<OBox2dProperty>( name, time, data );
+				setProperty<OBox2dProperty>( name, time, b2dData );
 			}
-			else if( const IECore::Box3iData *data = runTimeCast<const IECore::Box3iData>( attribute ) )
+			else if( const IECore::Box3iData *b3iData = runTimeCast<const IECore::Box3iData>( attribute ) )
 			{
-				setProperty<OBox3iProperty>( name, time, data );
+				setProperty<OBox3iProperty>( name, time, b3iData );
 			}
-			else if( const IECore::Box3fData *data = runTimeCast<const IECore::Box3fData>( attribute ) )
+			else if( const IECore::Box3fData *b3fData = runTimeCast<const IECore::Box3fData>( attribute ) )
 			{
-				setProperty<OBox3fProperty>( name, time, data );
+				setProperty<OBox3fProperty>( name, time, b3fData );
 			}
-			else if( const IECore::Box3dData *data = runTimeCast<const IECore::Box3dData>( attribute ) )
+			else if( const IECore::Box3dData *b3dData = runTimeCast<const IECore::Box3dData>( attribute ) )
 			{
-				setProperty<OBox3dProperty>( name, time, data );
+				setProperty<OBox3dProperty>( name, time, b3dData );
 			}
-			else if( const IECore::M33fData *data = runTimeCast<const IECore::M33fData>( attribute ) )
+			else if( const IECore::M33fData *m33fData = runTimeCast<const IECore::M33fData>( attribute ) )
 			{
-				setProperty<OM33fProperty>( name, time, data );
+				setProperty<OM33fProperty>( name, time, m33fData );
 			}
-			else if( const IECore::M33dData *data = runTimeCast<const IECore::M33dData>( attribute ) )
+			else if( const IECore::M33dData *m33dData = runTimeCast<const IECore::M33dData>( attribute ) )
 			{
-				setProperty<OM33dProperty>( name, time, data );
+				setProperty<OM33dProperty>( name, time, m33dData );
 			}
-			else if( const IECore::M44fData *data = runTimeCast<const IECore::M44fData>( attribute ) )
+			else if( const IECore::M44fData *m44fData = runTimeCast<const IECore::M44fData>( attribute ) )
 			{
-				setProperty<OM44fProperty>( name, time, data );
+				setProperty<OM44fProperty>( name, time, m44fData );
 			}
-			else if( const IECore::M44dData *data = runTimeCast<const IECore::M44dData>( attribute ) )
+			else if( const IECore::M44dData *m44dData = runTimeCast<const IECore::M44dData>( attribute ) )
 			{
-				setProperty<OM44dProperty>( name, time, data );
+				setProperty<OM44dProperty>( name, time, m44dData );
 			}
-			else if( const IECore::QuatfData *data = runTimeCast<const IECore::QuatfData>( attribute ) )
+			else if( const IECore::QuatfData *qfData = runTimeCast<const IECore::QuatfData>( attribute ) )
 			{
-				setProperty<OQuatfProperty>( name, time, data );
+				setProperty<OQuatfProperty>( name, time, qfData );
 			}
-			else if( const IECore::QuatdData *data = runTimeCast<const IECore::QuatdData>( attribute ) )
+			else if( const IECore::QuatdData *qdData = runTimeCast<const IECore::QuatdData>( attribute ) )
 			{
-				setProperty<OQuatdProperty>( name, time, data );
+				setProperty<OQuatdProperty>( name, time, qdData );
 			}
-			else if( const IECore::Color3fData *data = runTimeCast<const IECore::Color3fData>( attribute ) )
+			else if( const IECore::Color3fData *c3fData = runTimeCast<const IECore::Color3fData>( attribute ) )
 			{
-				setProperty<OC3fProperty>( name, time, data );
+				setProperty<OC3fProperty>( name, time, c3fData );
 			}
-			else if( const IECore::Color4fData *data = runTimeCast<const IECore::Color4fData>( attribute ) )
+			else if( const IECore::Color4fData *c4fData = runTimeCast<const IECore::Color4fData>( attribute ) )
 			{
-				setProperty<OC4fProperty>( name, time, data );
+				setProperty<OC4fProperty>( name, time, c4fData );
 			}
 			else
 			{
diff --git a/src/IECoreGL/LuminanceTexture.cpp b/src/IECoreGL/LuminanceTexture.cpp
index e2e8fafaa..27a6531d8 100644
--- a/src/IECoreGL/LuminanceTexture.cpp
+++ b/src/IECoreGL/LuminanceTexture.cpp
@@ -95,10 +95,10 @@ struct LuminanceTexture::Constructor
 		std::vector<ElementType> interleaved( n * (ra ? 2 : 1) );
 
 		unsigned int i = 0;
-		for( int y=height-1; y>=0; y-- )
+		for( int iy=height-1; iy>=0; iy-- )
 		{
-			const ElementType *dy = &ry[y*width];
-			const ElementType *da = ra ? &(*ra)[y*width] : nullptr;
+			const ElementType *dy = &ry[iy*width];
+			const ElementType *da = ra ? &(*ra)[iy*width] : nullptr;
 
 			for( unsigned int x=0; x<width; x++ )
 			{
diff --git a/src/IECoreGL/Renderer.cpp b/src/IECoreGL/Renderer.cpp
index c7fcb7ea1..11dbccc4a 100644
--- a/src/IECoreGL/Renderer.cpp
+++ b/src/IECoreGL/Renderer.cpp
@@ -485,10 +485,10 @@ IECore::ConstDataPtr IECoreGL::Renderer::getOption( const std::string &name ) co
 	}
 	else if( name.compare( 0, 5, "user:" )==0 )
 	{
-		IECore::CompoundDataMap::const_iterator it = m_data->options.user.find( name );
-		if( it!=m_data->options.user.end() )
+		IECore::CompoundDataMap::const_iterator optionIt = m_data->options.user.find( name );
+		if( optionIt!=m_data->options.user.end() )
 		{
-			return it->second;
+			return optionIt->second;
 		}
 		else
 		{
@@ -1938,7 +1938,7 @@ bool removeObjectWalk( IECoreGL::GroupPtr parent, IECoreGL::GroupPtr child, cons
 	{
 		// group after removal became empty, remove it too.
 		{
-			std::lock_guard<IECoreGL::Group::Mutex> lock( parent->mutex() );
+			std::lock_guard<IECoreGL::Group::Mutex> parentLock( parent->mutex() );
 			parent->removeChild( child.get() );
 		}
 		{
diff --git a/src/IECoreGL/ToGLStateConverter.cpp b/src/IECoreGL/ToGLStateConverter.cpp
index 8be62b6b4..6d280da1b 100644
--- a/src/IECoreGL/ToGLStateConverter.cpp
+++ b/src/IECoreGL/ToGLStateConverter.cpp
@@ -147,9 +147,9 @@ StateComponentPtr attributeToColorState( const IECore::Object *attribute )
 {
 	Imath::Color4f color( 1 );
 
-	if( auto d = runTimeCast<const Color3fVectorData>( attribute ) )
+	if( auto vectorData = runTimeCast<const Color3fVectorData>( attribute ) )
 	{
-		const std::vector<Imath::Color3f> &v = d->readable();
+		const std::vector<Imath::Color3f> &v = vectorData->readable();
 		if( v.size() == 1 )
 		{
 			const Imath::Color3f &c = v[0];
@@ -160,13 +160,13 @@ StateComponentPtr attributeToColorState( const IECore::Object *attribute )
 			IECore::msg( IECore::Msg::Warning, "ToGLStateConverter", "Expected array of length 1 for \"render:displayColor\"" );
 		}
 	}
-	else if( auto d = runTimeCast<const Color4fData>( attribute ) )
+	else if( auto color4fData = runTimeCast<const Color4fData>( attribute ) )
 	{
-		color = d->readable();
+		color = color4fData->readable();
 	}
-	else if( auto d = runTimeCast<const Color3fData>( attribute ) )
+	else if( auto color3fData = runTimeCast<const Color3fData>( attribute ) )
 	{
-		const Imath::Color3f &c = d->readable();
+		const Imath::Color3f &c = color3fData->readable();
 		color = Imath::Color4f( c[0], c[1], c[2], 1.0f );
 	}
 	else
diff --git a/src/IECoreImage/ImageThinner.cpp b/src/IECoreImage/ImageThinner.cpp
index 0b96602d2..ba3701c24 100644
--- a/src/IECoreImage/ImageThinner.cpp
+++ b/src/IECoreImage/ImageThinner.cpp
@@ -148,10 +148,10 @@ void ImageThinner::modifyChannels( const Imath::Box2i &displayWindow, const Imat
 		{
 			count = 0;
 
-			for( int i = 0; i < 4 ; i++ )
+			for( int j = 0; j < 4 ; j++ )
 			{
 
-				int m = g_masks[i];
+				int m = g_masks[j];
 
 				// Build initial previous scan buffer
 
diff --git a/src/IECoreScene/CurveExtrudeOp.cpp b/src/IECoreScene/CurveExtrudeOp.cpp
index 929df1429..4d4655679 100644
--- a/src/IECoreScene/CurveExtrudeOp.cpp
+++ b/src/IECoreScene/CurveExtrudeOp.cpp
@@ -390,40 +390,40 @@ PatchMeshPrimitivePtr CurveExtrudeOp::buildPatchMesh( const CurvesPrimitive * cu
 		false
 	);
 
-	for ( PrimitiveVariableMap::const_iterator it = curves->variables.begin(); it != curves->variables.end(); ++it )
+	for ( PrimitiveVariableMap::const_iterator vIt = curves->variables.begin(); vIt != curves->variables.end(); ++vIt )
 	{
-		if ( it->second.interpolation == PrimitiveVariable::FaceVarying || it->second.interpolation == PrimitiveVariable::Varying )
+		if ( vIt->second.interpolation == PrimitiveVariable::FaceVarying || vIt->second.interpolation == PrimitiveVariable::Varying )
 		{
-			VaryingFn varyingFn( it->first, curves, curveIndex, varyingOffset, resolution );
- 			assert( it->second.data );
+			VaryingFn varyingFn( vIt->first, curves, curveIndex, varyingOffset, resolution );
+ 			assert( vIt->second.data );
 
-			patchMesh->variables[ it->first ] = PrimitiveVariable(
-				it->second.interpolation,
-				despatchTypedData<VaryingFn, TypeTraits::IsStrictlyInterpolableVectorTypedData>( it->second.data.get(), varyingFn )
+			patchMesh->variables[ vIt->first ] = PrimitiveVariable(
+				vIt->second.interpolation,
+				despatchTypedData<VaryingFn, TypeTraits::IsStrictlyInterpolableVectorTypedData>( vIt->second.data.get(), varyingFn )
 			);
 
 		}
-		else if ( it->second.interpolation == PrimitiveVariable::Vertex )
+		else if ( vIt->second.interpolation == PrimitiveVariable::Vertex )
 		{
-			VertexFn vertexFn( it->first, curves, curveIndex, vertexOffset, resolution );
- 			assert( it->second.data );
+			VertexFn vertexFn( vIt->first, curves, curveIndex, vertexOffset, resolution );
+ 			assert( vIt->second.data );
 
-			patchMesh->variables[ it->first ] = PrimitiveVariable(
-				it->second.interpolation,
-				despatchTypedData<VertexFn, TypeTraits::IsStrictlyInterpolableVectorTypedData>( it->second.data.get(), vertexFn )
+			patchMesh->variables[ vIt->first ] = PrimitiveVariable(
+				vIt->second.interpolation,
+				despatchTypedData<VertexFn, TypeTraits::IsStrictlyInterpolableVectorTypedData>( vIt->second.data.get(), vertexFn )
 			);
 
 		}
-		else if ( it->second.interpolation == PrimitiveVariable::Constant )
+		else if ( vIt->second.interpolation == PrimitiveVariable::Constant )
 		{
-			patchMesh->variables[ it->first ] = PrimitiveVariable( it->second.interpolation, it->second.data->copy() );
+			patchMesh->variables[ vIt->first ] = PrimitiveVariable( vIt->second.interpolation, vIt->second.data->copy() );
 		}
-		else if ( it->second.interpolation == PrimitiveVariable::Uniform )
+		else if ( vIt->second.interpolation == PrimitiveVariable::Uniform )
 		{
-			UniformFn uniformFn( it->first, curves, curveIndex );
-			patchMesh->variables[ it->first ] = PrimitiveVariable(
+			UniformFn uniformFn( vIt->first, curves, curveIndex );
+			patchMesh->variables[ vIt->first ] = PrimitiveVariable(
 				PrimitiveVariable::Constant,
-				despatchTypedData<UniformFn, TypeTraits::IsVectorTypedData>( it->second.data.get(), uniformFn )
+				despatchTypedData<UniformFn, TypeTraits::IsVectorTypedData>( vIt->second.data.get(), uniformFn )
 			);
 		}
 	}
@@ -431,18 +431,18 @@ PatchMeshPrimitivePtr CurveExtrudeOp::buildPatchMesh( const CurvesPrimitive * cu
 	if ( varyingWidthData )
 	{
 		assert( !vertexWidthData );
-		PrimitiveVariableMap::const_iterator it = patchMesh->variables.find( "width" );
-		assert( it !=  patchMesh->variables.end() );
+		PrimitiveVariableMap::const_iterator vIt = patchMesh->variables.find( "width" );
+		assert( vIt !=  patchMesh->variables.end() );
 
-		varyingWidthData = runTimeCast< const FloatVectorData >( it->second.data );
+		varyingWidthData = runTimeCast< const FloatVectorData >( vIt->second.data );
 		assert( varyingWidthData );
 	}
 	else if ( vertexWidthData )
 	{
-		PrimitiveVariableMap::const_iterator it = patchMesh->variables.find( "width" );
-		assert( it !=  patchMesh->variables.end() );
+		PrimitiveVariableMap::const_iterator vIt = patchMesh->variables.find( "width" );
+		assert( vIt !=  patchMesh->variables.end() );
 
-		vertexWidthData = runTimeCast< const FloatVectorData >( it->second.data );
+		vertexWidthData = runTimeCast< const FloatVectorData >( vIt->second.data );
 		assert( vertexWidthData );
 	}
 
diff --git a/src/IECoreScene/MeshPrimitiveShrinkWrapOp.cpp b/src/IECoreScene/MeshPrimitiveShrinkWrapOp.cpp
index 29ce68285..558c49b22 100644
--- a/src/IECoreScene/MeshPrimitiveShrinkWrapOp.cpp
+++ b/src/IECoreScene/MeshPrimitiveShrinkWrapOp.cpp
@@ -372,13 +372,13 @@ void MeshPrimitiveShrinkWrapOp::modifyTypedPrimitive( MeshPrimitive * mesh, cons
 			throw InvalidArgumentException( "Direction mesh with invalid primitive variables given to MeshPrimitiveShrinkWrapOp" );
 		}
 
-		PrimitiveVariableMap::const_iterator it = directionMesh->variables.find("P");
-		if (it == directionMesh->variables.end())
+		PrimitiveVariableMap::const_iterator pIt = directionMesh->variables.find("P");
+		if (pIt == directionMesh->variables.end())
 		{
 			throw InvalidArgumentException("Direction mesh has no primitive variable \"P\" in MeshPrimitiveShrinkWrapOp" );
 		}
 
-		directionVerticesData = it->second.data;
+		directionVerticesData = pIt->second.data;
 	}
 
 	ShrinkWrapFn fn( mesh, target.get(), directionVerticesData.get(), direction, method );
diff --git a/src/IECoreScene/Primitive.cpp b/src/IECoreScene/Primitive.cpp
index b1a5de003..997e0d8b3 100644
--- a/src/IECoreScene/Primitive.cpp
+++ b/src/IECoreScene/Primitive.cpp
@@ -405,9 +405,9 @@ PrimitiveVariableMap Primitive::loadPrimitiveVariables( const IndexedIO *ioInter
 	}
 
 	PrimitiveVariableMap variables;
-	for( const auto &name : names )
+	for( const auto &primVarName : names )
 	{
-		ConstIndexedIOPtr ioPrimVar = ioVariables->subdirectory( name, IndexedIO::NullIfMissing );
+		ConstIndexedIOPtr ioPrimVar = ioVariables->subdirectory( primVarName, IndexedIO::NullIfMissing );
 		if ( !ioPrimVar )
 		{
 			continue;
@@ -424,7 +424,7 @@ PrimitiveVariableMap Primitive::loadPrimitiveVariables( const IndexedIO *ioInter
 
 		Canceller::check( canceller );
 		variables.insert(
-			PrimitiveVariableMap::value_type( name, PrimitiveVariable( (PrimitiveVariable::Interpolation)i, context->load<Data>( ioPrimVar.get(), g_dataEntry ), indices ) )
+			PrimitiveVariableMap::value_type( primVarName, PrimitiveVariable( (PrimitiveVariable::Interpolation)i, context->load<Data>( ioPrimVar.get(), g_dataEntry ), indices ) )
 		);
 	}
 
-- 
2.33.1.windows.1

