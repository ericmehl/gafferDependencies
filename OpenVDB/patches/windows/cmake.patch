From 2225311b11f34b9c1bb3f12dfa011f3eaf8f72ba Mon Sep 17 00:00:00 2001
From: Nick Avramoussis <nna@dneg.com>
Date: Fri, 15 Mar 2019 11:55:21 +0000
Subject: [PATCH] CMake Refactor

General Changes
 - Copyright dates
 - Consistent formatting and white space changes
 - Fixed a number of CMake warnings with newer versions
 - Bumped the minimum CMake requirement to 3.3 to be able to use `IN_LIST` functionality for CMake `LIST`s
 - Explicitly set CMake policy CMP0048 everywhere which represents to monitoring of <Package>_ROOT variables (which our FindXx.cmake modules use)
 - Added support for Log4cplus
 - Remove GLFW <= 2 support
 - Set minimum versions for GLFW, Blosc and Boost
 - Fixed all incorrect dependencies and compile flags for each target
 - Full rpath updates for houdini, bianries, core and python installations

FindXxx/OpenVDBXxxSetup.cmake Modules
 - Fully updated to be consistent in terms of variable names, controls, functionality and results
 - Fixed a number of bugs and improved library searches
 - Find modules now attempt to use pkg-config as part of the search, setting dependent cflags where possible
 - Added component support to ILMBase OpenEXR, TBB, OpenVDB
 - Added imported target support for all dependencies (and updated all vdb cmakes to use this)
 - Converted FindGLFW and FindHDK to setup scripts which wrap FIND_PACKAGE calls (as these packages use the dependent packages cmake)

OpenVDBHoudiniSetup.cmake

 - Wraps the call to FindPackage ( Houdini ) by reading from HFS, HOUDINI_ROOT etc
 - Adds missing libHoudiniRAY target for VRAY procedural
 - Explicitly sets dependency variables to point to the Houdini installation, ensuring all configured packages use the correct libraries and removing the need for the user to provide these
  - Updates to support ilmbase and openexr for Houdini 17.5
 - Sets OPENVDB_HOUDINI_ABI, read by the root CMake to configure the OpenVDB ABI

Root CMake
 - Full documentation of dependencies for core library components
 - Specifically disable in source builds
 - Revamped options to ensure advanced/deprecated options are hidden
 - Added specific handling for CMAKE_BUILD_TYPE
 - Migrated the Houdini detection stage to the root CMake to enabled subsequent dependency configuration for all packages (see OpenVDBHoudiniSetup.cmake)
 - Removed the limitation of building the python plugin with Houdini if >= H16.5
 - More controls for default behaviour for OPENVDB_ABI_VERSION_NUMBER, including automatic detection from Houdini installations
 - Consolidated OpenVDB Version detection into FindOpenVDB.cmake
 - Moved doxygen generation to root as it doesn't rely on anything else

Core CMake
 - Now only represents the core library
 - Added OPENVDB_TOOLS_RAYTRACER_USE_EXR option
 - Added a Blosc version warning
 - Removed directory install command in favour of specific header file installations (resolving recursive directory issues)
 - Added an option to specify the target library name

Binaries/Unit Tests CMake
 - New CMake to represent binaries
 - Added granular binary controls
 - Fixed RPathing issues
 - New CMake to represent unit tests

Python CMake
 - Fixed a compile issue on MacOS
 - Added OPENVDB_PYTHON_WRAP_ALL_GRID_TYPES option
 - Improved python component requirement handling with FindPython
 - Added BOOST_PYTHON_NAMESPACE_VERSIONING
 - Added a PYTHON_VERSION cached variable
 - Added missing pyPointGrid.cc
 - Fixed header installation
 - Added NumPy support (but requires CMake 3.12)

Houdini CMake
 - Updated to use Houdini CMake for library handling
 - Added optional and cache variables to control SESI dso tagging
 - Added variables to explicitly control install locations
 - Improve blosc defines applied to SOPs
 - Added missing houdini/GEO_VDBTranslator.cc to openvdb_houdini lib
 - Improved SOP list formatting
 - Added a dummy target representing all DSOs (not the shared library)
 - Added VRAY_OpenVDB_Points target
 - Added install rules for icons
 - Changed the behaviour of OPENVDB_HOUDINI_INSTALL_LIBRARY to install to CMAKE_INSTALL_PREFIX

Signed-off-by: Nick Avramoussis <nna@dneg.com>
---
 CMakeLists.txt                               | 525 +++++++++++++--
 cmake/FindBlosc.cmake                        | 220 ++++--
 cmake/FindCPPUnit.cmake                      | 203 +++++-
 cmake/FindGLEW.cmake                         |  72 +-
 cmake/FindGLFW.cmake                         |  96 ---
 cmake/FindGLFW3.cmake                        | 104 ---
 cmake/FindHDK.cmake                          | 470 -------------
 cmake/FindILMBase.cmake                      | 446 ++++++++-----
 cmake/FindLog4cplus.cmake                    | 219 ++++++
 cmake/FindMaya.cmake                         |  65 +-
 cmake/FindOpenEXR.cmake                      | 365 +++++++---
 cmake/FindOpenVDB.cmake                      | 307 +++++++--
 cmake/FindTBB.cmake                          | 383 ++++++++---
 cmake/OpenVDBGLFW3Setup.cmake                | 108 +++
 cmake/OpenVDBHoudiniSetup.cmake              | 236 +++++++
 openvdb/CMakeLists.txt                       | 663 +++++++++----------
 openvdb/cmd/CMakeLists.txt                   | 293 ++++++++
 openvdb/python/CMakeLists.txt                | 268 ++++++--
 openvdb/python/pyOpenVDBModule.cc            |   1 +
 openvdb/unittest/CMakeLists.txt              | 229 +++++++
 openvdb_houdini/CMakeLists.txt               | 534 ++++++++++-----
 openvdb_houdini/houdini/GEO_VDBTranslator.cc |   4 -
 openvdb_maya/CMakeLists.txt                  | 108 ++-
 23 files changed, 4016 insertions(+), 1903 deletions(-)
 delete mode 100644 cmake/FindGLFW.cmake
 delete mode 100644 cmake/FindGLFW3.cmake
 delete mode 100644 cmake/FindHDK.cmake
 create mode 100644 cmake/FindLog4cplus.cmake
 create mode 100644 cmake/OpenVDBGLFW3Setup.cmake
 create mode 100644 cmake/OpenVDBHoudiniSetup.cmake
 create mode 100644 openvdb/cmd/CMakeLists.txt
 create mode 100644 openvdb/unittest/CMakeLists.txt

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 597d5732e..f7dd7137e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,4 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
 #
 # All rights reserved. This software is distributed under the
 # Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
@@ -24,35 +24,368 @@
 # IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
 # LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
 #
+#[=======================================================================[
 
-# yue.nicholas@gmail.com
-CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
+  CMake Configuration for OpenVDB
+
+  This file provides most available options for configuring the build and
+  installation of all OpenVDB components. By default the core library,
+  python module and unit tests are built.
+
+  The OpenVDB CMake build system generates targets depending on the
+  enabled components. It is designed for out of source CMake generation
+  (a build location for CMake to write to will be required). Depending on
+  the components you choose to build, a number of optional and required
+  dependencies are expected. Below is a full list of all dependencies,
+  followed up by each OpenVDB components requirements.
+
+  ########################################################################
+
+  Dependencies:
+
+    -  ILMBase
+      - Used for the definition of half (half precision floating points)
+        and for additional EXR serialization support. Usually available by
+        default in most UNIX distributions.
+      - Installation
+        - UNIX apt-get:
+          - apt-get install libilmbase-dev
+        - Homebrew:
+          - brew install ilmbase
+        - From Source:
+          - http://www.openexr.com
+      - Usage
+        If CMake cannot find your installation location automatically:
+        - Provide Root from environment:
+            export ILMBASE_ROOT=<Installation Root Directory>
+        - Provide Root to CMake:
+            -D ILMBASE_ROOT=<Installation Root Directory>
+        - Provide Locations to CMake:
+            -D ILMBASE_INCLUDEDIR=<Include path>
+            -D ILMBASE_LIBRARYDIR=<Lib path>
+
+    - OpenEXR
+      - Used for OpenEXR image serialization support. Usually available by
+        default in most UNIX distributions.
+      - Installation
+        - UNIX apt-get:
+          - apt-get install libopenexr-dev
+        - Homebrew:
+          - brew install openexr
+        - From Source:
+          - http://www.openexr.com
+      - Usage
+        If CMake cannot find your installation location automatically:
+        - Provide Root from environment:
+            export OPENEXR_ROOT=<Installation Root Directory>
+        - Provide Root to CMake:
+            -D OPENEXR_ROOT=<Installation Root Directory>
+        - Provide Locations to CMake:
+            -D OPENEXR_INCLUDEDIR=<Include path>
+            -D OPENEXR_LIBRARYDIR=<Lib path>
+
+    - Threading Building Blocks (TBB)
+      - A portable C++ template library for task parallelism.
+      - Installation
+        - UNIX apt-get:
+          - apt-get install libtbb-dev
+        - Homebrew:
+          - brew install tbb
+        - From Source:
+          -  https://www.threadingbuildingblocks.org/
+      - Usage
+        If CMake cannot find your installation location automatically:
+        - Provide Root from environment:
+            export TBB_ROOT=<Installation Root Directory>
+        - Provide Root to CMake:
+            -D TBB_ROOT=<Installation Root Directory>
+        - Provide Locations to CMake:
+            -D TBB_INCLUDEDIR=<Include path>
+            -D TBB_LIBRARYDIR=<Lib path>
+
+    - ZLib
+      - Compression library for disk serialization compression. Usually
+        available by default in most UNIX distributions.
+      - Installation
+        - UNIX apt-get:
+          - apt-get install zlibc
+        - Homebrew:
+          - brew install zlib
+        - From Source:
+          - https://www.zlib.net/
+      - Usage
+        If CMake cannot find your installation location automatically:
+        - Provide Root from environment:
+            export ZLIB_ROOT=<Installation Root Directory>
+        - Provide Root to CMake:
+            -D ZLIB_ROOT=<Installation Root Directory>
+
+    - Boost Components: => 1.55
+      - Various boost components are required for some OpenVDB components
+        - Boost.System
+        - Boost.IOStreams
+        - Boost.Python
+        - Boost.Thread
+      - Installation
+        - UNIX apt-get:
+          - apt-get install libboost-system-dev
+          - apt-get install libboost-iostreams-dev
+          - apt-get install libboost-python-dev
+          - apt-get install libboost-thread-dev
+        - Homebrew:
+          - brew install boost
+          - brew install boost-python
+        - From Source:
+          - https://www.boost.org/
+      - Usage
+        If CMake cannot find your installation location automatically:
+        - Provide Root from environment:
+            export BOOST_ROOT=<Installation Root Directory>
+        - Provide Root to CMake:
+            -D BOOST_ROOT=<Installation Root Directory>
+        - Provide Locations to CMake:
+            -D BOOST_INCLUDEDIR=<Include path>
+            -D BOOST_LIBRARYDIR=<Lib path>
+
+    - Python
+      - The python interpreter and libraries for C++/python bindings.
+        Usually available by default in most UNIX distributions.
+      - Installation
+        - UNIX apt-get:
+          - apt-get install python-dev
+          - apt-get install python-numpy
+          - apt-get install python-epydoc
+        - Homebrew:
+          - brew install python
+    - CPPUnit
+      - A unit testing framework module for C++.
+      - Installation
+        - Homebrew:
+          - brew install cppunit
+        - From Source:
+          - https://anongit.freedesktop.org/git/libreoffice/cppunit.git
+      - Usage
+        If CMake cannot find your installation location automatically:
+        - Provide Root from environment:
+            export CPPUNIT_ROOT=<Installation Root Directory>
+        - Provide Root to CMake:
+            -D CPPUNIT_ROOT=<Installation Root Directory>
+        - Provide Locations to CMake:
+            -D CPPUNIT_INCLUDEDIR=<Include path>
+            -D CPPUNIT_LIBRARYDIR=<Lib path>
+
+    - Blosc: => 1.5
+      - An optional but recommended dependency for improved disk
+        compression.
+      - Installation
+        - Homebrew:
+          - brew install blosc
+        - From Source:
+          - https://github.com/Blosc/c-blosc/releases.
+      - Usage
+        Make sure that you set USE_BLOSC=ON
+        If CMake cannot find your installation location automatically:
+        - Provide Root from environment:
+            export BLOSC_ROOT=<Installation Root Directory>
+        - Provide Root to CMake:
+            -D BLOSC_ROOT=<Installation Root Directory>
+        - Provide Locations to CMake:
+            -D BLOSC_INCLUDEDIR=<Include path>
+            -D BLOSC_LIBRARYDIR=<Lib path>
+
+    - Log4cplus
+      - An optional dependency for improved OpenVDB Logging
+      - Installation
+        - UNIX apt-get:
+          - apt-get install liblog4cplus-dev
+        - From Source:
+          - https://github.com/log4cplus/log4cplus
+      - Usage
+        Make sure that you set USE_LOG4CPLUS=ON
+        If CMake cannot find your installation location automatically:
+        - Provide Root from environment:
+            export LOG4CPLUS_ROOT=<Installation Root Directory>
+        - Provide Root to CMake:
+            -D LOG4CPLUS_ROOT=<Installation Root Directory>
+        - Provide Locations to CMake:
+            -D LOG4CPLUS_INCLUDEDIR=<Include path>
+            -D LOG4CPLUS_LIBRARYDIR=<Lib path>
+
+    - GLFW: => 3
+      - Simple API for OpenGL development
+      - Installation
+        - UNIX apt-get:
+          - apt-get install libglfw3-dev
+        - Homebrew:
+          - brew install glfw
+        - From Source:
+          - https://www.glfw.org/
+      - Usage
+        OpenVDB uses GLFW's CMake installation to find and configure
+        the GLFW dependency. If it cannot be found:
+        - Provide the location of GLFW's CMake folder
+            -D CMAKE_PREFIX_PATH=<GLFW CMake location>
+
+    - Doxygen:
+      - Documentation generation from C++
+      - Installation
+        - UNIX apt-get:
+          - apt-get install doxygen
+        - Homebrew:
+          - brew install doxygen
+        - From Source:
+          - http://www.doxygen.nl/
+
+  Note that various packages have inbuilt CMake module support. See the
+  CMake documentation for more ZLib, Doxygen, OpenGL, Boost and Python
+  controls:
+  https://cmake.org/cmake/help/v3.14/manual/cmake-modules.7.html
+
+  ########################################################################
+
+  OpenVDB Components and their dependencies:
+
+    OpenVDB Core
+      Main CMake: openvdb/CMakeLists.txt
+      Required: ILMBase::Half, TBB::tbb, ZLib, Boost::System,
+        Boost::IOStream
+      Optional: Blosc, Log4cplus, OpenEXR
+
+    OpenVDB Binaries
+      Main CMake: openvdb/cmd/CMakeLists.txt
+      Required: (OpenVDB Core + Dependencies), GLFW3 (vdb_view),
+        OpenGL (vdb_view), Boost::Thread (vdb_view), OpenEXR (vdb_render)
+        ILMBase (vdb_render)
+
+    OpenVDB Python
+      Main CMake: openvdb/python/CMakeLists.txt
+      Required: (OpenVDB Core + Dependencies), Python, Boost::Python
+
+    OpenVDB Unit Tests
+      Main CMake: openvdb/unittest/CMakeLists.txt
+      Required: (OpenVDB Core + Dependencies), CPPUnit
+
+  ########################################################################
+
+  The CMake supports building the various components of OpenVDB against
+  a prior installation of OpenVDB.
+
+#]=======================================================================]
 
 PROJECT ( OpenVDB )
+CMAKE_MINIMUM_REQUIRED ( VERSION 3.3 )
+# Monitoring <PackageName>_ROOT variables
+IF ( POLICY CMP0048 )
+  CMAKE_POLICY ( SET CMP0048 NEW )
+ENDIF ()
 
-ENABLE_TESTING()
+###### OpenVDB Build/Component Options
 
-find_program(CCACHE_FOUND ccache)
-if(CCACHE_FOUND)
-    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
-    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
-endif(CCACHE_FOUND)
+INCLUDE ( CMakeDependentOption )
 
+# @todo SSE/AVX instruction options
+# @todo static/shared library options
+OPTION ( OPENVDB_BUILD_CORE "Build the OpenVDB core" ON )
+OPTION ( OPENVDB_BUILD_BINARIES "Build the vdb binaries" ON )
+OPTION ( OPENVDB_BUILD_PYTHON_MODULE "Build the pyopenvdb Python module" ON )
 OPTION ( OPENVDB_BUILD_UNITTESTS "Build the OpenVDB unit tests" ON )
 OPTION ( OPENVDB_BUILD_DOCS "Build the OpenVDB documentation" OFF )
-OPTION ( OPENVDB_BUILD_PYTHON_MODULE "Build the pyopenvdb Python module" ON )
 OPTION ( OPENVDB_BUILD_HOUDINI_SOPS "Build the Houdini SOPs" OFF )
 OPTION ( OPENVDB_BUILD_MAYA_PLUGIN "Build the Maya plugin" OFF )
-OPTION ( OPENVDB_BUILD_CORE "Build the OpenVDB core" ON )
 OPTION ( OPENVDB_ENABLE_RPATH "Build with RPATH information" ON )
-OPTION ( OPENVDB_ENABLE_3_ABI_COMPATIBLE "Build with OpenVDB v3 ABI" ON )
-OPTION ( OPENVDB_DISABLE_BOOST_IMPLICIT_LINKING "Disable the implicit linking of Boost libraries on Windows" ON )
 OPTION ( OPENVDB_CXX_STRICT "Enable or disable a set of pre-defined compiler warnings for clang and gcc" OFF )
+OPTION ( OPENVDB_ENABLE_3_ABI_COMPATIBLE "Build with OpenVDB ABI 3 (deprecated - see OPENVDB_ABI_VERSION_NUMBER)" OFF )
+
+###### Dependency options
+
+# @todo scalable/concurrent malloc option(s)
+# @todo non-required behavior for blosc, log4cplus (i.e. use if available)
+# @todo OPENVDB_USE_NUMPY options for NumPy
+OPTION ( USE_HOUDINI [=[
+Build the library against a Houdini installation. Turns on autmatically if OPENVDB_BUILD_HOUDINI_SOPS is enabled.
+When enabled, you do not need to provide dependency locations for OpenEXR, ILMBase, TBB, Boost and Blosc. You can
+optionally provide your own version of Boost when building against Houdini 16.5 and gerater.]=] OFF )
+OPTION ( USE_BLOSC "Build the library with blosc support." ON )
+OPTION ( USE_LOG4CPLUS "Build the library with log4cplus support." OFF )
+OPTION ( OPENEXR_NAMESPACE_VERSIONING "Set the expected names of OpenEXR libraries to be version suffixed" OFF )
+OPTION ( ILMBASE_NAMESPACE_VERSIONING "Set the expected names of ILM Base libraries to be version suffixed" OFF )
+CMAKE_DEPENDENT_OPTION ( OPENVDB_DISABLE_BOOST_IMPLICIT_LINKING
+  "Disable the implicit linking of Boost libraries on Windows" ON "WIN32" OFF)
 OPTION ( USE_SYSTEM_LIBRARY_PATHS "Build with system library paths" ON )
+CMAKE_DEPENDENT_OPTION ( BOOST_PYTHON_NAMESPACE_VERSIONING
+  "Set the expected names of Boost.Python libraries to be version suffixed"
+  ON "OPENVDB_BUILD_PYTHON_MODULE" ON )
+
+SET ( OPENVDB_ABI_VERSION_NUMBER "" CACHE STRING "Build for compatibility with version N of the
+  OpenVDB Grid ABI, where N is 3, 4, 5 etc. (some newer features will be disabled)." )
+
+# Various dependency library versions - Cache options can be changed
+
+SET ( MINIMUM_BOOST_VERSION 1.55 )
+SET ( MINIMUM_BLOSC_VERSION 1.5 )
+SET ( MINIMUM_GLFW_VERSION 3 )
+
+#########################################################################
+
+# General CMake and CXX settings
+
+SET ( CMAKE_CXX_STANDARD 11 )
+SET ( CMAKE_CXX_STANDARD_REQUIRED ON )
+SET ( CMAKE_CXX_EXTENSIONS OFF )
+
+SET ( CMAKE_DISABLE_SOURCE_CHANGES ON )
+SET ( CMAKE_DISABLE_IN_SOURCE_BUILD ON )
+
+IF ( OPENVDB_ENABLE_RPATH )
+  # Configure rpath for installation base on the following:
+  # https://gitlab.kitware.com/cmake/community/wikis/doc/cmake/RPATH-handling
+  SET ( CMAKE_SKIP_BUILD_RPATH FALSE )
+  SET ( CMAKE_BUILD_WITH_INSTALL_RPATH FALSE )
+  SET ( CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE )
+ENDIF ()
+
+# For CMake's find Threads module which brings in pthread - This flag
+# forces the compiler -pthread flag vs -lpthread
+SET ( THREADS_PREFER_PTHREAD_FLAG TRUE )
+
+ENABLE_TESTING ()
+
+# Various root level CMake options which are marked as advanced
+MARK_AS_ADVANCED (
+  CCACHE_PATH
+  ILMBASE_NAMESPACE_VERSIONING
+  OPENEXR_NAMESPACE_VERSIONING
+  OPENVDB_CXX_STRICT
+  OPENVDB_ENABLE_3_ABI_COMPATIBLE
+  OPENVDB_ENABLE_RPATH
+  USE_HOUDINI
+  USE_LOG4CPLUS
+  USE_SYSTEM_LIBRARY_PATHS
+  )
 
-SET ( OPENVDB_ABI_VERSION_NUMBER "" CACHE STRING "build for compatibility
-with version N of the OpenVDB Grid ABI, where N is 2, 3, 4, etc.
-(some newer features will be disabled)")
+# Add our cmake modules
+
+LIST ( APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" )
+
+#########################################################################
+
+# ccache setup
+
+FIND_PROGRAM ( CCACHE_PATH ccache )
+IF ( CCACHE_PATH )
+    SET_PROPERTY ( GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache )
+    SET_PROPERTY ( GLOBAL PROPERTY RULE_LAUNCH_LINK ccache )
+    MESSAGE ( STATUS "Using ccache: ${CCACHE_PATH}" )
+ENDIF ( CCACHE_PATH )
+
+# Build type configuration - default to Release if none is set
+
+IF ( NOT CMAKE_BUILD_TYPE )
+  SET ( CMAKE_BUILD_TYPE Release CACHE STRING
+    "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." FORCE
+    )
+ENDIF ()
+MESSAGE ( STATUS "CMake Build Type: ${CMAKE_BUILD_TYPE}" )
 
 IF ( USE_SYSTEM_LIBRARY_PATHS )
   SET ( SYSTEM_LIBRARY_PATHS
@@ -67,67 +400,132 @@ IF ( USE_SYSTEM_LIBRARY_PATHS )
     )
 ENDIF ()
 
-IF (OPENVDB_BUILD_HOUDINI_SOPS)
-  SET ( OPENVDB_BUILD_PYTHON_MODULE OFF )
+#########################################################################
+
+# Compiler options
+
+IF ( OPENVDB_CXX_STRICT )
+  # Add definitions for a number of compiler warnings for GCC and Clang for all sub projects
+  IF ( "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" )
+    MESSAGE ( STATUS "Configuring Clang CXX warnings" )
+    ADD_DEFINITIONS (
+      -Wall
+      -Wextra
+      -Wconversion
+      -Wno-sign-conversion
+    )
+  ELSEIF ( "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" )
+    MESSAGE ( STATUS "Configuring GCC CXX warnings" )
+    ADD_DEFINITIONS (
+      -Wall
+      -Wextra
+      -pedantic
+      -Wcast-align
+      -Wcast-qual
+      -Wconversion
+      -Wdisabled-optimization
+      -Woverloaded-virtual
+    )
+  ELSE ()
+    MESSAGE ( WARNING "No available CXX warnings for compiler ${CMAKE_CXX_COMPILER_ID}" )
+  ENDIF ()
+ENDIF ()
+
+##########################################################################
+
+# Configure Houdini installation if necessary
+
+IF ( OPENVDB_BUILD_HOUDINI_SOPS )
+    SET ( USE_HOUDINI ON )
 ENDIF ()
 
 IF ( APPLE )
-  IF ( OPENVDB_BUILD_HOUDINI_SOPS AND OPENVDB_BUILD_MAYA_PLUGIN )
-	MESSAGE ( FATAL_ERROR "On OSX, Houdini linked with libc++ whereas Maya is linked with libstdc++, the different runtimes are not mutually compatible, build them Houdini SOPs and Maya plugins separately with the requisite DCC's compiler" )
+  IF ( USE_HOUDINI AND OPENVDB_BUILD_MAYA_PLUGIN )
+    MESSAGE ( FATAL_ERROR "On macOS, Houdini is linked with libc++ whereas Maya is linked with libstdc++. "
+      "The different runtimes are not mutually compatible, so build the Houdini and Maya plugins separately "
+      "with the requisite DCC's compiler." )
   ENDIF ()
 ENDIF ()
 
-LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
+# If we're building against a Houdini Install, load OpenVDBHoudiniSetup which
+# configures all dependency locations and Houdini libraries for OpenVDB
+
+IF ( USE_HOUDINI )
+  INCLUDE ( OpenVDBHoudiniSetup )
+ENDIF ()
+
+#########################################################################
 
-SET ( OPENVDB_TOP_LEVEL_DIR ${PROJECT_SOURCE_DIR} CACHE PATH "OpenVDB Top Level Directory to share among sub projects" )
+# Determine OpenVDB version by calling FIND_PACKAGE with OpenVDB - If we're
+# building the core library, the find package call is set to quiet to
+# ignore the missing libs
 
-INCLUDE_DIRECTORIES ( ${OPENVDB_TOP_LEVEL_DIR} ) # To make sure we pick up headers from this version of OpenVDB we are building
-IF ( ${OPENVDB_ABI_VERSION_NUMBER} )
-  MESSAGE( STATUS "Using openvdb abi version ${OPENVDB_ABI_VERSION_NUMBER}")
+IF ( NOT OPENVDB_BUILD_CORE )
+  FIND_PACKAGE ( OpenVDB REQUIRED )
+ELSE ()
+  SET ( OPENVDB_ROOT ${CMAKE_CURRENT_SOURCE_DIR} )
+  FIND_PACKAGE ( OpenVDB QUIET )
+  MESSAGE ( STATUS "Configuring for OpenVDB Version ${OPENVDB_VERSION}")
+ENDIF ()
 
-  ADD_DEFINITIONS (-DOPENVDB_ABI_VERSION_NUMBER=${OPENVDB_ABI_VERSION_NUMBER} )
-ELSEIF ( OPENVDB_ENABLE_3_ABI_COMPATIBLE )
+#########################################################################
 
-  MESSAGE( DEPRECATION "OPENVDB_ENABLE_3_ABI_COMPATIBLE is deprecated. Instead use OPENVDB_ABI_VERSION_NUMBER=N, where N is the abi version.")
+# Determine the OpenVDB ABI Version. If OPENVDB_ABI_VERSION_NUMBER is defined, use that value,
+# otherwise check the legacy OPENVDB_ENABLE_3_ABI_COMPATIBLE option, falling back to the major
+# library version number
 
-  ADD_DEFINITIONS ( -DOPENVDB_3_ABI_COMPATIBLE )
+SET ( ABI "" )
+IF ( OPENVDB_HOUDINI_ABI )
+  IF ( OPENVDB_ABI_VERSION_NUMBER AND ( NOT "${OPENVDB_ABI_VERSION_NUMBER}" EQUAL "${OPENVDB_HOUDINI_ABI}" ) )
+    MESSAGE ( WARNING "CMake will explicitly set the value of OPENVDB_ABI_VERSION_NUMBER to "
+      "${OPENVDB_HOUDINI_ABI} to match the ABI of the target Houdini Version." )
+  ENDIF ()
+  SET ( ABI ${OPENVDB_HOUDINI_ABI} )
+ELSEIF ( NOT OPENVDB_ABI_VERSION_NUMBER )
+  IF ( OPENVDB_ENABLE_3_ABI_COMPATIBLE )
+    SET ( ABI 3 )
+    MESSAGE ( DEPRECATION "OPENVDB_ENABLE_3_ABI_COMPATIBLE is deprecated. Instead use "
+      "-D OPENVDB_ABI_VERSION_NUMBER=N, where N is the abi version." )
+  ELSE ()
+    SET ( ABI ${OpenVDB_MAJOR_VERSION} )
+  ENDIF ()
+ELSE ()
+  SET ( ABI ${OPENVDB_ABI_VERSION_NUMBER} )
+  IF ( NOT OPENVDB_BUILD_CORE )
+    # @todo  determine if the VDB version we're building against has the same ABI and error if not
+  ENDIF ()
 ENDIF ()
 
-IF ( OPENVDB_CXX_STRICT )
-    # Add definitions for a number of compiler warnings for GCC and Clang for all sub projects
-    IF ( "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" )
-        MESSAGE ( STATUS "Configuring Clang CXX warnings" )
-        ADD_DEFINITIONS (
-            -Wall
-            -Wextra
-            -Wconversion
-            -Wno-sign-conversion
-        )
-    ELSEIF ( "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" )
-        MESSAGE ( STATUS "Configuring GCC CXX warnings" )
-        ADD_DEFINITIONS (
-            -Wall
-            -Wextra
-            -pedantic
-            -Wcast-align
-            -Wcast-qual
-            -Wconversion
-            -Wdisabled-optimization
-            -Woverloaded-virtual
-        )
-    ELSE ()
-        MESSAGE ( WARNING "No available CXX warnings for compiler "${CMAKE_CXX_COMPILER_ID} )
-    ENDIF ()
+# Always force set as we may need to change it if it's incompatible with Houdini
+SET ( OPENVDB_ABI_VERSION_NUMBER ${ABI} CACHE STRING "Build for compatibility with version N of the
+  OpenVDB Grid ABI, where N is 3, 4, 5 etc. (some newer features will be disabled)."
+  FORCE )
+
+IF ( OPENVDB_ABI_VERSION_NUMBER EQUAL 3 )
+  ADD_DEFINITIONS ( -DOPENVDB_3_ABI_COMPATIBLE )
 ENDIF ()
 
+ADD_DEFINITIONS ( -DOPENVDB_ABI_VERSION_NUMBER=${OPENVDB_ABI_VERSION_NUMBER} )
+MESSAGE ( STATUS "Configuring for OpenVDB ABI Version ${OPENVDB_ABI_VERSION_NUMBER}")
+
+##########################################################################
+
 IF ( OPENVDB_BUILD_CORE )
   ADD_SUBDIRECTORY ( openvdb )
 ENDIF ()
 
-IF (OPENVDB_BUILD_PYTHON_MODULE)
+IF ( OPENVDB_BUILD_PYTHON_MODULE )
   ADD_SUBDIRECTORY ( openvdb/python )
 ENDIF ()
 
+IF ( OPENVDB_BUILD_BINARIES )
+  ADD_SUBDIRECTORY ( openvdb/cmd )
+ENDIF ()
+
+IF ( OPENVDB_BUILD_UNITTESTS )
+  ADD_SUBDIRECTORY ( openvdb/unittest )
+ENDIF ()
+
 IF ( OPENVDB_BUILD_HOUDINI_SOPS )
   ADD_SUBDIRECTORY ( openvdb_houdini )
 ENDIF ()
@@ -135,3 +533,20 @@ ENDIF ()
 IF ( OPENVDB_BUILD_MAYA_PLUGIN )
   ADD_SUBDIRECTORY ( openvdb_maya )
 ENDIF ()
+
+IF ( OPENVDB_BUILD_DOCS )
+  FIND_PACKAGE ( Doxygen REQUIRED )
+
+  FILE ( READ ${CMAKE_CURRENT_SOURCE_DIR}/openvdb/doxygen-config DOXYGEN_CONFIG_CONTENT )
+  FILE ( WRITE ${CMAKE_CURRENT_BINARY_DIR}/openvdb/cmake-doxygen-config ${DOXYGEN_CONFIG_CONTENT} )
+  FILE ( APPEND ${CMAKE_CURRENT_BINARY_DIR}/openvdb/cmake-doxygen-config "OUTPUT_DIRECTORY=${CMAKE_CURRENT_BINARY_DIR}/openvdb/doc\n" )
+
+  ADD_CUSTOM_TARGET ( doc
+    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/openvdb/cmake-doxygen-config
+    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
+    COMMENT "Generating API documentation with Doxygen" VERBATIM
+    )
+
+  INSTALL ( CODE "EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build  \"${PROJECT_BINARY_DIR}\" --target doc)")
+  INSTALL ( DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/openvdb/doc/html DESTINATION docs)
+ENDIF ()
diff --git a/cmake/FindBlosc.cmake b/cmake/FindBlosc.cmake
index bde456cfa..3b5dbbc1b 100644
--- a/cmake/FindBlosc.cmake
+++ b/cmake/FindBlosc.cmake
@@ -1,4 +1,4 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
 #
 # All rights reserved. This software is distributed under the
 # Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
@@ -24,58 +24,196 @@
 # IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
 # LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
 #
+#[=======================================================================[.rst:
 
-# -*- cmake -*-
-# - Find Blosc
-#
-# Author : Nicholas Yue yue.nicholas@gmail.com
-#
-# BLOSC_FOUND            set if Blosc is found.
-# BLOSC_INCLUDE_DIR      Blosc's include directory
-# BLOSC_LIBRARYDIR      Blosc's library directory
-# BLOSC_LIBRARIES        all Blosc libraries
+FindBlosc
+---------
+
+Find Blosc include dirs and libraries
+
+Use this module by invoking find_package with the form::
+
+  find_package(Blosc
+    [version] [EXACT]      # Minimum or EXACT version e.g. 1.5.0
+    [REQUIRED]             # Fail with error if Blosc is not found
+    )
+
+IMPORTED Targets
+^^^^^^^^^^^^^^^^
+
+``Blosc::blosc``
+  This module defines IMPORTED target Blosc::Blosc, if Blosc has been found.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This will define the following variables:
+
+``Blosc_FOUND``
+  True if the system has the Blosc library.
+``Blosc_VERSION``
+  The version of the Blosc library which was found.
+``Blosc_INCLUDE_DIRS``
+  Include directories needed to use Blosc.
+``Blosc_LIBRARIES``
+  Libraries needed to link to Blosc.
+``Blosc_LIBRARY_DIRS``
+  Blosc library directories.
+
+Cache Variables
+^^^^^^^^^^^^^^^
+
+The following cache variables may also be set:
+
+``Blosc_INCLUDE_DIR``
+  The directory containing ``blosc.h``.
+``Blosc_LIBRARY``
+  The path to the Blosc library.
+
+Hints
+^^^^^^^^^^^^^^^
+
+Instead of explicitly setting the cache variables, the following variables
+may be provided to tell this module where to look.
+
+``BLOSC_ROOT``
+  Preferred installation prefix.
+``BLOSC_INCLUDEDIR``
+  Preferred include directory e.g. <prefix>/include
+``BLOSC_LIBRARYDIR``
+  Preferred library directory e.g. <prefix>/lib
+``SYSTEM_LIBRARY_PATHS``
+  Paths appended to all include and lib searches.
+
+#]=======================================================================]
+
+MARK_AS_ADVANCED (
+  Blosc_INCLUDE_DIR
+  Blosc_LIBRARY
+)
+
+# Append BLOSC_ROOT or $ENV{BLOSC_ROOT} if set (prioritize the direct cmake var)
+SET ( _BLOSC_ROOT_SEARCH_DIR "" )
 
-FIND_PACKAGE ( PackageHandleStandardArgs )
+IF ( BLOSC_ROOT )
+  LIST ( APPEND _BLOSC_ROOT_SEARCH_DIR ${BLOSC_ROOT} )
+ELSE ()
+  SET ( _ENV_BLOSC_ROOT $ENV{BLOSC_ROOT} )
+  IF ( _ENV_BLOSC_ROOT )
+    LIST ( APPEND _BLOSC_ROOT_SEARCH_DIR ${_ENV_BLOSC_ROOT} )
+  ENDIF ()
+ENDIF ()
 
-FIND_PATH( BLOSC_LOCATION include/blosc.h
-  "$ENV{BLOSC_ROOT}"
+# Additionally try and use pkconfig to find ILMBase
+
+FIND_PACKAGE ( PkgConfig )
+PKG_CHECK_MODULES ( PC_Blosc QUIET blosc )
+
+# ------------------------------------------------------------------------
+#  Search for blosc include DIR
+# ------------------------------------------------------------------------
+
+SET ( _BLOSC_INCLUDE_SEARCH_DIRS "" )
+LIST ( APPEND _BLOSC_INCLUDE_SEARCH_DIRS
+  ${BLOSC_INCLUDEDIR}
+  ${_BLOSC_ROOT_SEARCH_DIR}
+  ${PC_Blosc_INCLUDE_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
+  )
+
+# Look for a standard blosc header file.
+FIND_PATH ( Blosc_INCLUDE_DIR blosc.h
   NO_DEFAULT_PATH
-  NO_SYSTEM_ENVIRONMENT_PATH
-  PATHS ${SYSTEM_LIBRARY_PATHS}
+  PATHS ${_BLOSC_INCLUDE_SEARCH_DIRS}
+  PATH_SUFFIXES include
   )
 
-FIND_PACKAGE_HANDLE_STANDARD_ARGS ( Blosc
-  REQUIRED_VARS BLOSC_LOCATION
+IF ( EXISTS "${Blosc_INCLUDE_DIR}/blosc.h" )
+  FILE ( STRINGS "${Blosc_INCLUDE_DIR}/blosc.h"
+    _blosc_version_major_string REGEX "#define BLOSC_VERSION_MAJOR +[0-9]+ "
+    )
+  STRING ( REGEX REPLACE "#define BLOSC_VERSION_MAJOR +([0-9]+).*$" "\\1"
+    _blosc_version_major_string "${_blosc_version_major_string}"
+    )
+  STRING ( STRIP "${_blosc_version_major_string}" Blosc_VERSION_MAJOR )
+
+  FILE ( STRINGS "${Blosc_INCLUDE_DIR}/blosc.h"
+     _blosc_version_minor_string REGEX "#define BLOSC_VERSION_MINOR +[0-9]+ "
+    )
+  STRING ( REGEX REPLACE "#define BLOSC_VERSION_MINOR +([0-9]+).*$" "\\1"
+    _blosc_version_minor_string "${_blosc_version_minor_string}"
+    )
+  STRING ( STRIP "${_blosc_version_minor_string}" Blosc_VERSION_MINOR )
+
+  UNSET ( _blosc_version_major_string )
+  UNSET ( _blosc_version_minor_string )
+
+  SET ( Blosc_VERSION ${Blosc_VERSION_MAJOR}.${Blosc_VERSION_MINOR} )
+ENDIF ()
+
+# ------------------------------------------------------------------------
+#  Search for blosc lib DIR
+# ------------------------------------------------------------------------
+
+SET ( _BLOSC_LIBRARYDIR_SEARCH_DIRS "" )
+LIST ( APPEND _BLOSC_LIBRARYDIR_SEARCH_DIRS
+  ${BLOSC_LIBRARYDIR}
+  ${_BLOSC_ROOT_SEARCH_DIR}
+  ${PC_Blosc_LIBRARY_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
   )
 
-IF ( BLOSC_FOUND )
+# Static library setup
+IF ( BLOSC_USE_STATIC_LIBS )
+  SET ( _BLOSC_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES} )
+  IF ( UNIX )
+    SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".a" )
+  ENDIF ()
+ENDIF ()
 
-  SET ( BLOSC_LIBRARYDIR ${BLOSC_LOCATION}/lib
-    CACHE STRING "Blosc library directories")
+SET ( BLOSC_PATH_SUFFIXES
+  lib64
+  lib
+)
 
-  SET ( _blosc_library_name "blosc" )
+FIND_LIBRARY ( Blosc_LIBRARY blosc
+  NO_DEFAULT_PATH
+  PATHS ${_BLOSC_LIBRARYDIR_SEARCH_DIRS}
+  PATH_SUFFIXES ${BLOSC_PATH_SUFFIXES}
+)
 
-  # Static library setup
-  IF (Blosc_USE_STATIC_LIBS)
-    SET(CMAKE_FIND_LIBRARY_SUFFIXES_BACKUP ${CMAKE_FIND_LIBRARY_SUFFIXES})
-	IF (WIN32)
-	  SET ( _blosc_library_name "libblosc" )
-	ELSE ()
-	  SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
-	ENDIF ()
-  ENDIF()
+IF ( BLOSC_USE_STATIC_LIBS )
+  SET ( CMAKE_FIND_LIBRARY_SUFFIXES ${_BLOSC_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES} )
+ENDIF ()
 
-  FIND_LIBRARY ( BLOSC_blosc_LIBRARY ${_blosc_library_name}
-    PATHS ${BLOSC_LIBRARYDIR}
-    NO_DEFAULT_PATH
-    NO_SYSTEM_ENVIRONMENT_PATH
-    )
+# ------------------------------------------------------------------------
+#  Cache and set Blosc_FOUND
+# ------------------------------------------------------------------------
 
-  # Static library tear down
-  IF (Blosc_USE_STATIC_LIBS)
-    SET( CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES_BACKUP} )
-  ENDIF()
+INCLUDE ( FindPackageHandleStandardArgs )
+FIND_PACKAGE_HANDLE_STANDARD_ARGS ( Blosc
+  FOUND_VAR Blosc_FOUND
+  REQUIRED_VARS
+    Blosc_LIBRARY
+    Blosc_INCLUDE_DIR
+  VERSION_VAR Blosc_VERSION
+)
 
-  SET( BLOSC_INCLUDE_DIR "${BLOSC_LOCATION}/include" CACHE STRING "Blosc include directory" )
+IF ( Blosc_FOUND )
+  SET ( Blosc_LIBRARIES ${Blosc_LIBRARY} )
+  SET ( Blosc_INCLUDE_DIRS ${Blosc_INCLUDE_DIR} )
+  SET ( Blosc_DEFINITIONS ${PC_Blosc_CFLAGS_OTHER} )
 
-ENDIF ( BLOSC_FOUND )
+  GET_FILENAME_COMPONENT ( Blosc_LIBRARY_DIRS ${Blosc_LIBRARY} DIRECTORY )
+
+  IF ( NOT TARGET Blosc::blosc )
+    ADD_LIBRARY ( Blosc::blosc UNKNOWN IMPORTED )
+    SET_TARGET_PROPERTIES ( Blosc::blosc PROPERTIES
+      IMPORTED_LOCATION "${Blosc_LIBRARIES}"
+      INTERFACE_COMPILE_DEFINITIONS "${Blosc_DEFINITIONS}"
+      INTERFACE_INCLUDE_DIRECTORIES "${Blosc_INCLUDE_DIRS}"
+    )
+  ENDIF ()
+ELSEIF ( Blosc_FIND_REQUIRED )
+  MESSAGE ( FATAL_ERROR "Unable to find Blosc")
+ENDIF ()
diff --git a/cmake/FindCPPUnit.cmake b/cmake/FindCPPUnit.cmake
index f43244f59..862391a0c 100644
--- a/cmake/FindCPPUnit.cmake
+++ b/cmake/FindCPPUnit.cmake
@@ -1,4 +1,4 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
 #
 # All rights reserved. This software is distributed under the
 # Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
@@ -24,43 +24,186 @@
 # IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
 # LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
 #
+#[=======================================================================[.rst:
 
-#-*-cmake-*-
-# - Find CPPUNIT
-#
-# Author : Nicholas Yue yue.nicholas@gmail.com
-#
-# This auxiliary CMake file helps in find the CPPUNIT headers and libraries
-#
-# CPPUNIT_FOUND                  set if CPPUNIT is found.
-# CPPUNIT_INCLUDE_DIR            CPPUNIT's include directory
-# CPPUNIT_cppunit_LIBRARY        CPPUNIT libraries
+FindCPPUnit
+---------
+
+Find CPPUnit include dirs and libraries
+
+Use this module by invoking find_package with the form::
+
+  find_package(CPPUnit
+    [version] [EXACT]      # Minimum or EXACT version
+    [REQUIRED]             # Fail with error if CPPUnit is not found
+    )
+
+
+IMPORTED Targets
+^^^^^^^^^^^^^^^^
+
+``CPPUnit::CPPUnit``
+  This module defines IMPORTED target CPPUnit::CPPUnit, if CPPUnit has been
+  found.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This will define the following variables:
+
+``CPPUnit_FOUND``
+  True if the system has the CPPUnit library.
+``CPPUnit_VERSION``
+  The version of the CPPUnit library which was found.
+``CPPUnit_INCLUDE_DIRS``
+  Include directories needed to use CPPUnit.
+``CPPUnit_LIBRARIES``
+  Libraries needed to link to CPPUnit.
+``CPPUnit_LIBRARY_DIRS``
+  CPPUnit library directories.
+
+Cache Variables
+^^^^^^^^^^^^^^^
+
+The following cache variables may also be set:
+
+``CPPUnit_INCLUDE_DIR``
+  The directory containing ``cppunit/config-auto.h``.
+``CPPUnit_LIBRARY``
+  The path to the CPPUnit library.
+
+Hints
+^^^^^^^^^^^^^^^
+
+Instead of explicitly setting the cache variables, the following variables
+may be provided to tell this module where to look.
+
+``CPPUNIT_ROOT``
+  Preferred installation prefix.
+``CPPUNIT_INCLUDEDIR``
+  Preferred include directory e.g. <prefix>/include
+``CPPUNIT_LIBRARYDIR``
+  Preferred library directory e.g. <prefix>/lib
+``SYSTEM_LIBRARY_PATHS``
+  Paths appended to all include and lib searches.
+
+#]=======================================================================]
+
+MARK_AS_ADVANCED (
+  CPPUnit_INCLUDE_DIR
+  CPPUnit_LIBRARY
+)
+
+# Append CPPUNIT_ROOT or $ENV{CPPUNIT_ROOT} if set (prioritize the direct cmake var)
+SET ( _CPPUNIT_ROOT_SEARCH_DIR "" )
 
-FIND_PACKAGE ( PackageHandleStandardArgs )
+IF ( CPPUNIT_ROOT )
+  LIST ( APPEND _CPPUNIT_ROOT_SEARCH_DIR ${CPPUNIT_ROOT} )
+ELSE ()
+  SET ( _ENV_CPPUNIT_ROOT $ENV{CPPUNIT_ROOT} )
+  IF ( _ENV_CPPUNIT_ROOT )
+    LIST ( APPEND _CPPUNIT_ROOT_SEARCH_DIR ${_ENV_CPPUNIT_ROOT} )
+  ENDIF ()
+ENDIF ()
+
+# Additionally try and use pkconfig to find ILMBase
+
+FIND_PACKAGE ( PkgConfig )
+PKG_CHECK_MODULES ( PC_CPPUnit QUIET cppunit )
+
+# ------------------------------------------------------------------------
+#  Search for CPPUnit include DIR
+# ------------------------------------------------------------------------
+
+SET ( _CPPUNIT_INCLUDE_SEARCH_DIRS "" )
+LIST ( APPEND _CPPUNIT_INCLUDE_SEARCH_DIRS
+  ${CPPUNIT_INCLUDEDIR}
+  ${_CPPUNIT_ROOT_SEARCH_DIR}
+  ${PC_CPPUnit_INCLUDE_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
+  )
 
-FIND_PATH( CPPUNIT_LOCATION include/cppunit/Test.h
-  "$ENV{CPPUNIT_ROOT}"
+# Look for a standard cppunit header file.
+FIND_PATH ( CPPUnit_INCLUDE_DIR cppunit/config-auto.h
   NO_DEFAULT_PATH
-  NO_CMAKE_ENVIRONMENT_PATH
-  NO_CMAKE_PATH
-  NO_SYSTEM_ENVIRONMENT_PATH
-  NO_CMAKE_SYSTEM_PATH
-  PATHS ${SYSTEM_LIBRARY_PATHS}
+  PATHS ${_CPPUNIT_INCLUDE_SEARCH_DIRS}
+  PATH_SUFFIXES include
   )
 
-FIND_PACKAGE_HANDLE_STANDARD_ARGS ( CPPUnit
-  REQUIRED_VARS CPPUNIT_LOCATION
+IF ( EXISTS "${CPPUnit_INCLUDE_DIR}/cppunit/config-auto.h" )
+  FILE ( STRINGS "${CPPUnit_INCLUDE_DIR}/cppunit/config-auto.h"
+    _cppunit_version_string REGEX "#define CPPUNIT_VERSION "
+    )
+  STRING ( REGEX REPLACE "#define CPPUNIT_VERSION +\"(.+)\".*$" "\\1"
+    _cppunit_version_string "${_cppunit_version_string}"
+    )
+  STRING ( STRIP "${_cppunit_version_string}" CPPUnit_VERSION )
+  UNSET ( _cppunit_version_string )
+ENDIF ()
+
+# ------------------------------------------------------------------------
+#  Search for CPPUnit lib DIR
+# ------------------------------------------------------------------------
+
+SET ( _CPPUNIT_LIBRARYDIR_SEARCH_DIRS "" )
+LIST ( APPEND _CPPUNIT_LIBRARYDIR_SEARCH_DIRS
+  ${CPPUNIT_LIBRARYDIR}
+  ${_CPPUNIT_ROOT_SEARCH_DIR}
+  ${PC_CPPUnit_LIBRARY_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
   )
 
-IF ( CPPUNIT_FOUND )
+SET ( _CPPUNIT_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES} )
 
-  SET( CPPUNIT_INCLUDE_DIR "${CPPUNIT_LOCATION}/include" CACHE STRING "CPPUNIT include directory")
-  IF (CPPUnit_USE_STATIC_LIBS)
-	SET( CPPUNIT_LIBRARY_NAME libcppunit.a)
-  ELSE ()
-	SET( CPPUNIT_LIBRARY_NAME cppunit)
+IF ( CPPUNIT_USE_STATIC_LIBS )
+  IF ( UNIX )
+    SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".a" )
   ENDIF ()
-  FIND_LIBRARY ( CPPUnit_cppunit_LIBRARY ${CPPUNIT_LIBRARY_NAME}
-	PATHS ${CPPUNIT_LOCATION}/lib )
+ENDIF ()
+
+# Build suffix directories
+
+SET ( CPPUNIT_PATH_SUFFIXES
+  lib64
+  lib
+)
 
-ENDIF ( CPPUNIT_FOUND )
+FIND_LIBRARY ( CPPUnit_LIBRARY cppunit
+  NO_DEFAULT_PATH
+  PATHS ${_CPPUNIT_LIBRARYDIR_SEARCH_DIRS}
+  PATH_SUFFIXES ${CPPUNIT_PATH_SUFFIXES}
+  )
+
+SET ( CMAKE_FIND_LIBRARY_SUFFIXES ${_CPPUNIT_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES})
+
+# ------------------------------------------------------------------------
+#  Cache and set CPPUnit_FOUND
+# ------------------------------------------------------------------------
+
+INCLUDE ( FindPackageHandleStandardArgs )
+FIND_PACKAGE_HANDLE_STANDARD_ARGS ( CPPUnit
+  FOUND_VAR CPPUnit_FOUND
+  REQUIRED_VARS
+    CPPUnit_LIBRARY
+    CPPUnit_INCLUDE_DIR
+  VERSION_VAR CPPUnit_VERSION
+)
+
+IF ( CPPUnit_FOUND )
+  SET ( CPPUnit_LIBRARIES ${CPPUnit_LIBRARY} )
+  SET ( CPPUnit_INCLUDE_DIRS ${CPPUnit_INCLUDE_DIR} )
+  SET ( CPPUnit_DEFINITIONS ${PC_CPPUnit_CFLAGS_OTHER} )
+
+  GET_FILENAME_COMPONENT ( CPPUnit_LIBRARY_DIRS ${CPPUnit_LIBRARY} DIRECTORY )
+
+  IF ( NOT TARGET CPPUnit::CPPUnit )
+    ADD_LIBRARY ( CPPUnit::CPPUnit UNKNOWN IMPORTED )
+    SET_TARGET_PROPERTIES ( CPPUnit::CPPUnit PROPERTIES
+      IMPORTED_LOCATION "${CPPUnit_LIBRARIES}"
+      INTERFACE_COMPILE_DEFINITIONS "${CPPUnit_DEFINITIONS}"
+      INTERFACE_INCLUDE_DIRECTORIES "${CPPUnit_INCLUDE_DIRS}"
+    )
+  ENDIF ()
+ELSEIF ( CPPUnit_FIND_REQUIRED )
+  MESSAGE ( FATAL_ERROR "Unable to find CPPUnit")
+ENDIF ()
diff --git a/cmake/FindGLEW.cmake b/cmake/FindGLEW.cmake
index b8b7a6522..78de55771 100644
--- a/cmake/FindGLEW.cmake
+++ b/cmake/FindGLEW.cmake
@@ -1,4 +1,4 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
 #
 # All rights reserved. This software is distributed under the
 # Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
@@ -40,10 +40,8 @@
 FIND_PACKAGE ( PackageHandleStandardArgs )
 
 FIND_PATH( GLEW_LOCATION include/GL/glew.h
-  "$ENV{GLEW_ROOT}"
   NO_DEFAULT_PATH
-  NO_SYSTEM_ENVIRONMENT_PATH
-  PATHS ${SYSTEM_LIBRARY_PATHS}
+  PATHS $ENV{GLEW_ROOT} ${SYSTEM_LIBRARY_PATHS}
   )
 
 FIND_PACKAGE_HANDLE_STANDARD_ARGS ( GLEW
@@ -56,42 +54,38 @@ IF ( GLEW_LOCATION )
 
   SET ( ORIGINAL_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
   IF (GLEW_USE_STATIC_LIBS)
-	IF (APPLE)
+    IF (APPLE)
       SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
       FIND_LIBRARY ( GLEW_LIBRARY_PATH GLEW PATHS ${GLEW_LOCATION}/lib
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
+        NO_DEFAULT_PATH
+        )
       FIND_LIBRARY ( GLEWmx_LIBRARY_PATH GLEWmx PATHS ${GLEW_LOCATION}/lib
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
-	  # MESSAGE ( "APPLE STATIC" )
-	  # MESSAGE ( "GLEW_LIBRARY_PATH = " ${GLEW_LIBRARY_PATH} )
-	ELSEIF (WIN32)
+        NO_DEFAULT_PATH
+        )
+      # MESSAGE ( "APPLE STATIC" )
+      # MESSAGE ( "GLEW_LIBRARY_PATH = " ${GLEW_LIBRARY_PATH} )
+    ELSEIF (WIN32)
       # Link library
       SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
       FIND_LIBRARY ( GLEW_LIBRARY_PATH GLEW32S PATHS ${GLEW_LOCATION}/lib )
       FIND_LIBRARY ( GLEWmx_LIBRARY_PATH GLEW32MXS PATHS ${GLEW_LOCATION}/lib )
-	ELSE (APPLE)
+    ELSE (APPLE)
       SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
       FIND_LIBRARY ( GLEW_LIBRARY_PATH GLEW PATHS ${GLEW_LOCATION}/lib
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
+        NO_DEFAULT_PATH
+        )
       FIND_LIBRARY ( GLEWmx_LIBRARY_PATH GLEWmx PATHS ${GLEW_LOCATION}/lib
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
-	  # MESSAGE ( "LINUX STATIC" )
-	  # MESSAGE ( "GLEW_LIBRARY_PATH = " ${GLEW_LIBRARY_PATH} )
-	ENDIF (APPLE)
+        NO_DEFAULT_PATH
+        )
+      # MESSAGE ( "LINUX STATIC" )
+      # MESSAGE ( "GLEW_LIBRARY_PATH = " ${GLEW_LIBRARY_PATH} )
+    ENDIF (APPLE)
   ELSE ()
-	IF (APPLE)
+    IF (APPLE)
       SET(CMAKE_FIND_LIBRARY_SUFFIXES ".dylib")
       FIND_LIBRARY ( GLEW_LIBRARY_PATH GLEW PATHS ${GLEW_LOCATION}/lib )
       FIND_LIBRARY ( GLEWmx_LIBRARY_PATH GLEWmx PATHS ${GLEW_LOCATION}/lib )
-	ELSEIF (WIN32)
+    ELSEIF (WIN32)
       # Link library
       SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
       FIND_LIBRARY ( GLEW_LIBRARY_PATH GLEW32 PATHS ${GLEW_LOCATION}/lib )
@@ -99,24 +93,20 @@ IF ( GLEW_LOCATION )
       # Load library
       SET(CMAKE_FIND_LIBRARY_SUFFIXES ".dll")
       FIND_LIBRARY ( GLEW_DLL_PATH GLEW32 PATHS ${GLEW_LOCATION}/bin
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
+        NO_DEFAULT_PATH
+        )
       FIND_LIBRARY ( GLEWmx_DLL_PATH GLEW32mx PATHS ${GLEW_LOCATION}/bin
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
-	ELSE (APPLE)
-	  # Unices
+        NO_DEFAULT_PATH
+        )
+    ELSE (APPLE)
+      # Unices
       FIND_LIBRARY ( GLEW_LIBRARY_PATH GLEW PATHS ${GLEW_LOCATION}/lib
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
+        NO_DEFAULT_PATH
+        )
       FIND_LIBRARY ( GLEWmx_LIBRARY_PATH GLEWmx PATHS ${GLEW_LOCATION}/lib
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
-	ENDIF (APPLE)
+        NO_DEFAULT_PATH
+        )
+    ENDIF (APPLE)
   ENDIF ()
   # MUST reset
   SET(CMAKE_FIND_LIBRARY_SUFFIXES ${ORIGINAL_CMAKE_FIND_LIBRARY_SUFFIXES})
diff --git a/cmake/FindGLFW.cmake b/cmake/FindGLFW.cmake
deleted file mode 100644
index 020428bec..000000000
--- a/cmake/FindGLFW.cmake
+++ /dev/null
@@ -1,96 +0,0 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
-#
-# All rights reserved. This software is distributed under the
-# Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
-#
-# Redistributions of source code must retain the above copyright
-# and license notice and the following restrictions and disclaimer.
-#
-# *     Neither the name of DreamWorks Animation nor the names of
-# its contributors may be used to endorse or promote products derived
-# from this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-# IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
-# LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
-#
-
-#-*-cmake-*-
-# - Find GLFW
-#
-# Author : Nicholas Yue yue.nicholas@gmail.com
-#
-# This auxiliary CMake file helps in find the GLFW headers and libraries
-#
-# GLFW_FOUND            set if GLFW is found.
-# GLFW_INCLUDE_DIR      GLFW's include directory
-# GLFW_glfw_LIBRARY     GLFW libraries
-
-SET ( GLFW_FOUND FALSE )
-
-FIND_PATH( GLFW_LOCATION include/GL/glfw.h
-  "$ENV{GLFW_ROOT}"
-  NO_SYSTEM_ENVIRONMENT_PATH
-  PATHS ${SYSTEM_LIBRARY_PATHS}
-  )
-
-SET( GLFW_INCLUDE_DIR "${GLFW_LOCATION}/include" CACHE STRING "GLFW include path")
-
-SET ( ORIGINAL_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
-IF (GLFW_USE_STATIC_LIBS)
-  IF (APPLE)
-    SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
-    FIND_LIBRARY ( GLFW_LIBRARY_PATH GLFW PATHS ${GLFW_LOCATION}/lib
-      NO_DEFAULT_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-	  )
-	MESSAGE ( "APPLE STATIC" )
-	MESSAGE ( "GLFW_LIBRARY_PATH = " ${GLFW_LIBRARY_PATH} )
-  ELSEIF (WIN32)
-    # Link library
-    SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
-    FIND_LIBRARY ( GLFW_LIBRARY_PATH GLFW32S PATHS ${GLFW_LOCATION}/lib )
-  ELSE (APPLE)
-    SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
-    FIND_LIBRARY ( GLFW_LIBRARY_PATH glfw PATHS ${GLFW_LOCATION}/lib ${GLFW_LOCATION}/lib64
-      NO_DEFAULT_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-	  )
-	MESSAGE ( "LINUX STATIC" )
-	MESSAGE ( "GLFW_LIBRARY_PATH = " ${GLFW_LIBRARY_PATH} )
-  ENDIF (APPLE)
-ELSE ()
-  IF (APPLE)
-    SET(CMAKE_FIND_LIBRARY_SUFFIXES ".dylib")
-    FIND_LIBRARY ( GLFW_LIBRARY_PATH GLFW PATHS ${GLFW_LOCATION}/lib )
-  ELSEIF (WIN32)
-    # Link library
-    SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
-    FIND_LIBRARY ( GLFW_LIBRARY_PATH GLFW32 PATHS ${GLFW_LOCATION}/lib )
-    # Load library
-    SET(CMAKE_FIND_LIBRARY_SUFFIXES ".dll")
-    FIND_LIBRARY ( GLFW_DLL_PATH GLFW32 PATHS ${GLFW_LOCATION}/bin
-      NO_DEFAULT_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-      )
-  ELSE (APPLE)
-	# Unices
-    FIND_LIBRARY ( GLFW_LIBRARY_PATH glfw PATHS ${GLFW_LOCATION}/lib ${GLFW_LOCATION}/lib64
-      NO_SYSTEM_ENVIRONMENT_PATH
-	  )
-  ENDIF (APPLE)
-ENDIF ()
-# MUST reset
-SET(CMAKE_FIND_LIBRARY_SUFFIXES ${ORIGINAL_CMAKE_FIND_LIBRARY_SUFFIXES})
-
-SET( GLFW_glfw_LIBRARY ${GLFW_LIBRARY_PATH} CACHE STRING "GLFW library")
diff --git a/cmake/FindGLFW3.cmake b/cmake/FindGLFW3.cmake
deleted file mode 100644
index 1fbd867e7..000000000
--- a/cmake/FindGLFW3.cmake
+++ /dev/null
@@ -1,104 +0,0 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
-#
-# All rights reserved. This software is distributed under the
-# Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
-#
-# Redistributions of source code must retain the above copyright
-# and license notice and the following restrictions and disclaimer.
-#
-# *     Neither the name of DreamWorks Animation nor the names of
-# its contributors may be used to endorse or promote products derived
-# from this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-# IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
-# LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
-#
-
-#-*-cmake-*-
-# - Find GLFW3
-#
-# Author : Nicholas Yue yue.nicholas@gmail.com
-#
-# This auxiliary CMake file helps in find the glfw3 headers and libraries
-#
-# GLFW3_FOUND            set if glfw3 is found.
-# GLFW3_INCLUDE_DIR      glfw3's include directory
-# GLFW3_LIBRARY_DIR      glfw3's library directory
-# GLFW3_LIBRARIES        all glfw3 libraries
-
-FIND_PACKAGE ( PackageHandleStandardArgs )
-
-FIND_PATH( GLFW3_LOCATION include/GLFW/glfw3.h
-  "$ENV{GLFW3_ROOT}"
-  NO_DEFAULT_PATH
-  NO_SYSTEM_ENVIRONMENT_PATH
-  PATHS ${SYSTEM_LIBRARY_PATHS}
-)
-
-FIND_PACKAGE_HANDLE_STANDARD_ARGS ( GLFW3
-  REQUIRED_VARS GLFW3_LOCATION
-  )
-
-IF (GLFW3_FOUND)
-  SET( GLFW3_INCLUDE_DIR "${GLFW3_LOCATION}/include" CACHE STRING "GLFW3 include path")
-  SET (GLFW3_PATH_SUFFIXES x86_64-linux-gnu)
-  IF (GLFW3_USE_STATIC_LIBS)
-    FIND_LIBRARY ( GLFW3_glfw_LIBRARY  glfw3
-      PATHS ${GLFW3_LOCATION}/lib
-      PATH_SUFFIXES ${GLFW3_PATH_SUFFIXES}
-	  NO_DEFAULT_PATH
-	  NO_CMAKE_ENVIRONMENT_PATH
-	  NO_CMAKE_PATH
-	  NO_SYSTEM_ENVIRONMENT_PATH
-	  NO_CMAKE_SYSTEM_PATH
-	  )
-  ELSE (GLFW3_USE_STATIC_LIBS)
-    FIND_LIBRARY ( GLFW3_glfw_LIBRARY  glfw
-      PATHS ${GLFW3_LOCATION}/lib
-      PATH_SUFFIXES ${GLFW3_PATH_SUFFIXES}
-	  NO_DEFAULT_PATH
-	  NO_CMAKE_ENVIRONMENT_PATH
-	  NO_CMAKE_PATH
-	  NO_SYSTEM_ENVIRONMENT_PATH
-	  NO_CMAKE_SYSTEM_PATH
-	  )
-  ENDIF (GLFW3_USE_STATIC_LIBS)
-
-  IF (APPLE)
-	FIND_LIBRARY ( COCOA_LIBRARY Cocoa )
-	FIND_LIBRARY ( IOKIT_LIBRARY IOKit )
-	FIND_LIBRARY ( COREVIDEO_LIBRARY CoreVideo )
-  ELSEIF (UNIX AND NOT APPLE)
-	SET ( GLFW3_REQUIRED_X11_LIBRARIES
-      Xi
-      Xrandr
-      Xinerama
-      Xcursor
-      )
-  ENDIF ()
-
-  SET ( GLFW3_LIBRARIES
-	${OPENGL_gl_LIBRARY}
-	${OPENGL_glu_LIBRARY}
-	${GLFW3_glfw_LIBRARY}
-	# UNIX
-	${GLFW3_REQUIRED_X11_LIBRARIES}
-	# APPLE
-	${COCOA_LIBRARY}
-	${IOKIT_LIBRARY}
-	${COREVIDEO_LIBRARY}
-	CACHE STRING "GLFW3 required libraries"
-	)
-
-ENDIF ()
diff --git a/cmake/FindHDK.cmake b/cmake/FindHDK.cmake
deleted file mode 100644
index 64a82c4e9..000000000
--- a/cmake/FindHDK.cmake
+++ /dev/null
@@ -1,470 +0,0 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
-#
-# All rights reserved. This software is distributed under the
-# Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
-#
-# Redistributions of source code must retain the above copyright
-# and license notice and the following restrictions and disclaimer.
-#
-# *     Neither the name of DreamWorks Animation nor the names of
-# its contributors may be used to endorse or promote products derived
-# from this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-# IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
-# LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
-#
-
-#-*-cmake-*-
-# - Find HDK
-#
-# Author : Nicholas Yue yue.nicholas@gmail.com
-#
-# This auxiliary CMake file helps in find the HDK headers and libraries
-#
-# HDK_FOUND            set if HDK is found.
-# HDK_INCLUDE_DIR      HDK's include directory
-# HDK_LIBRARY_DIR      HDK's library directory (Useful for cmake packaging to ship runtime libraries)
-# Hdk_SDK_LIBRARIES    HDK libraries (as a collection for easier reference)
-
-FIND_PACKAGE ( PackageHandleStandardArgs )
-
-GET_FILENAME_COMPONENT ( HDK_PACKAGE_DIR ${CMAKE_CURRENT_LIST_FILE} PATH)
-# MESSAGE ( "CMAKE_CURRENT_LIST_FILE ${CMAKE_CURRENT_LIST_FILE}" )
-# MESSAGE ( "HDK_PACKAGE_DIR ${HDK_PACKAGE_DIR}" )
-
-SET ( HDK_VERSION_IN_SYS_SYS_VERSION_H ON )
-OPTION ( HDK_AUTO_GENERATE_SESITAG "Automatically generate <Target>_sesitag.C and add to SOP being built" OFF )
-
-# Houdini 15 and above defines version in SYS/SYS_Version.h
-SET ( HDK_VERSION_FILE_PATH "toolkit/include/SYS/SYS_Version.h" )
-
-if(NOT ENV{HFS})
-  message (STATUS "$HFS not set, using provided HDK_LOCATION: " ${HDK_LOCATION} )
-  SET(ENV{HFS} ${HDK_LOCATION})
-endif()
-
-FIND_PATH( HDK_LOCATION ${HDK_VERSION_FILE_PATH}
-  "$ENV{HFS}"
-  NO_DEFAULT_PATH
-  NO_SYSTEM_ENVIRONMENT_PATH
-  PATHS ${SYSTEM_LIBRARY_PATHS}
-  )
-
-# MESSAGE ( "NICHOLAS 0000" )
-
-# Fall back for Houdini version less than 15.0
-IF (NOT HDK_LOCATION)
-  # MESSAGE ( "NICHOLAS 0100" )
-  SET ( HDK_VERSION_FILE_PATH "toolkit/include/UT/UT_Version.h" )
-  # MESSAGE ( "NICHOLAS 0200 HDK_VERSION_FILE_PATH = ${HDK_VERSION_FILE_PATH}" )
-  FIND_PATH( HDK_LOCATION ${HDK_VERSION_FILE_PATH}
-	"$ENV{HFS}"
-	NO_DEFAULT_PATH
-	NO_SYSTEM_ENVIRONMENT_PATH
-	)
-  # MESSAGE ( "NICHOLAS 0300 HDK_LOCATION = ${HDK_LOCATION}" )
-  SET ( HDK_VERSION_IN_SYS_SYS_VERSION_H OFF )
-ENDIF ()
-
-SET ( HDK_VERSION_FILE ${HDK_LOCATION}/${HDK_VERSION_FILE_PATH} )
-# MESSAGE ( "HDK_VERSION_FILE = ${HDK_VERSION_FILE}")
-
-# Find out the current version
-IF ( HDK_VERSION_IN_SYS_SYS_VERSION_H )
-  #
-  FILE ( STRINGS "${HDK_VERSION_FILE}" hdk_major_version_str REGEX "^#define[\t ]+SYS_VERSION_MAJOR_INT[\t ]+.*")
-  FILE ( STRINGS "${HDK_VERSION_FILE}" hdk_minor_version_str REGEX "^#define[\t ]+SYS_VERSION_MINOR_INT[\t ]+.*")
-  FILE ( STRINGS "${HDK_VERSION_FILE}" hdk_build_version_str REGEX "^#define[\t ]+SYS_VERSION_BUILD_INT[\t ]+.*")
-  FILE ( STRINGS "${HDK_VERSION_FILE}" hdk_patch_version_str REGEX "^#define[\t ]+SYS_VERSION_PATCH_INT[\t ]+.*")
-  #
-  STRING (REGEX REPLACE "^.*SYS_VERSION_MAJOR_INT[\t ]+([0-9]*).*$" "\\1"
-	HDK_MAJOR_VERSION_STRING "${hdk_major_version_str}")
-  STRING (REGEX REPLACE "^.*SYS_VERSION_MINOR_INT[\t ]+([0-9]*).*$" "\\1"
-	HDK_MINOR_VERSION_STRING "${hdk_minor_version_str}")
-  STRING (REGEX REPLACE "^.*SYS_VERSION_BUILD_INT[\t ]+([0-9]*).*$" "\\1"
-	HDK_BUILD_VERSION_STRING "${hdk_build_version_str}")
-  STRING (REGEX REPLACE "^.*SYS_VERSION_PATCH_INT[\t ]+([0-9]*).*$" "\\1"
-	HDK_PATCH_VERSION_STRING "${hdk_patch_version_str}")
-  #
-  UNSET (hdk_major_version_str)
-  UNSET (hdk_minor_version_str)
-  UNSET (hdk_build_version_str)
-  UNSET (hdk_patch_version_str)
-ELSE ()
-  #
-  FILE ( STRINGS "${HDK_VERSION_FILE}" hdk_major_version_str REGEX "^#define[\t ]+UT_MAJOR_VERSION_INT[\t ]+.*")
-  FILE ( STRINGS "${HDK_VERSION_FILE}" hdk_minor_version_str REGEX "^#define[\t ]+UT_MINOR_VERSION_INT[\t ]+.*")
-  FILE ( STRINGS "${HDK_VERSION_FILE}" hdk_build_version_str REGEX "^#define[\t ]+UT_BUILD_VERSION_INT[\t ]+.*")
-  FILE ( STRINGS "${HDK_VERSION_FILE}" hdk_patch_version_str REGEX "^#define[\t ]+UT_PATCH_VERSION_INT[\t ]+.*")
-  #
-  STRING (REGEX REPLACE "^.*UT_MAJOR_VERSION_INT[\t ]+([0-9]*).*$" "\\1"
-	HDK_MAJOR_VERSION_STRING "${hdk_major_version_str}")
-  STRING (REGEX REPLACE "^.*UT_MINOR_VERSION_INT[\t ]+([0-9]*).*$" "\\1"
-	HDK_MINOR_VERSION_STRING "${hdk_minor_version_str}")
-  STRING (REGEX REPLACE "^.*UT_BUILD_VERSION_INT[\t ]+([0-9]*).*$" "\\1"
-	HDK_BUILD_VERSION_STRING "${hdk_build_version_str}")
-  STRING (REGEX REPLACE "^.*UT_PATCH_VERSION_INT[\t ]+([0-9]*).*$" "\\1"
-	HDK_PATCH_VERSION_STRING "${hdk_patch_version_str}")
-  #
-  UNSET (hdk_major_version_str)
-  UNSET (hdk_minor_version_str)
-  UNSET (hdk_build_version_str)
-  UNSET (hdk_patch_version_str)
-ENDIF ()
-
-SET ( HDK_VERSION_MAJOR ${HDK_MAJOR_VERSION_STRING} CACHE STRING "HDK major version")
-SET ( HDK_VERSION_MINOR ${HDK_MINOR_VERSION_STRING} CACHE STRING "HDK minor version")
-SET ( HDK_VERSION_BUILD ${HDK_BUILD_VERSION_STRING} CACHE STRING "HDK build version")
-SET ( HDK_VERSION "${HDK_MAJOR_VERSION_STRING}.${HDK_MINOR_VERSION_STRING}.${HDK_BUILD_VERSION_STRING}.${HDK_PATCH_VERSION_STRING}" CACHE STRING "HDK version")
-
-# MESSAGE ( "HDK_VERSION = ${HDK_VERSION}")
-
-FIND_PACKAGE_HANDLE_STANDARD_ARGS ( HDK
-  REQUIRED_VARS HDK_LOCATION
-  VERSION_VAR   HDK_VERSION
-  )
-
-IF (HDK_FOUND)
-
-  IF (APPLE)
-  ELSE ()
-	SET ( HDK_HOME_HFS
-	  $ENV{HOME}/houdini${HDK_MAJOR_VERSION_STRING}.${HDK_MINOR_VERSION_STRING}
-	  )
-  ENDIF()
-  # MESSAGE ( "HDK_VERSION_STRING = ${HDK_VERSION_STRING}")
-  SET ( HCUSTOM_COMMAND $ENV{HFS}/bin/hcustom )
-  SET ( HOTL_COMMAND $ENV{HFS}/bin/hotl )
-
-  SET ( HDK_INCLUDE_DIR "${HDK_LOCATION}/toolkit/include;${HDK_LOCATION}/toolkit/include/htools" CACHE STRING "HDK include directory" )
-
-  IF ( HDK_VERSION VERSION_GREATER 14 )
-	EXECUTE_PROCESS ( COMMAND ${HCUSTOM_COMMAND} -g -c OUTPUT_VARIABLE DEBUG_TEMP_DEFINITIONS )
-	EXECUTE_PROCESS ( COMMAND ${HCUSTOM_COMMAND} -c OUTPUT_VARIABLE TEMP_DEFINITIONS )
-	EXECUTE_PROCESS ( COMMAND ${HCUSTOM_COMMAND} -m OUTPUT_VARIABLE TEMP_LINK_FLAGS )
-	STRING ( STRIP ${TEMP_LINK_FLAGS}  HDK_LINK_FLAGS )
-  ELSE ()
-	EXECUTE_PROCESS ( COMMAND ${HCUSTOM_COMMAND} -g OUTPUT_VARIABLE DEBUG_TEMP_DEFINITIONS )
-  ENDIF ()
-
-  IF (HDK_DEBUG_REGEX)
-	# Keep this around, it is useful
-	# MESSAGE ( "HDK_DEBUG_REGEX : START")
-	# MESSAGE("TEMP_DEFINITIONS = ${TEMP_DEFINITIONS}")
-
-	IF (WIN32)
-	ELSE()
-	  # Original : This handles strict x.y.z 3 component
-      # Reference STRING ( REGEX REPLACE "-DVERSION=..[0-9]+.[0-9]+.[0-9]+.. " "" HDK_DEFINITIONS "${TEMP_DEFINITIONS}")
-	  # Improves : This handles x.y.z 3 component and optionally w.x.y.z 4 components
-      STRING ( REGEX REPLACE "-DVERSION=..[0-9]+.[0-9]+.[0-9]*.[0-9]+.. " "" HDK_DEFINITIONS "${TEMP_DEFINITIONS}")
-	  # MESSAGE("HDK_DEFINITIONS = ${HDK_DEFINITIONS}")
-	ENDIF()
-	# MESSAGE ( "HDK_DEBUG_REGEX : END")
-  ENDIF ()
-
-  IF (WIN32)
-
-    # Release flags
-    # STRING ( REGEX REPLACE "-DVERSION=\"[0-9]+.[0-9]+.[0-9]+\" " "" HDK_DEFINITIONS_RAW "${TEMP_DEFINITIONS}")
-    STRING ( REGEX REPLACE " -I \\.| -I \".*\"|-DVERSION=\"[0-9]+.[0-9]+.[0-9]+\" " "" HDK_DEFINITIONS_RAW "${TEMP_DEFINITIONS}")
-
-    STRING ( STRIP ${HDK_DEFINITIONS_RAW} HDK_DEFINITIONS)
-    # SET ( CMAKE_C_FLAGS ${HDK_DEFINITIONS})
-    # SET ( CMAKE_CXX_FLAGS ${HDK_DEFINITIONS})
-
-    # MESSAGE ( "HDK_DEFINITIONS = ${HDK_DEFINITIONS}" )
-    # MESSAGE ( "CMAKE_C_FLAGS = ${CMAKE_C_FLAGS}")
-    # MESSAGE ( "CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}")
-
-    # Debug flags
-    STRING ( REGEX REPLACE "Making DEBUG version" "" STRIP_TEMP_DEFINITIONS "${DEBUG_TEMP_DEFINITIONS}")
-    # STRING ( REGEX REPLACE "-DVERSION=\"[0-9]+.[0-9]+.[0-9]+\" " "" DEBUG_HDK_DEFINITIONS "${STRIP_TEMP_DEFINITIONS}")
-    STRING ( REGEX REPLACE " -I \\.| -I \".*\"|-DVERSION=\"[0-9]+.[0-9]+.[0-9]+\" " "" DEBUG_HDK_DEFINITIONS "${STRIP_TEMP_DEFINITIONS}")
-    # SET ( CMAKE_C_FLAGS_DEBUG ${DEBUG_HDK_DEFINITIONS})
-    # SET ( CMAKE_CXX_FLAGS_DEBUG ${DEBUG_HDK_DEFINITIONS})
-
-    # MESSAGE ( "DEBUG_TEMP_DEFINITIONS = ${DEBUG_TEMP_DEFINITIONS}")
-    # MESSAGE ( "DEBUG_HDK_DEFINITIONS = ${DEBUG_HDK_DEFINITIONS}" )
-    # MESSAGE ( "CMAKE_C_FLAGS_DEBUG = ${CMAKE_C_FLAGS_DEBUG}")
-    # MESSAGE ( "CMAKE_CXX_FLAGS_DEBUG = ${CMAKE_CXX_FLAGS_DEBUG}")
-
-    ADD_DEFINITIONS ( ${HDK_DEFINITIONS} )
-
-  ELSE (WIN32)
-
-    # Release flags
-    # STRING ( REGEX REPLACE "-DVERSION=..[0-9]+.[0-9]+.[0-9]+.. " "" HDK_DEFINITIONS "${TEMP_DEFINITIONS}")
-    STRING ( REGEX REPLACE "-DVERSION=..[0-9]+.[0-9]+.[0-9]*.[0-9]+.. " "" HDK_DEFINITIONS "${TEMP_DEFINITIONS}")
-
-    # Debug flags
-    STRING ( REGEX REPLACE "Making debug version" "" STRIP_TEMP_DEFINITIONS "${DEBUG_TEMP_DEFINITIONS}")
-    # STRING ( REGEX REPLACE "-DVERSION=..[0-9]+.[0-9]+.[0-9]+.. " "" DEBUG_HDK_DEFINITIONS "${STRIP_TEMP_DEFINITIONS}")
-    STRING ( REGEX REPLACE "-DVERSION=..[0-9]+.[0-9]+.[0-9]*.[0-9]+.. " "" DEBUG_HDK_DEFINITIONS "${STRIP_TEMP_DEFINITIONS}")
-
-	IF ( NOT HDK_VERSION_IN_SYS_SYS_VERSION_H )
-	  # Very old HDK, need to set things manually
-	  SET ( HDK_DEFINITIONS " -DDLLEXPORT= -D_GNU_SOURCE -DLINUX -DAMD64 -m64 -fPIC -DSIZEOF_VOID_P=8 -DSESI_LITTLE_ENDIAN -DENABLE_THREADS -DUSE_PTHREADS -D_REENTRANT -D_FILE_OFFSET_BITS=64 -c -DGCC4 -DGCC3 -Wno-deprecated")
-	  SET ( DEBUG_HDK_DEFINITIONS " -DDLLEXPORT= -D_GNU_SOURCE -DLINUX -DAMD64 -m64 -fPIC -DSIZEOF_VOID_P=8 -DSESI_LITTLE_ENDIAN -DENABLE_THREADS -DUSE_PTHREADS -D_REENTRANT -D_FILE_OFFSET_BITS=64 -c -DGCC4 -DGCC3 -Wno-deprecated -g")
-	ENDIF ()
-
-    # Split each definition and add them separately (otherwise we can get into weird string manipulation issues within CMake)
-    SEPARATE_ARGUMENTS( DEBUG_HDK_DEFINITIONS )
-    SEPARATE_ARGUMENTS( HDK_DEFINITIONS )
-
-    # MESSAGE ( "DEBUG_HDK_DEFINITIONS = ${DEBUG_HDK_DEFINITIONS}" )
-    # MESSAGE ( "HDK_DEFINITIONS = ${HDK_DEFINITIONS} ")
-    IF (CMAKE_BUILD_TYPE MATCHES Debug)
-      FOREACH ( DEFINITION ${DEBUG_HDK_DEFINITIONS} )
-        ADD_DEFINITIONS( ${DEFINITION} )
-      ENDFOREACH ()
-    ELSE (CMAKE_BUILD_TYPE MATCHES Debug)
-      FOREACH ( DEFINITION ${HDK_DEFINITIONS} )
-        ADD_DEFINITIONS( ${DEFINITION} )
-      ENDFOREACH ()
-    ENDIF (CMAKE_BUILD_TYPE MATCHES Debug)
-
-  ENDIF (WIN32)
-
-  IF (WIN32)
-    FILE ( GLOB DSOLIB_A $ENV{HFS}/custom/houdini/dsolib/*.a )
-    FILE ( GLOB DSOLIB_LIB $ENV{HFS}/custom/houdini/dsolib/*.lib )
-	#ELSEIF (APPLE)
-    # FILE ( GLOB DSOLIB_DYLIB $ENV{HFS}/../Libraries/*.dylib )
-  ELSE (WIN32)
-    # Linux/OSX
-    LINK_DIRECTORIES ( $ENV{HDSO} )
-    # LINK_DIRECTORIES ( $ENV{HFS}/dsolib )
-  ENDIF (WIN32)
-
-  IF (APPLE)
-    SET ( HDK_LIBRARY_TYPE SHARED )
-  ELSE (APPLE)
-    SET ( HDK_LIBRARY_TYPE SHARED )
-  ENDIF (APPLE)
-
-  FUNCTION ( HDK_CREATE_SESITAG
-      # _input_name
-      _src_name )
-    SET ( _input_name abc )
-    SET ( PYTHON_SCRIPT ${HDK_PACKAGE_DIR}/gen_sesitag.py )
-    IF ( WIN32 )
-      # Houdini uses the python bundled with the distribution, use that
-      LIST(APPEND CMAKE_PROGRAM_PATH  "$ENV{HFS}/python27")
-    ENDIF ()
-    FIND_PROGRAM ( PYTHON_EXECUTABLE NAMES python )
-    EXECUTE_PROCESS ( COMMAND "${PYTHON_EXECUTABLE}" ${PYTHON_SCRIPT} ${_src_name} )
-
-  ENDFUNCTION ()
-
-  FUNCTION ( HDK_ADD_EXECUTABLE _exe_NAME )
-
-    IF (APPLE)
-      SET ( HDK_LIBRARY_DIRS $ENV{HFS}/../Libraries )
-      SET ( HDK_HOUDINI_LOCATION $ENV{HFS}/../Houdini )
-    ELSE ()
-      SET ( HDK_LIBRARY_DIRS $ENV{HFS}/dsolib )
-      SET ( HDK_HOUDINI_LOCATION $ENV{HFS}/../Houdini )
-    ENDIF ()
-	IF ( HDK_AUTO_GENERATE_SESITAG )
-      SET ( HDK_SESITAG_FILE ${CMAKE_BINARY_DIR}/${_exe_NAME}_sesitag.C )
-      HDK_CREATE_SESITAG ( ${HDK_SESITAG_FILE} )
-	ENDIF()
-    ADD_EXECUTABLE ( ${_exe_NAME} ${ARGN} ${HDK_SESITAG_FILE} )
-    IF (APPLE)
-      SET_TARGET_PROPERTIES ( ${_exe_NAME} PROPERTIES
-		LINK_FLAGS "${HDK_LINK_FLAGS} -L${HDK_LIBRARY_DIRS} ${HDK_HOUDINI_LOCATION}"
-		)
-    ELSEIF (WIN32)
-      # windows
-      TARGET_LINK_LIBRARIES ( ${_exe_NAME}
-		${DSOLIB_A}
-        ${DSOLIB_LIB}
-        )
-    ELSE()
-      # Linux
-      TARGET_LINK_LIBRARIES ( ${_exe_NAME}
-		pthread
-		HoudiniUI
-		HoudiniOPZ
-		HoudiniOP3
-		HoudiniOP2
-		HoudiniOP1
-		HoudiniSIM
-		HoudiniGEO
-		HoudiniPRM
-		HoudiniUT
-		boost_system
-		boost_program_options
-		tbb
-        )
-    ENDIF (APPLE)
-
-  ENDFUNCTION ()
-
-  FUNCTION ( HDK_ADD_LIBRARY _lib_NAME )
-
-    ADD_DEFINITIONS ( -DMAKING_DSO )
-
-    SET ( HDK_LIBRARY_DIRS $ENV{HFS}/../Libraries )
-    SET ( HDK_HOUDINI_LOCATION $ENV{HFS}/../Houdini )
-
-    # MESSAGE ( "HDK_LIBRARY_DIRS = ${HDK_LIBRARY_DIRS}")
-    # MESSAGE ( "HDK_HOUDINI_LOCATION = ${HDK_HOUDINI_LOCATION}")
-	IF ( HDK_AUTO_GENERATE_SESITAG )
-      SET ( HDK_SESITAG_FILE ${CMAKE_BINARY_DIR}/${_lib_NAME}_sesitag.C )
-      HDK_CREATE_SESITAG ( ${HDK_SESITAG_FILE} )
-	ENDIF ()
-    ADD_LIBRARY ( ${_lib_NAME} ${HDK_LIBRARY_TYPE} ${ARGN} ${HDK_SESITAG_FILE} )
-    IF (APPLE)
-      SET_TARGET_PROPERTIES ( ${_lib_NAME} PROPERTIES
-		LINK_FLAGS "${HDK_LINK_FLAGS} -L${HDK_LIBRARY_DIRS} ${HDK_HOUDINI_LOCATION}"
-		PREFIX ""
-		SUFFIX ".dylib"
-		)
-    ELSEIF (WIN32)
-      # windows
-      TARGET_LINK_LIBRARIES ( ${_lib_NAME}
-		${DSOLIB_A}
-        ${DSOLIB_LIB}
-        )
-    ELSE()
-      # Linux
-      SET_TARGET_PROPERTIES ( ${_lib_NAME} PROPERTIES
-		PREFIX ""
-		)
-    ENDIF (APPLE)
-
-  ENDFUNCTION ()
-
-  FUNCTION ( HDK_ADD_STANDALONE_LIBRARY _lib_NAME )
-
-    ADD_DEFINITIONS ( -DMAKING_DSO )
-
-    SET ( HDK_LIBRARY_DIRS $ENV{HFS}/../Libraries )
-    SET ( HDK_HOUDINI_LOCATION $ENV{HFS}/../Houdini )
-
-    # MESSAGE ( "HDK_LIBRARY_DIRS = ${HDK_LIBRARY_DIRS}")
-    # MESSAGE ( "HDK_HOUDINI_LOCATION = ${HDK_HOUDINI_LOCATION}")
-
-    SET ( HDK_SESITAG_FILE ${CMAKE_BINARY_DIR}/${_lib_NAME}_sesitag.C )
-    HDK_CREATE_SESITAG ( ${HDK_SESITAG_FILE} )
-
-    ADD_LIBRARY ( ${_lib_NAME} ${HDK_LIBRARY_TYPE} ${ARGN} ${HDK_SESITAG_FILE} )
-    IF (APPLE)
-      SET_TARGET_PROPERTIES ( ${_lib_NAME} PROPERTIES
-		LINK_FLAGS "${HDK_LINK_FLAGS} -L${HDK_LIBRARY_DIRS} ${HDK_HOUDINI_LOCATION}"
-		PREFIX ""
-		SUFFIX ".dylib"
-		)
-      TARGET_LINK_LIBRARIES ( ${_lib_NAME}
-		HoudiniUI
-		HoudiniOPZ
-		HoudiniOP3
-		HoudiniOP2
-		HoudiniOP1
-		HoudiniSIM
-		HoudiniGEO
-		HoudiniPRM
-		HoudiniUT
-		)
-    ELSEIF (WIN32)
-      # windows
-      TARGET_LINK_LIBRARIES ( ${_lib_NAME}
-		${DSOLIB_A}
-        ${DSOLIB_LIB}
-		)
-      #TARGET_LINK_LIBRARIES ( ${_lib_NAME}
-      #  ${DSOLIB_A}
-      #  ${DSOLIB_LIB}
-      #  )
-    ELSE()
-      # Linux
-      SET_TARGET_PROPERTIES ( ${_lib_NAME} PROPERTIES
-		PREFIX ""
-		)
-      TARGET_LINK_LIBRARIES ( ${_lib_NAME}
-		HoudiniUI
-		HoudiniOPZ
-		HoudiniOP3
-		HoudiniOP2
-		HoudiniOP1
-		HoudiniSIM
-		HoudiniGEO
-		HoudiniPRM
-		HoudiniUT
-		)
-    ENDIF (APPLE)
-
-  ENDFUNCTION ()
-
-  FUNCTION ( HDK_MAKE_OTL _otl_NAME _op_NAME _label_NAME _ds_FILENAME _icn_FILENAME )
-    SET ( DIR_NAME
-      ${CMAKE_CURRENT_BINARY_DIR}/${_op_NAME}_otldir )
-    FILE ( REMOVE_RECURSE ${DIR_NAME})
-    FILE ( MAKE_DIRECTORY ${DIR_NAME})
-
-
-	SET ( ARGS --directory ${DIR_NAME} --operator ${_op_NAME} --label ${_label_NAME} )
-    IF ( _ds_FILENAME STRGREATER "" )
-	  LIST ( APPEND ARGS --dialogscript ${_ds_FILENAME} )
-	ENDIF ()
-    IF ( _icn_FILENAME STRGREATER "" )
-	  LIST ( APPEND ARGS --icon ${_icn_FILENAME} )
-	ENDIF ()
-	EXECUTE_PROCESS ( COMMAND ${CREATE_OTL_DIR_EXECUTABLE} ${ARGS} )
-    EXECUTE_PROCESS ( COMMAND ${HOTL_COMMAND} -c ${DIR_NAME} ${CMAKE_CURRENT_BINARY_DIR}/${_otl_NAME} )
-  ENDFUNCTION ()
-
-  FUNCTION ( HDK_COMBINE_OTLS _otl_NAME )
-    FILE ( REMOVE ${_otl_NAME})
-    FOREACH(arg ${ARGN})
-      EXECUTE_PROCESS ( COMMAND ${HOTL_COMMAND} -M ${CMAKE_CURRENT_BINARY_DIR}/${arg} ${CMAKE_CURRENT_BINARY_DIR}/${_otl_NAME} )
-	ENDFOREACH (arg)
-  ENDFUNCTION ()
-
-  # The vargs must be in the form "<operator-name>;<dso-name>" for each
-  # of the pair to be successfully composed into the VRAYprocedural
-  # file
-  FUNCTION ( HDK_COMPOSE_VRAYPROCEDURAL_FILE _vrayprocedural_FILENAME )
-	LIST ( LENGTH ARGN NUM_ITEMS )
-	MATH ( EXPR NUM_ITEMS_MODULO "${NUM_ITEMS} % 2" )
-	# MATH ( EXPR NUM_ITEMS_LESS_ONE "${NUM_ITEMS} - 1" )
-	IF ( ${NUM_ITEMS_MODULO} EQUAL 0 )
-	  MATH ( EXPR NUM_PAIRS "${NUM_ITEMS} / 2" )
-	  MATH ( EXPR NUM_PAIRS_LESS_ONE "${NUM_PAIRS} - 1" )
-
-	  FILE ( WRITE  ${_vrayprocedural_FILENAME} "// Procedural Insight Pty. Ltd.\n" )
-	  FILE ( APPEND ${_vrayprocedural_FILENAME} "#if defined(WIN32)\n" )
-	  FILE ( APPEND ${_vrayprocedural_FILENAME} "    #define DSO_FILE(filename)mantra/filename.dll\n" )
-	  FILE ( APPEND ${_vrayprocedural_FILENAME} "#elif defined(MBSD)\n" )
-	  FILE ( APPEND ${_vrayprocedural_FILENAME} "    #define DSO_FILE(filename)mantra/filename.dylib\n" )
-	  FILE ( APPEND ${_vrayprocedural_FILENAME} "#else\n" )
-	  FILE ( APPEND ${_vrayprocedural_FILENAME} "    #define DSO_FILE(filename)mantra/filename.so\n" )
-	  FILE ( APPEND ${_vrayprocedural_FILENAME} "#endif\n" )
-
-	  FOREACH ( PAIR_INDEX RANGE ${NUM_PAIRS_LESS_ONE} )
-		MATH ( EXPR OPERATOR_ITEM_INDEX "${PAIR_INDEX} * 2" )
-		MATH ( EXPR DSO_ITEM_INDEX "${OPERATOR_ITEM_INDEX} + 1" )
-		LIST ( GET ARGN ${OPERATOR_ITEM_INDEX} OPERATOR_ITEM )
-		LIST ( GET ARGN ${DSO_ITEM_INDEX} DSO_ITEM )
-		FILE ( APPEND ${_vrayprocedural_FILENAME} "${OPERATOR_ITEM}\tDSO_FILE(${DSO_ITEM})\n")
-	  ENDFOREACH ()
-
-	  FILE ( APPEND ${_vrayprocedural_FILENAME} "#undef DSO_FILE\n\n" )
-	  FILE ( APPEND ${_vrayprocedural_FILENAME} "#include \"$HFS/houdini/VRAYprocedural\"\n" )
-	ENDIF ()
-  ENDFUNCTION ()
-
-ENDIF (HDK_FOUND)
diff --git a/cmake/FindILMBase.cmake b/cmake/FindILMBase.cmake
index 518a1b603..dd67bd34c 100644
--- a/cmake/FindILMBase.cmake
+++ b/cmake/FindILMBase.cmake
@@ -1,4 +1,4 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
 #
 # All rights reserved. This software is distributed under the
 # Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
@@ -24,165 +24,301 @@
 # IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
 # LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
 #
+#[=======================================================================[.rst:
 
-#-*-cmake-*-
-# - Find ILMBase
-#
-# Author : Nicholas Yue yue.nicholas@gmail.com
-#
-# This auxiliary CMake file helps in find the ILMBASE headers and libraries
-#
-# ILMBASE_FOUND                  set if ILMBASE is found.
-# ILMBASE_INCLUDE_DIR            ILMBASE's include directory
-# ILMBASE_LIBRARYDIR            ILMBASE's include directory
-# Ilmbase_HALF_LIBRARY           ILMBASE's Half libraries
-# Ilmbase_IEX_LIBRARY            ILMBASE's Iex libraries
-# Ilmbase_IEXMATH_LIBRARY        ILMBASE's IexMath libraries
-# Ilmbase_ILMTHREAD_LIBRARY      ILMBASE's IlmThread libraries
-# Ilmbase_IMATH_LIBRARY          ILMBASE's Imath libraries
-
-FIND_PACKAGE ( PackageHandleStandardArgs )
-
-FIND_PATH ( ILMBASE_LOCATION include/OpenEXR/IlmBaseConfig.h
-  "$ENV{ILMBASE_ROOT}"
+FindILMBase
+---------
+
+Find ILMBase include dirs and libraries
+
+Use this module by invoking find_package with the form::
+
+  find_package(ILMBase
+    [version] [EXACT]      # Minimum or EXACT version
+    [REQUIRED]             # Fail with error if ILMBase is not found
+    [COMPONENTS <libs>...] # ILMBase libraries by their canonical name
+                           # e.g. "Half" for "libHalf"
+    )
+
+IMPORTED Targets
+^^^^^^^^^^^^^^^^
+
+``ILMBase::Half``
+  The Half library target.
+``ILMBase::Iex``
+  The Iex library target.
+``ILMBase::IexMath``
+  The IexMath library target.
+``ILMBase::IlmThread``
+  The IlmThread library target.
+``ILMBase::Imath``
+  The Imath library target.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This will define the following variables:
+
+``ILMBase_FOUND``
+  True if the system has the ILMBase library.
+``ILMBase_VERSION``
+  The version of the ILMBase library which was found.
+``ILMBase_INCLUDE_DIRS``
+  Include directories needed to use ILMBase.
+``ILMBase_LIBRARIES``
+  Libraries needed to link to ILMBase.
+``ILMBase_LIBRARY_DIRS``
+  ILMBase library directories.
+``ILMBase_{COMPONENT}_FOUND``
+  True if the system has the named ILMBase component.
+
+Cache Variables
+^^^^^^^^^^^^^^^
+
+The following cache variables may also be set:
+
+``ILMBase_INCLUDE_DIR``
+  The directory containing ``ILMBase/config-auto.h``.
+``ILMBase_{COMPONENT}_LIBRARY``
+  Individual component libraries for ILMBase
+``ILMBase_{COMPONENT}_DLL``
+  Individual component dlls for ILMBase on Windows.
+
+Hints
+^^^^^^^^^^^^^^^
+
+Instead of explicitly setting the cache variables, the following variables
+may be provided to tell this module where to look.
+
+``ILMBASE_ROOT``
+  Preferred installation prefix.
+``ILMBASE_INCLUDEDIR``
+  Preferred include directory e.g. <prefix>/include
+``ILMBASE_LIBRARYDIR``
+  Preferred library directory e.g. <prefix>/lib
+``SYSTEM_LIBRARY_PATHS``
+  Paths appended to all include and lib searches.
+
+#]=======================================================================]
+
+MARK_AS_ADVANCED (
+  ILMBase_INCLUDE_DIR
+  ILMBase_LIBRARY
+  ILMBASE_NAMESPACE_VERSIONING
+)
+
+SET ( _ILMBASE_COMPONENT_LIST
+  Half
+  Iex
+  IexMath
+  IlmThread
+  Imath
+  )
+
+IF ( ILMBase_FIND_COMPONENTS )
+  SET ( ILMBASE_COMPONENTS_PROVIDED TRUE )
+  SET ( _IGNORED_COMPONENTS "" )
+  FOREACH ( COMPONENT ${ILMBase_FIND_COMPONENTS} )
+    IF ( NOT ${COMPONENT} IN_LIST _ILMBASE_COMPONENT_LIST )
+      LIST ( APPEND _IGNORED_COMPONENTS ${COMPONENT} )
+    ENDIF ()
+  ENDFOREACH()
+
+  IF ( _IGNORED_COMPONENTS )
+    MESSAGE ( STATUS "Ignoring unknown components of ILMBase:" )
+    FOREACH ( COMPONENT ${_IGNORED_COMPONENTS} )
+      MESSAGE ( STATUS "  ${COMPONENT}" )
+    ENDFOREACH ()
+    LIST ( REMOVE_ITEM ILMBase_FIND_COMPONENTS ${_IGNORED_COMPONENTS} )
+  ENDIF ()
+ELSE ()
+  SET ( ILMBASE_COMPONENTS_PROVIDED FALSE )
+  SET ( ILMBase_FIND_COMPONENTS ${_ILMBASE_COMPONENT_LIST} )
+ENDIF ()
+
+# Append ILMBASE_ROOT or $ENV{ILMBASE_ROOT} if set (prioritize the direct cmake var)
+SET ( _ILMBASE_ROOT_SEARCH_DIR "" )
+
+IF ( ILMBASE_ROOT )
+  LIST ( APPEND _ILMBASE_ROOT_SEARCH_DIR ${ILMBASE_ROOT} )
+ELSE ()
+  SET ( _ENV_ILMBASE_ROOT $ENV{ILMBASE_ROOT} )
+  IF ( _ENV_ILMBASE_ROOT )
+    LIST ( APPEND _ILMBASE_ROOT_SEARCH_DIR ${_ENV_ILMBASE_ROOT} )
+  ENDIF ()
+ENDIF ()
+
+# Additionally try and use pkconfig to find ILMBase
+
+FIND_PACKAGE ( PkgConfig )
+PKG_CHECK_MODULES ( PC_ILMBase QUIET ilmbase )
+
+# ------------------------------------------------------------------------
+#  Search for ILMBase include DIR
+# ------------------------------------------------------------------------
+
+SET ( _ILMBASE_INCLUDE_SEARCH_DIRS "" )
+LIST ( APPEND _ILMBASE_INCLUDE_SEARCH_DIRS
+  ${ILMBASE_INCLUDEDIR}
+  ${_ILMBASE_ROOT_SEARCH_DIR}
+  ${PC_ILMBase_INCLUDE_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
+  )
+
+# Look for a standard OpenEXR header file.
+FIND_PATH ( ILMBase_INCLUDE_DIR IlmBaseConfig.h
   NO_DEFAULT_PATH
-  NO_SYSTEM_ENVIRONMENT_PATH
-  PATHS ${SYSTEM_LIBRARY_PATHS}
+  PATHS ${_ILMBASE_INCLUDE_SEARCH_DIRS}
+  PATH_SUFFIXES include/OpenEXR OpenEXR
   )
 
-FIND_PACKAGE_HANDLE_STANDARD_ARGS ( ILMBase
-  REQUIRED_VARS ILMBASE_LOCATION
+IF ( EXISTS "${ILMBase_INCLUDE_DIR}/IlmBaseConfig.h" )
+  # Get the ILMBASE version information from the config header
+  FILE ( STRINGS "${ILMBase_INCLUDE_DIR}/IlmBaseConfig.h"
+    _ilmbase_version_major_string REGEX "#define ILMBASE_VERSION_MAJOR "
+    )
+  STRING ( REGEX REPLACE "#define ILMBASE_VERSION_MAJOR" ""
+    _ilmbase_version_major_string "${_ilmbase_version_major_string}"
+    )
+  STRING ( STRIP "${_ilmbase_version_major_string}" ILMBase_VERSION_MAJOR )
+
+  FILE ( STRINGS "${ILMBase_INCLUDE_DIR}/IlmBaseConfig.h"
+     _ilmbase_version_minor_string REGEX "#define ILMBASE_VERSION_MINOR "
+    )
+  STRING ( REGEX REPLACE "#define ILMBASE_VERSION_MINOR" ""
+    _ilmbase_version_minor_string "${_ilmbase_version_minor_string}"
+    )
+  STRING ( STRIP "${_ilmbase_version_minor_string}" ILMBase_VERSION_MINOR )
+
+  UNSET ( _ilmbase_version_major_string )
+  UNSET ( _ilmbase_version_minor_string )
+
+  SET ( ILMBase_VERSION ${ILMBase_VERSION_MAJOR}.${ILMBase_VERSION_MINOR} )
+ENDIF ()
+
+# ------------------------------------------------------------------------
+#  Search for ILMBASE lib DIR
+# ------------------------------------------------------------------------
+
+SET ( _ILMBASE_LIBRARYDIR_SEARCH_DIRS "" )
+
+# Append to _ILMBASE_LIBRARYDIR_SEARCH_DIRS in priority order
+
+LIST ( APPEND _ILMBASE_LIBRARYDIR_SEARCH_DIRS
+  ${ILMBASE_LIBRARYDIR}
+  ${_ILMBASE_ROOT_SEARCH_DIR}
+  ${PC_ILMBase_LIBRARY_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
   )
 
-OPTION ( ILMBASE_NAMESPACE_VERSIONING "Namespace versioning of libraries" ON )
-
-IF ( ILMBASE_FOUND )
-
-  FILE ( STRINGS "${ILMBASE_LOCATION}/include/OpenEXR/IlmBaseConfig.h" _ilmbase_version_major_string REGEX "#define ILMBASE_VERSION_MAJOR ")
-  STRING ( REGEX REPLACE "#define ILMBASE_VERSION_MAJOR" "" _ilmbase_version_major_unstrip "${_ilmbase_version_major_string}")
-  STRING ( STRIP "${_ilmbase_version_major_unstrip}" ILMBASE_VERSION_MAJOR )
-
-  FILE ( STRINGS "${ILMBASE_LOCATION}/include/OpenEXR/IlmBaseConfig.h" _ilmbase_version_minor_string REGEX "#define ILMBASE_VERSION_MINOR ")
-  STRING ( REGEX REPLACE "#define ILMBASE_VERSION_MINOR" "" _ilmbase_version_minor_unstrip "${_ilmbase_version_minor_string}")
-  STRING ( STRIP "${_ilmbase_version_minor_unstrip}" ILMBASE_VERSION_MINOR )
-
-  IF ( ILMBASE_NAMESPACE_VERSIONING )
-	SET ( IEX_LIBRARY_NAME       Iex-${ILMBASE_VERSION_MAJOR}_${ILMBASE_VERSION_MINOR}       )
-	SET ( IEXMATH_LIBRARY_NAME   IexMath-${ILMBASE_VERSION_MAJOR}_${ILMBASE_VERSION_MINOR}   )
-	SET ( ILMTHREAD_LIBRARY_NAME IlmThread-${ILMBASE_VERSION_MAJOR}_${ILMBASE_VERSION_MINOR} )
-	SET ( IMATH_LIBRARY_NAME     Imath-${ILMBASE_VERSION_MAJOR}_${ILMBASE_VERSION_MINOR}     )
-  ELSE ( ILMBASE_NAMESPACE_VERSIONING )
-	SET ( IEX_LIBRARY_NAME       Iex       )
-	SET ( IEXMATH_LIBRARY_NAME   IexMath   )
-	SET ( ILMTHREAD_LIBRARY_NAME IlmThread )
-	SET ( IMATH_LIBRARY_NAME     Imath     )
-  ENDIF ( ILMBASE_NAMESPACE_VERSIONING )
-
-  SET ( ILMBASE_INCLUDE_DIRS
-    ${ILMBASE_LOCATION}/include
-    ${ILMBASE_LOCATION}/include/OpenEXR
-    CACHE STRING "ILMBase include directories")
-  SET ( ILMBASE_LIBRARYDIR ${ILMBASE_LOCATION}/lib
-    CACHE STRING "ILMBase library directories")
-  SET ( ILMBASE_FOUND TRUE )
-
-  SET ( ORIGINAL_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
-  IF (Ilmbase_USE_STATIC_LIBS)
-    IF (APPLE)
-      SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
-      FIND_LIBRARY ( Ilmbase_HALF_LIBRARY Half PATHS ${ILMBASE_LIBRARYDIR} )
-      FIND_LIBRARY ( Ilmbase_IEX_LIBRARY Iex PATHS ${ILMBASE_LIBRARYDIR} )
-      FIND_LIBRARY ( Ilmbase_ILMTHREAD_LIBRARY IlmThread PATHS ${ILMBASE_LIBRARYDIR} )
-      FIND_LIBRARY ( Ilmbase_IMATH_LIBRARY Imath PATHS ${ILMBASE_LIBRARYDIR} )
-    ELSEIF (WIN32)
-      # Link library
-      SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
-      FIND_LIBRARY ( Ilmbase_HALF_LIBRARY Half_static PATHS ${ILMBASE_LIBRARYDIR} )
-      FIND_LIBRARY ( Ilmbase_IEX_LIBRARY Iex_static PATHS ${ILMBASE_LIBRARYDIR} )
-      FIND_LIBRARY ( Ilmbase_ILMTHREAD_LIBRARY IlmThread_static PATHS ${ILMBASE_LIBRARYDIR} )
-      FIND_LIBRARY ( Ilmbase_IMATH_LIBRARY Imath_static PATHS ${ILMBASE_LIBRARYDIR} )
-    ELSE (APPLE)
-      SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".a")
-      FIND_LIBRARY ( Ilmbase_HALF_LIBRARY Half PATHS ${ILMBASE_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
-      FIND_LIBRARY ( Ilmbase_IEX_LIBRARY Iex PATHS ${ILMBASE_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
-      FIND_LIBRARY ( Ilmbase_ILMTHREAD_LIBRARY IlmThread PATHS ${ILMBASE_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
-      FIND_LIBRARY ( Ilmbase_IMATH_LIBRARY Imath PATHS ${ILMBASE_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
-    ENDIF (APPLE)
-  ELSE (Ilmbase_USE_STATIC_LIBS)
-    IF (APPLE)
-      SET(CMAKE_FIND_LIBRARY_SUFFIXES ".dylib")
-      FIND_LIBRARY ( Ilmbase_HALF_LIBRARY Half PATHS ${ILMBASE_LIBRARYDIR} )
-      FIND_LIBRARY ( Ilmbase_IEX_LIBRARY Iex PATHS ${ILMBASE_LIBRARYDIR} )
-      FIND_LIBRARY ( Ilmbase_ILMTHREAD_LIBRARY IlmThread PATHS ${ILMBASE_LIBRARYDIR} )
-      FIND_LIBRARY ( Ilmbase_IMATH_LIBRARY Imath PATHS ${ILMBASE_LIBRARYDIR} )
-    ELSEIF (WIN32)
-      # Link library
-      SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
-      FIND_LIBRARY ( Ilmbase_HALF_LIBRARY Half PATHS ${ILMBASE_LIBRARYDIR} )
-      FIND_LIBRARY ( Ilmbase_IEX_LIBRARY ${IEX_LIBRARY_NAME} PATHS ${ILMBASE_LIBRARYDIR} )
-      FIND_LIBRARY ( Ilmbase_IEXMATH_LIBRARY ${IEXMATH_LIBRARY_NAME} PATHS ${ILMBASE_LIBRARYDIR} )
-      FIND_LIBRARY ( Ilmbase_ILMTHREAD_LIBRARY ${ILMTHREAD_LIBRARY_NAME} PATHS ${ILMBASE_LIBRARYDIR} )
-      FIND_LIBRARY ( Ilmbase_IMATH_LIBRARY ${IMATH_LIBRARY_NAME} PATHS ${ILMBASE_LIBRARYDIR} )
-      # Load library
-      SET(CMAKE_FIND_LIBRARY_SUFFIXES ".dll")
-      FIND_LIBRARY ( Ilmbase_HALF_DLL Half PATHS ${ILMBASE_LOCATION}/bin
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-        )
-      FIND_LIBRARY ( Ilmbase_IEX_DLL ${IEX_LIBRARY_NAME} PATHS ${ILMBASE_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-        )
-      FIND_LIBRARY ( Ilmbase_IEXMATH_DLL ${IEXMATH_LIBRARY_NAME} PATHS ${ILMBASE_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-        )
-      FIND_LIBRARY ( Ilmbase_ILMTHREAD_DLL ${ILMTHREAD_LIBRARY_NAME} PATHS ${ILMBASE_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-        )
-      FIND_LIBRARY ( Ilmbase_IMATH_DLL ${IMATH_LIBRARY_NAME} PATHS ${ILMBASE_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-        )
-    ELSE (APPLE)
-      FIND_LIBRARY ( Ilmbase_HALF_LIBRARY Half PATHS ${ILMBASE_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-        )
-      FIND_LIBRARY ( Ilmbase_IEX_LIBRARY ${IEX_LIBRARY_NAME} PATHS ${ILMBASE_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-        )
-      FIND_LIBRARY ( Ilmbase_IEXMATH_LIBRARY ${IEXMATH_LIBRARY_NAME} PATHS ${ILMBASE_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-        )
-      FIND_LIBRARY ( Ilmbase_ILMTHREAD_LIBRARY ${ILMTHREAD_LIBRARY_NAME} PATHS ${ILMBASE_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-        )
-      FIND_LIBRARY ( Ilmbase_IMATH_LIBRARY ${IMATH_LIBRARY_NAME} PATHS ${ILMBASE_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-        )
-    ENDIF (APPLE)
+# Build suffix directories
+
+SET ( ILMBASE_PATH_SUFFIXES
+  lib64
+  lib
+)
+
+IF ( ${CMAKE_CXX_COMPILER_ID} STREQUAL GNU )
+  LIST ( INSERT ILMBASE_PATH_SUFFIXES 0 lib/x86_64-linux-gnu )
+ENDIF ()
+
+SET ( _ILMBASE_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES} )
+set ( ILMBase_LIB_COMPONENTS "" )
+
+FOREACH ( COMPONENT ${ILMBase_FIND_COMPONENTS} )
+  # library suffix handling
+  IF ( WIN32 )
+    SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".lib" )
+  ENDIF ()
+
+  IF ( ILMBASE_USE_STATIC_LIBS )
+    IF ( UNIX )
+      SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".a" )
+    ENDIF ()
+  ENDIF ()
+
+  SET ( LIB_NAME ${COMPONENT} )
+  IF ( ILMBASE_NAMESPACE_VERSIONING AND ILMBase_VERSION )
+    IF ( NOT ${COMPONENT} STREQUAL "Half" )
+      SET ( LIB_NAME "${LIB_NAME}-${ILMBase_VERSION_MAJOR}_${ILMBase_VERSION_MINOR}" )
+    ENDIF ()
   ENDIF ()
-  # MUST reset
-  SET(CMAKE_FIND_LIBRARY_SUFFIXES ${ORIGINAL_CMAKE_FIND_LIBRARY_SUFFIXES})
 
-ELSE ( ILMBASE_FOUND )
-  MESSAGE ( FATAL_ERROR "Unable to find ILMBase, ILMBASE_ROOT = $ENV{ILMBASE_ROOT}")
-ENDIF ( ILMBASE_FOUND )
+  FIND_LIBRARY ( ILMBase_${COMPONENT}_LIBRARY ${LIB_NAME}
+    NO_DEFAULT_PATH
+    PATHS ${_ILMBASE_LIBRARYDIR_SEARCH_DIRS}
+    PATH_SUFFIXES ${ILMBASE_PATH_SUFFIXES}
+    )
+  LIST ( APPEND ILMBase_LIB_COMPONENTS ${ILMBase_${COMPONENT}_LIBRARY} )
+
+  IF ( NOT ILMBASE_USE_STATIC_LIBS AND WIN32 )
+    SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".dll" )
+    FIND_LIBRARY ( ILMBase_${COMPONENT}_DLL ${LIB_NAME}
+      NO_DEFAULT_PATH
+      PATHS ${_ILMBASE_LIBRARYDIR_SEARCH_DIRS}
+      PATH_SUFFIXES bin
+      )
+  ENDIF ()
+
+  IF ( ILMBase_${COMPONENT}_LIBRARY )
+    SET ( ILMBase_${COMPONENT}_FOUND TRUE )
+  ELSE ()
+    SET ( ILMBase_${COMPONENT}_FOUND FALSE )
+  ENDIF ()
+ENDFOREACH ()
+
+# reset lib suffix
+
+SET ( CMAKE_FIND_LIBRARY_SUFFIXES ${_ILMBASE_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES} )
+
+# ------------------------------------------------------------------------
+#  Cache and set ILMBASE_FOUND
+# ------------------------------------------------------------------------
+
+INCLUDE ( FindPackageHandleStandardArgs )
+FIND_PACKAGE_HANDLE_STANDARD_ARGS ( ILMBase
+  FOUND_VAR ILMBase_FOUND
+  REQUIRED_VARS
+    ILMBase_INCLUDE_DIR
+    ILMBase_LIB_COMPONENTS
+  VERSION_VAR ILMBase_VERSION
+  HANDLE_COMPONENTS
+)
+
+IF ( ILMBase_FOUND )
+  SET ( ILMBase_LIBRARIES ${ILMBase_LIB_COMPONENTS} )
+
+  # We have to add both include and include/OpenEXR to the include
+  # path in case OpenEXR and ILMBase are installed separately
+  GET_FILENAME_COMPONENT ( ILMBase_INCLUDE_DIR ${ILMBase_INCLUDE_DIR} DIRECTORY )
+
+  SET ( ILMBase_INCLUDE_DIRS )
+  LIST ( APPEND ILMBase_INCLUDE_DIRS
+    ${ILMBase_INCLUDE_DIR}
+    ${ILMBase_INCLUDE_DIR}/OpenEXR
+    )
+  SET ( ILMBase_DEFINITIONS ${PC_ILMBase_CFLAGS_OTHER} )
+
+  SET ( ILMBase_LIBRARY_DIRS "" )
+  FOREACH ( LIB ${ILMBase_LIB_COMPONENTS} )
+    GET_FILENAME_COMPONENT ( _ILMBASE_LIBDIR ${LIB} DIRECTORY )
+    LIST ( APPEND ILMBase_LIBRARY_DIRS ${_ILMBASE_LIBDIR} )
+  ENDFOREACH ()
+  LIST ( REMOVE_DUPLICATES ILMBase_LIBRARY_DIRS )
+
+  # Configure imported targets
+
+  FOREACH ( COMPONENT ${ILMBase_FIND_COMPONENTS} )
+    IF ( NOT TARGET ILMBase::${COMPONENT} )
+      ADD_LIBRARY ( ILMBase::${COMPONENT} UNKNOWN IMPORTED )
+      SET_TARGET_PROPERTIES ( ILMBase::${COMPONENT} PROPERTIES
+        IMPORTED_LOCATION "${ILMBase_${COMPONENT}_LIBRARY}"
+        INTERFACE_COMPILE_OPTIONS "${ILMBase_DEFINITIONS}"
+        INTERFACE_INCLUDE_DIRECTORIES "${ILMBase_INCLUDE_DIRS}"
+      )
+    ENDIF ()
+  ENDFOREACH ()
+
+ELSEIF ( ILMBase_FIND_REQUIRED )
+  MESSAGE ( FATAL_ERROR "Unable to find ILMBase")
+ENDIF ()
diff --git a/cmake/FindLog4cplus.cmake b/cmake/FindLog4cplus.cmake
new file mode 100644
index 000000000..c7e5b7bac
--- /dev/null
+++ b/cmake/FindLog4cplus.cmake
@@ -0,0 +1,219 @@
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
+#
+# All rights reserved. This software is distributed under the
+# Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
+#
+# Redistributions of source code must retain the above copyright
+# and license notice and the following restrictions and disclaimer.
+#
+# *     Neither the name of DreamWorks Animation nor the names of
+# its contributors may be used to endorse or promote products derived
+# from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+# IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
+# LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
+#
+#[=======================================================================[.rst:
+
+FindLog4cplus
+---------
+
+Find Log4cplus include dirs and libraries
+
+Use this module by invoking find_package with the form::
+
+  find_package(Log4cplus
+    [version] [EXACT]      # Minimum or EXACT version
+    [REQUIRED]             # Fail with error if Log4cplus is not found
+    )
+
+
+IMPORTED Targets
+^^^^^^^^^^^^^^^^
+
+``Log4cplus::Log4cplus``
+  This module defines IMPORTED target Log4cplus::log4cplus, if Log4cplus has been
+  found.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This will define the following variables:
+
+``Log4cplus_FOUND``
+  True if the system has the Log4cplus library.
+``Log4cplus_VERSION``
+  The version of the Log4cplus library which was found.
+``Log4cplus_INCLUDE_DIRS``
+  Include directories needed to use Log4cplus.
+``Log4cplus_LIBRARIES``
+  Libraries needed to link to Log4cplus.
+``Log4cplus_LIBRARY_DIRS``
+  Log4cplus library directories.
+
+Cache Variables
+^^^^^^^^^^^^^^^
+
+The following cache variables may also be set:
+
+``Log4cplus_INCLUDE_DIR``
+  The directory containing ``log4cplus/version.h``.
+``Log4cplus_LIBRARY``
+  The path to the Log4cplus library.
+
+Hints
+^^^^^^^^^^^^^^^
+
+Instead of explicitly setting the cache variables, the following variables
+may be provided to tell this module where to look.
+
+``LOG4CPLUS_ROOT``
+  Preferred installation prefix.
+``LOG4CPLUS_INCLUDEDIR``
+  Preferred include directory e.g. <prefix>/include
+``LOG4CPLUS_LIBRARYDIR``
+  Preferred library directory e.g. <prefix>/lib
+``SYSTEM_LIBRARY_PATHS``
+  Paths appended to all include and lib searches.
+
+#]=======================================================================]
+
+MARK_AS_ADVANCED (
+  Log4cplus_INCLUDE_DIR
+  Log4cplus_LIBRARY
+)
+
+# Append LOG4CPLUS_ROOT or $ENV{LOG4CPLUS_ROOT} if set (prioritize the direct cmake var)
+SET ( _LOG4CPLUS_ROOT_SEARCH_DIR "" )
+
+IF ( LOG4CPLUS_ROOT )
+  LIST ( APPEND _LOG4CPLUS_ROOT_SEARCH_DIR ${LOG4CPLUS_ROOT} )
+ELSE ()
+  SET ( _ENV_LOG4CPLUS_ROOT $ENV{LOG4CPLUS_ROOT} )
+  IF ( _ENV_LOG4CPLUS_ROOT )
+    LIST ( APPEND _LOG4CPLUS_ROOT_SEARCH_DIR ${_ENV_LOG4CPLUS_ROOT} )
+  ENDIF ()
+ENDIF ()
+
+# Additionally try and use pkconfig to find ILMBase
+
+FIND_PACKAGE ( PkgConfig )
+PKG_CHECK_MODULES ( PC_Log4cplus QUIET log4cplus )
+
+# ------------------------------------------------------------------------
+#  Search for Log4cplus include DIR
+# ------------------------------------------------------------------------
+
+SET ( _LOG4CPLUS_INCLUDE_SEARCH_DIRS "" )
+LIST ( APPEND _LOG4CPLUS_INCLUDE_SEARCH_DIRS
+  ${LOG4CPLUS_INCLUDEDIR}
+  ${_LOG4CPLUS_ROOT_SEARCH_DIR}
+  ${PC_Log4cplus_INCLUDE_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
+  )
+
+# Look for a standard log4cplus header file.
+FIND_PATH ( Log4cplus_INCLUDE_DIR log4cplus/version.h
+  NO_DEFAULT_PATH
+  PATHS ${_LOG4CPLUS_INCLUDE_SEARCH_DIRS}
+  PATH_SUFFIXES include
+  )
+
+IF ( EXISTS "${Log4cplus_INCLUDE_DIR}/log4cplus/version.h" )
+  FILE ( STRINGS "${Log4cplus_INCLUDE_DIR}/log4cplus/version.h"
+    _log4cplus_version_string REGEX "#define LOG4CPLUS_VERSION LOG4CPLUS_MAKE_VERSION"
+    )
+  STRING ( REGEX REPLACE "#define LOG4CPLUS_VERSION LOG4CPLUS_MAKE_VERSION\((.*)\).*$" "\\1"
+    _log4cplus_version_string "${_log4cplus_version_string}"
+    )
+  STRING ( REGEX REPLACE "[(]([0-9]+),.*[)].*$" "\\1"
+    Log4cplus_MAJOR_VERSION "${_log4cplus_version_string}"
+    )
+  STRING ( REGEX REPLACE "[(].+, ([0-9]+),.+[)].*$" "\\1"
+    Log4cplus_MINOR_VERSION "${_log4cplus_version_string}"
+    )
+  STRING ( REGEX REPLACE "[(].*,.*, ([0-9]+)[)].*$" "\\1"
+    Log4cplus_PATCH_VERSION "${_log4cplus_version_string}"
+    )
+  UNSET ( _log4cplus_version_string )
+
+  SET ( Log4cplus_VERSION ${Log4cplus_MAJOR_VERSION}.${Log4cplus_MINOR_VERSION}.${Log4cplus_PATCH_VERSION} )
+ENDIF ()
+
+# ------------------------------------------------------------------------
+#  Search for Log4cplus lib DIR
+# ------------------------------------------------------------------------
+
+SET ( _LOG4CPLUS_LIBRARYDIR_SEARCH_DIRS "" )
+LIST ( APPEND _LOG4CPLUS_LIBRARYDIR_SEARCH_DIRS
+  ${LOG4CPLUS_LIBRARYDIR}
+  ${_LOG4CPLUS_ROOT_SEARCH_DIR}
+  ${PC_Log4cplus_LIBRARY_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
+  )
+
+SET ( _LOG4CPLUS_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES} )
+
+IF ( LOG4CPLUS_USE_STATIC_LIBS )
+  IF ( UNIX )
+    SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".a" )
+  ENDIF ()
+ENDIF ()
+
+# Build suffix directories
+
+SET ( LOG4CPLUS_PATH_SUFFIXES
+  lib64
+  lib
+)
+
+FIND_LIBRARY ( Log4cplus_LIBRARY log4cplus
+  NO_DEFAULT_PATH
+  PATHS ${_LOG4CPLUS_LIBRARYDIR_SEARCH_DIRS}
+  PATH_SUFFIXES ${LOG4CPLUS_PATH_SUFFIXES}
+  )
+
+SET ( CMAKE_FIND_LIBRARY_SUFFIXES ${_LOG4CPLUS_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES})
+
+# ------------------------------------------------------------------------
+#  Cache and set Log4cplus_FOUND
+# ------------------------------------------------------------------------
+
+INCLUDE ( FindPackageHandleStandardArgs )
+FIND_PACKAGE_HANDLE_STANDARD_ARGS ( Log4cplus
+  FOUND_VAR Log4cplus_FOUND
+  REQUIRED_VARS
+    Log4cplus_LIBRARY
+    Log4cplus_INCLUDE_DIR
+  VERSION_VAR Log4cplus_VERSION
+)
+
+IF ( Log4cplus_FOUND )
+  SET ( Log4cplus_LIBRARIES ${Log4cplus_LIBRARY} )
+  SET ( Log4cplus_INCLUDE_DIRS ${Log4cplus_INCLUDE_DIR} )
+  SET ( Log4cplus_DEFINITIONS ${PC_Log4cplus_CFLAGS_OTHER} )
+
+  GET_FILENAME_COMPONENT ( Log4cplus_LIBRARY_DIRS ${Log4cplus_LIBRARY} DIRECTORY )
+
+  IF ( NOT TARGET Log4cplus::log4cplus )
+    ADD_LIBRARY ( Log4cplus::log4cplus UNKNOWN IMPORTED )
+    SET_TARGET_PROPERTIES ( Log4cplus::log4cplus PROPERTIES
+      IMPORTED_LOCATION "${Log4cplus_LIBRARIES}"
+      INTERFACE_COMPILE_DEFINITIONS "${Log4cplus_DEFINITIONS}"
+      INTERFACE_INCLUDE_DIRECTORIES "${Log4cplus_INCLUDE_DIRS}"
+    )
+  ENDIF ()
+ELSEIF ( Log4cplus_FIND_REQUIRED )
+  MESSAGE ( FATAL_ERROR "Unable to find Log4cplus")
+ENDIF ()
diff --git a/cmake/FindMaya.cmake b/cmake/FindMaya.cmake
index 22e505c36..ccb28ca57 100644
--- a/cmake/FindMaya.cmake
+++ b/cmake/FindMaya.cmake
@@ -1,4 +1,4 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
 #
 # All rights reserved. This software is distributed under the
 # Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
@@ -41,13 +41,8 @@
 FIND_PACKAGE ( PackageHandleStandardArgs )
 
 FIND_PATH( MAYA_LOCATION include/maya/MTypes.h
-  "$ENV{MAYA_LOCATION}"
   NO_DEFAULT_PATH
-  NO_CMAKE_ENVIRONMENT_PATH
-  NO_CMAKE_PATH
-  NO_SYSTEM_ENVIRONMENT_PATH
-  NO_CMAKE_SYSTEM_PATH
-  PATHS ${SYSTEM_LIBRARY_PATHS}
+  PATHS $ENV{MAYA_LOCATION} ${SYSTEM_LIBRARY_PATHS}
   )
 
 FIND_PACKAGE_HANDLE_STANDARD_ARGS ( Maya
@@ -71,9 +66,9 @@ IF ( MAYA_FOUND )
   STRING ( SUBSTRING ${_MAYA_API_VERSION} 0 4 _MAYA_MAJOR_VERSION_NUMBER )
   STRING ( SUBSTRING ${_MAYA_API_VERSION} 4 2 _MAYA_MINOR_VERSION_NUMBER )
   IF ( _MAYA_MINOR_VERSION_NUMBER LESS 50 )
-	SET ( MAYA_VERSION_NUMBER ${_MAYA_MAJOR_VERSION_NUMBER} CACHE STRING "Maya version")
+    SET ( MAYA_VERSION_NUMBER ${_MAYA_MAJOR_VERSION_NUMBER} CACHE STRING "Maya version")
   ELSE ()
-	SET ( MAYA_VERSION_NUMBER ${_MAYA_MAJOR_VERSION_NUMBER}.5 CACHE STRING "Maya version")
+    SET ( MAYA_VERSION_NUMBER ${_MAYA_MAJOR_VERSION_NUMBER}.5 CACHE STRING "Maya version")
   ENDIF ()
   # MESSAGE ( "MAYA_VERSION_NUMBER = ${MAYA_VERSION_NUMBER}")
 
@@ -90,40 +85,38 @@ IF ( MAYA_FOUND )
   FOREACH ( lib_component ${MAYA_LIBRARY_COMPONENTS} )
     FIND_LIBRARY ( MAYA_${lib_component}_LIBRARY  ${lib_component}
       PATHS ${MAYA_LOCATION}/lib
-	  NO_DEFAULT_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
+      NO_DEFAULT_PATH
       )
   ENDFOREACH ()
 
   IF ( MAYA_SEARCH_SHIPPED_BOOST )
 
-	# TODO : How to determine shipping version of Boost assocated with Maya
-	SET ( MAYA_BOOST_VERSION "1_52" )
+    # TODO : How to determine shipping version of Boost assocated with Maya
+    SET ( MAYA_BOOST_VERSION "1_52" )
 
-	LIST ( APPEND MAYA_BOOST_LIBRARY_COMPONENTS awBoost_filesystem )
-	LIST ( APPEND MAYA_BOOST_LIBRARY_COMPONENTS awBoost_python )
-	LIST ( APPEND MAYA_BOOST_LIBRARY_COMPONENTS awBoost_regex )
-	LIST ( APPEND MAYA_BOOST_LIBRARY_COMPONENTS awBoost_signals )
-	LIST ( APPEND MAYA_BOOST_LIBRARY_COMPONENTS awBoost_system )
-	LIST ( APPEND MAYA_BOOST_LIBRARY_COMPONENTS awBoost_thread )
+    LIST ( APPEND MAYA_BOOST_LIBRARY_COMPONENTS awBoost_filesystem )
+    LIST ( APPEND MAYA_BOOST_LIBRARY_COMPONENTS awBoost_python )
+    LIST ( APPEND MAYA_BOOST_LIBRARY_COMPONENTS awBoost_regex )
+    LIST ( APPEND MAYA_BOOST_LIBRARY_COMPONENTS awBoost_signals )
+    LIST ( APPEND MAYA_BOOST_LIBRARY_COMPONENTS awBoost_system )
+    LIST ( APPEND MAYA_BOOST_LIBRARY_COMPONENTS awBoost_thread )
 
-	FOREACH ( lib_component ${MAYA_BOOST_LIBRARY_COMPONENTS} )
+    FOREACH ( lib_component ${MAYA_BOOST_LIBRARY_COMPONENTS} )
       FIND_LIBRARY ( MAYA_${lib_component}_LIBRARY  ${lib_component}-${MAYA_BOOST_VERSION}
-		PATHS ${MAYA_LOCATION}/lib
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
-	ENDFOREACH ()
+        PATHS ${MAYA_LOCATION}/lib
+        NO_DEFAULT_PATH
+        )
+    ENDFOREACH ()
 
   ENDIF ( MAYA_SEARCH_SHIPPED_BOOST )
 
   IF (APPLE)
     SET ( MAYA_DEFINITIONS
       -DMAC_PLUGIN
-	  -DREQUIRE_IOSTREAM
-	  -DOSMac_
-	  -DOSMac_MachO_
-	  -D_BOOL
+      -DREQUIRE_IOSTREAM
+      -DOSMac_
+      -DOSMac_MachO_
+      -D_BOOL
       )
   ELSEIF (WIN32)
     SET ( MAYA_DEFINITIONS
@@ -162,17 +155,17 @@ IF ( MAYA_FOUND )
   MACRO( MAYA_SET_LIBRARY_PROPERTIES NAME )
     IF (WIN32)
       SET_TARGET_PROPERTIES ( ${NAME} PROPERTIES
-		SUFFIX ".mll"
-		PREFIX ""
-		LINK_FLAGS "/export:initializePlugin /export:uninitializePlugin"
-		)
+        SUFFIX ".mll"
+        PREFIX ""
+        LINK_FLAGS "/export:initializePlugin /export:uninitializePlugin"
+        )
     ELSEIF (APPLE)
       SET_TARGET_PROPERTIES ( ${NAME} PROPERTIES
-		SUFFIX ".bundle"
-		PREFIX "")
+        SUFFIX ".bundle"
+        PREFIX "")
     ELSE ()
       SET_TARGET_PROPERTIES ( ${NAME} PROPERTIES
-		PREFIX "")
+        PREFIX "")
     ENDIF ()
 
   ENDMACRO ()
diff --git a/cmake/FindOpenEXR.cmake b/cmake/FindOpenEXR.cmake
index 98f4336f6..7b059821f 100644
--- a/cmake/FindOpenEXR.cmake
+++ b/cmake/FindOpenEXR.cmake
@@ -1,4 +1,4 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
 #
 # All rights reserved. This software is distributed under the
 # Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
@@ -24,102 +24,291 @@
 # IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
 # LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
 #
+#[=======================================================================[.rst:
 
-# -*- cmake -*-
-# - Find OpenEXR
-#
-# Author : Nicholas Yue yue.nicholas@gmail.com
-#
-# This module will define the following variables:
-#  OPENEXR_INCLUDE_DIRS - Location of the openexr includes
-#  OPENEXR_LIBRARIES - [TODO] Required libraries for all requested bindings
-#  OPENEXR_FOUND - true if OPENEXR was found on the system
-#  OPENEXR_LIBRARYDIR - the full set of library directories
+FindOpenEXR
+---------
+
+Find OpenEXR include dirs and libraries
+
+Use this module by invoking find_package with the form::
+
+  find_package(OpenEXR
+    [version] [EXACT]      # Minimum or EXACT version
+    [REQUIRED]             # Fail with error if OpenEXR is not found
+    [COMPONENTS <libs>...] # OpenEXR libraries by their canonical name
+                           # e.g. "IlmImf" for "libIlmImf"
+    )
+
+IMPORTED Targets
+^^^^^^^^^^^^^^^^
+
+``OpenEXR::IlmImf``
+  The IlmImf library target.
+``OpenEXR::IlmImfUtil``
+  The IlmImfUtil library target.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This will define the following variables:
+
+``OpenEXR_FOUND``
+  True if the system has the OpenEXR library.
+``OpenEXR_VERSION``
+  The version of the OpenEXR library which was found.
+``OpenEXR_INCLUDE_DIRS``
+  Include directories needed to use OpenEXR.
+``OpenEXR_LIBRARIES``
+  Libraries needed to link to OpenEXR.
+``OpenEXR_LIBRARY_DIRS``
+  OpenEXR library directories.
+``OpenEXR_DEFINITIONS``
+  Definitions to use when compiling code that uses OpenEXR.
+``OpenEXR_{COMPONENT}_FOUND``
+  True if the system has the named OpenEXR component.
+
+Cache Variables
+^^^^^^^^^^^^^^^
+
+The following cache variables may also be set:
+
+``OpenEXR_INCLUDE_DIR``
+  The directory containing ``OpenEXR/config-auto.h``.
+``OpenEXR_{COMPONENT}_LIBRARY``
+  Individual component libraries for OpenEXR
+``OpenEXR_{COMPONENT}_DLL``
+  Individual component dlls for OpenEXR on Windows.
+
+Hints
+^^^^^^^^^^^^^^^
+
+Instead of explicitly setting the cache variables, the following variables
+may be provided to tell this module where to look.
 
-FIND_PACKAGE ( PackageHandleStandardArgs )
+``OPENEXR_ROOT``
+  Preferred installation prefix.
+``OPENEXR_INCLUDEDIR``
+  Preferred include directory e.g. <prefix>/include
+``OPENEXR_LIBRARYDIR``
+  Preferred library directory e.g. <prefix>/lib
+``SYSTEM_LIBRARY_PATHS``
+  Paths appended to all include and lib searches.
+
+#]=======================================================================]
+
+MARK_AS_ADVANCED (
+  OpenEXR_INCLUDE_DIR
+  OpenEXR_LIBRARY
+  OPENEXR_NAMESPACE_VERSIONING
+)
+
+SET ( _OPENEXR_COMPONENT_LIST
+  IlmImf
+  IlmImfUtil
+  )
+
+IF ( OpenEXR_FIND_COMPONENTS )
+  SET ( OPENEXR_COMPONENTS_PROVIDED TRUE )
+  SET ( _IGNORED_COMPONENTS "" )
+  FOREACH ( COMPONENT ${OpenEXR_FIND_COMPONENTS} )
+    IF ( NOT ${COMPONENT} IN_LIST _OPENEXR_COMPONENT_LIST )
+      LIST ( APPEND _IGNORED_COMPONENTS ${COMPONENT} )
+    ENDIF ()
+  ENDFOREACH()
+
+  IF ( _IGNORED_COMPONENTS )
+    MESSAGE ( STATUS "Ignoring unknown components of OpenEXR:" )
+    FOREACH ( COMPONENT ${_IGNORED_COMPONENTS} )
+      MESSAGE ( STATUS "  ${COMPONENT}" )
+    ENDFOREACH ()
+    LIST ( REMOVE_ITEM OpenEXR_FIND_COMPONENTS ${_IGNORED_COMPONENTS} )
+  ENDIF ()
+ELSE ()
+  SET ( OPENEXR_COMPONENTS_PROVIDED FALSE )
+  SET ( OpenEXR_FIND_COMPONENTS ${_OPENEXR_COMPONENT_LIST} )
+ENDIF ()
+
+# Append OPENEXR_ROOT or $ENV{OPENEXR_ROOT} if set (prioritize the direct cmake var)
+SET ( _OPENEXR_ROOT_SEARCH_DIR "" )
+
+IF ( OPENEXR_ROOT )
+  LIST ( APPEND _OPENEXR_ROOT_SEARCH_DIR ${OPENEXR_ROOT} )
+ELSE ()
+  SET ( _ENV_OPENEXR_ROOT $ENV{OPENEXR_ROOT} )
+  IF ( _ENV_OPENEXR_ROOT )
+    LIST ( APPEND _OPENEXR_ROOT_SEARCH_DIR ${_ENV_OPENEXR_ROOT} )
+  ENDIF ()
+ENDIF ()
+
+# Additionally try and use pkconfig to find OpenEXR
+
+FIND_PACKAGE ( PkgConfig )
+PKG_CHECK_MODULES ( PC_OpenEXR QUIET openexr )
+
+# ------------------------------------------------------------------------
+#  Search for OpenEXR include DIR
+# ------------------------------------------------------------------------
+
+SET ( _OPENEXR_INCLUDE_SEARCH_DIRS "" )
+LIST ( APPEND _OPENEXR_INCLUDE_SEARCH_DIRS
+  ${OPENEXR_INCLUDEDIR}
+  ${_OPENEXR_ROOT_SEARCH_DIR}
+  ${PC_OpenEXR_INCLUDE_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
+  )
 
-FIND_PATH ( OPENEXR_LOCATION include/OpenEXR/OpenEXRConfig.h
-  ENV OPENEXR_ROOT
+# Look for a standard OpenEXR header file.
+FIND_PATH ( OpenEXR_INCLUDE_DIR OpenEXRConfig.h
   NO_DEFAULT_PATH
-  NO_SYSTEM_ENVIRONMENT_PATH
-  PATHS ${SYSTEM_LIBRARY_PATHS}
+  PATHS ${_OPENEXR_INCLUDE_SEARCH_DIRS}
+  PATH_SUFFIXES  include/OpenEXR OpenEXR
   )
 
-FIND_PACKAGE_HANDLE_STANDARD_ARGS ( OpenEXR
-  REQUIRED_VARS OPENEXR_LOCATION
+IF ( EXISTS "${OpenEXR_INCLUDE_DIR}/OpenEXRConfig.h" )
+  # Get the EXR version information from the config header
+  FILE ( STRINGS "${OpenEXR_INCLUDE_DIR}/OpenEXRConfig.h"
+    _openexr_version_major_string REGEX "#define OPENEXR_VERSION_MAJOR "
+    )
+  STRING ( REGEX REPLACE "#define OPENEXR_VERSION_MAJOR" ""
+    _openexr_version_major_string "${_openexr_version_major_string}"
+    )
+  STRING ( STRIP "${_openexr_version_major_string}" OpenEXR_VERSION_MAJOR )
+
+  FILE ( STRINGS "${OpenEXR_INCLUDE_DIR}/OpenEXRConfig.h"
+     _openexr_version_minor_string REGEX "#define OPENEXR_VERSION_MINOR "
+    )
+  STRING ( REGEX REPLACE "#define OPENEXR_VERSION_MINOR" ""
+    _openexr_version_minor_string "${_openexr_version_minor_string}"
+    )
+  STRING ( STRIP "${_openexr_version_minor_string}" OpenEXR_VERSION_MINOR )
+
+  UNSET ( _openexr_version_major_string )
+  UNSET ( _openexr_version_minor_string )
+
+  SET ( OpenEXR_VERSION ${OpenEXR_VERSION_MAJOR}.${OpenEXR_VERSION_MINOR} )
+ENDIF ()
+
+# ------------------------------------------------------------------------
+#  Search for OPENEXR lib DIR
+# ------------------------------------------------------------------------
+
+SET ( _OPENEXR_LIBRARYDIR_SEARCH_DIRS "" )
+
+# Append to _OPENEXR_LIBRARYDIR_SEARCH_DIRS in priority order
+
+LIST ( APPEND _OPENEXR_LIBRARYDIR_SEARCH_DIRS
+  ${OPENEXR_LIBRARYDIR}
+  ${_OPENEXR_ROOT_SEARCH_DIR}
+  ${PC_OpenEXR_LIBRARY_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
   )
 
-OPTION ( OPENEXR_NAMESPACE_VERSIONING "Namespace versioning of libraries" ON )
-
-IF ( OPENEXR_FOUND )
-
-  FILE ( STRINGS "${OPENEXR_LOCATION}/include/OpenEXR/OpenEXRConfig.h" _openexr_version_major_string REGEX "#define OPENEXR_VERSION_MAJOR ")
-  STRING ( REGEX REPLACE "#define OPENEXR_VERSION_MAJOR" "" _openexr_version_major_unstrip "${_openexr_version_major_string}")
-  STRING ( STRIP "${_openexr_version_major_unstrip}" OPENEXR_VERSION_MAJOR )
-
-  FILE ( STRINGS "${OPENEXR_LOCATION}/include/OpenEXR/OpenEXRConfig.h" _openexr_version_minor_string REGEX "#define OPENEXR_VERSION_MINOR ")
-  STRING ( REGEX REPLACE "#define OPENEXR_VERSION_MINOR" "" _openexr_version_minor_unstrip "${_openexr_version_minor_string}")
-  STRING ( STRIP "${_openexr_version_minor_unstrip}" OPENEXR_VERSION_MINOR )
-
-  MESSAGE ( STATUS "Found OpenEXR v${OPENEXR_VERSION_MAJOR}.${OPENEXR_VERSION_MINOR} at ${OPENEXR_LOCATION}" )
-
-  IF ( OPENEXR_NAMESPACE_VERSIONING )
-	SET ( ILMIMF_LIBRARY_NAME IlmImf-${OPENEXR_VERSION_MAJOR}_${OPENEXR_VERSION_MINOR} )
-  ELSE ( OPENEXR_NAMESPACE_VERSIONING )
-	SET ( ILMIMF_LIBRARY_NAME IlmImf )
-  ENDIF ( OPENEXR_NAMESPACE_VERSIONING )
-
-  SET ( OPENEXR_INCLUDE_DIRS
-    ${OPENEXR_LOCATION}/include
-    ${OPENEXR_LOCATION}/include/OpenEXR
-    CACHE STRING "Openexr include directories")
-  SET ( OPENEXR_LIBRARYDIR ${OPENEXR_LOCATION}/lib
-    CACHE STRING "Openexr library directories")
-  SET ( OPENEXR_FOUND TRUE )
-
-
-  IF (Openexr_USE_STATIC_LIBS)
-    IF (APPLE)
-      SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
-      FIND_LIBRARY ( Openexr_ILMIMF_LIBRARY ${ILMIMF_LIBRARY_NAME} PATHS ${OPENEXR_LIBRARYDIR} )
-    ELSEIF (WIN32)
-      # Link library
-      SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
-      FIND_LIBRARY ( Openexr_ILMIMF_LIBRARY ${ILMIMF_LIBRARY_NAME} PATHS ${OPENEXR_LIBRARYDIR} )
-    ELSE (APPLE)
-      # MESSAGE ( "CMAKE_FIND_LIBRARY_SUFFIXES = " ${CMAKE_FIND_LIBRARY_SUFFIXES})
-      SET ( ORIGINAL_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
-      SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".a")
-      FIND_LIBRARY ( Openexr_ILMIMF_LIBRARY ${ILMIMF_LIBRARY_NAME} PATHS ${OPENEXR_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		)
-      SET ( CMAKE_FIND_LIBRARY_SUFFIXES ${ORIGINAL_CMAKE_FIND_LIBRARY_SUFFIXES})
-    ENDIF (APPLE)
+# Build suffix directories
+
+SET ( OPENEXR_PATH_SUFFIXES
+  lib64
+  lib
+)
+
+IF ( ${CMAKE_CXX_COMPILER_ID} STREQUAL GNU )
+  LIST ( INSERT OPENEXR_PATH_SUFFIXES 0 lib/x86_64-linux-gnu )
+ENDIF ()
+
+SET ( _OPENEXR_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES} )
+set ( OpenEXR_LIB_COMPONENTS "" )
+
+FOREACH ( COMPONENT ${OpenEXR_FIND_COMPONENTS} )
+  # library suffix handling
+  IF ( WIN32 )
+    SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".lib" )
+  ENDIF ()
+
+  IF ( OPENEXR_USE_STATIC_LIBS )
+    IF ( UNIX )
+      SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".a" )
+    ENDIF ()
+  ENDIF ()
+
+  SET ( LIB_NAME ${COMPONENT} )
+  IF ( OPENEXR_NAMESPACE_VERSIONING AND OpenEXR_VERSION )
+    SET ( LIB_NAME "${LIB_NAME}-${OpenEXR_VERSION_MAJOR}_${OpenEXR_VERSION_MINOR}" )
+  ENDIF ()
+
+  FIND_LIBRARY ( OpenEXR_${COMPONENT}_LIBRARY ${LIB_NAME}
+    NO_DEFAULT_PATH
+    PATHS ${_OPENEXR_LIBRARYDIR_SEARCH_DIRS}
+    PATH_SUFFIXES ${OPENEXR_PATH_SUFFIXES}
+    )
+  LIST ( APPEND OpenEXR_LIB_COMPONENTS ${OpenEXR_${COMPONENT}_LIBRARY} )
+
+  IF ( NOT OPENEXR_USE_STATIC_LIBS AND WIN32 )
+    SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".dll" )
+    FIND_LIBRARY ( OpenEXR_${COMPONENT}_DLL ${LIB_NAME}
+      NO_DEFAULT_PATH
+      PATHS ${_OPENEXR_LIBRARYDIR_SEARCH_DIRS}
+      PATH_SUFFIXES bin
+      )
+  ENDIF ()
+
+  IF ( OpenEXR_${COMPONENT}_LIBRARY )
+    SET ( OpenEXR_${COMPONENT}_FOUND TRUE )
   ELSE ()
-    IF (APPLE)
-      SET(CMAKE_FIND_LIBRARY_SUFFIXES ".dylib")
-      FIND_LIBRARY ( Openexr_ILMIMF_LIBRARY ${ILMIMF_LIBRARY_NAME} PATHS ${OPENEXR_LIBRARYDIR} )
-    ELSEIF (WIN32)
-      # Link library
-      SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
-      FIND_LIBRARY ( Openexr_ILMIMF_LIBRARY ${ILMIMF_LIBRARY_NAME} PATHS ${OPENEXR_LIBRARYDIR} )
-      # Load library
-      SET(CMAKE_FIND_LIBRARY_SUFFIXES ".dll")
-      FIND_LIBRARY ( Openexr_ILMIMF_DLL ${ILMIMF_LIBRARY_NAME} PATHS ${OPENEXR_LOCATION}/bin )
-      # MUST reset
-      SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
-    ELSE (APPLE)
-      FIND_LIBRARY ( Openexr_ILMIMF_LIBRARY ${ILMIMF_LIBRARY_NAME} PATHS ${OPENEXR_LIBRARYDIR}
-		NO_DEFAULT_PATH
-		NO_CMAKE_ENVIRONMENT_PATH
-		NO_CMAKE_PATH
-		NO_SYSTEM_ENVIRONMENT_PATH
-		NO_CMAKE_SYSTEM_PATH
-		)
-    ENDIF (APPLE)
+    SET ( OpenEXR_${COMPONENT}_FOUND FALSE )
   ENDIF ()
+ENDFOREACH ()
+
+# reset lib suffix
+
+SET ( CMAKE_FIND_LIBRARY_SUFFIXES ${_OPENEXR_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES} )
+
+# ------------------------------------------------------------------------
+#  Cache and set OPENEXR_FOUND
+# ------------------------------------------------------------------------
+
+INCLUDE ( FindPackageHandleStandardArgs )
+FIND_PACKAGE_HANDLE_STANDARD_ARGS ( OpenEXR
+  FOUND_VAR OpenEXR_FOUND
+  REQUIRED_VARS
+    OpenEXR_INCLUDE_DIR
+    OpenEXR_LIB_COMPONENTS
+  VERSION_VAR OpenEXR_VERSION
+  HANDLE_COMPONENTS
+)
+
+IF ( OpenEXR_FOUND )
+  SET ( OpenEXR_LIBRARIES ${OpenEXR_LIB_COMPONENTS} )
+
+  # We have to add both include and include/OpenEXR to the include
+  # path in case OpenEXR and ILMBase are installed separately
+  GET_FILENAME_COMPONENT ( OpenEXR_INCLUDE_DIR ${OpenEXR_INCLUDE_DIR} DIRECTORY )
+
+  SET ( OpenEXR_INCLUDE_DIRS "" )
+  LIST ( APPEND OpenEXR_INCLUDE_DIRS
+    ${OpenEXR_INCLUDE_DIR}
+    ${OpenEXR_INCLUDE_DIR}/OpenEXR
+    )
+  SET ( OpenEXR_DEFINITIONS ${PC_OpenEXR_CFLAGS_OTHER} )
+
+  SET ( OpenEXR_LIBRARY_DIRS "" )
+  FOREACH ( LIB ${OpenEXR_LIB_COMPONENTS} )
+    GET_FILENAME_COMPONENT ( _OPENEXR_LIBDIR ${LIB} DIRECTORY )
+    LIST ( APPEND OpenEXR_LIBRARY_DIRS ${_OPENEXR_LIBDIR} )
+  ENDFOREACH ()
+  LIST ( REMOVE_DUPLICATES OpenEXR_LIBRARY_DIRS )
 
-  # SET( Openexr_ILMIMF_LIBRARY ${OPENEXR_ILMIMF_LIBRARY_PATH} CACHE STRING "Openexr's IlmImf library")
+  # Configure imported target
 
-ENDIF ( OPENEXR_FOUND )
+  FOREACH ( COMPONENT ${OpenEXR_FIND_COMPONENTS} )
+    IF ( NOT TARGET OpenEXR::${COMPONENT} )
+      ADD_LIBRARY ( OpenEXR::${COMPONENT} UNKNOWN IMPORTED )
+      SET_TARGET_PROPERTIES ( OpenEXR::${COMPONENT} PROPERTIES
+        IMPORTED_LOCATION "${OpenEXR_${COMPONENT}_LIBRARY}"
+        INTERFACE_COMPILE_OPTIONS "${OpenEXR_DEFINITIONS}"
+        INTERFACE_INCLUDE_DIRECTORIES "${OpenEXR_INCLUDE_DIRS}"
+      )
+    ENDIF ()
+  ENDFOREACH ()
+ELSEIF ( OpenEXR_FIND_REQUIRED )
+  MESSAGE ( FATAL_ERROR "Unable to find OpenEXR" )
+ENDIF ()
diff --git a/cmake/FindOpenVDB.cmake b/cmake/FindOpenVDB.cmake
index 33afe116f..c0a8398d7 100644
--- a/cmake/FindOpenVDB.cmake
+++ b/cmake/FindOpenVDB.cmake
@@ -1,4 +1,4 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
 #
 # All rights reserved. This software is distributed under the
 # Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
@@ -24,75 +24,262 @@
 # IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
 # LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
 #
+#[=======================================================================[.rst:
 
-# -*- cmake -*-
-# - Find OpenVDB
-#
-# Author : Fredrik Salomonsson fredriks@d2.com
-#
-# OpenVDB_FOUND                 Set if OpenVDB is found.
-# OpenVDB_INCLUDE_DIR           OpenVDB's include directory
-# OpenVDB_LIBRARY_DIR           OpenVDB's library directory
-# OpenVDB_<C>_LIBRARY           Specific openvdb library (<C> is upper-case)
-# OpenVDB_LIBRARIES             All openvdb libraries
-# OpenVDB_MAJOR_VERSION         Major version number
-# OpenVDB_MINOR_VERSION         Minor version number
-# OpenVDB_PATCH_VERSION         Patch version number
-#
-# This module read hints about search locations from variables::
-#
-# OPENVDB_ROOT                  Preferred installtion prefix
+FindOpenVDB
+---------
+
+Find OpenVDB include dirs and libraries
+
+Use this module by invoking find_package with the form::
+
+  find_package(OpenVDB
+    [version] [EXACT]      # Minimum or EXACT version
+    [REQUIRED]             # Fail with error if OpenVDB is not found
+    [COMPONENTS <libs>...] # OpenVDB libraries by their canonical name
+                           # e.g. "IlmImf" for "libIlmImf"
+    )
+
+IMPORTED Targets
+^^^^^^^^^^^^^^^^
+
+``OpenVDB::openvdb``
+  The core openvdb library target.
+``OpenVDB::pyopenvdb``
+  The python openvdb library target.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This will define the following variables:
+
+``OpenVDB_FOUND``
+  True if the system has the OpenVDB library.
+``OpenVDB_VERSION``
+  The version of the OpenVDB library which was found.
+``OpenVDB_INCLUDE_DIRS``
+  Include directories needed to use OpenVDB.
+``OpenVDB_LIBRARIES``
+  Libraries needed to link to OpenVDB.
+``OpenVDB_LIBRARY_DIRS``
+  OpenVDB library directories.
+``OpenVDB_DEFINITIONS``
+  Definitions to use when compiling code that uses OpenVDB.
+``OpenVDB_{COMPONENT}_FOUND``
+  True if the system has the named OpenVDB component.
+
+Cache Variables
+^^^^^^^^^^^^^^^
+
+The following cache variables may also be set:
+
+``OpenVDB_INCLUDE_DIR``
+  The directory containing ``OpenVDB/config-auto.h``.
+``OpenVDB_{COMPONENT}_LIBRARY``
+  Individual component libraries for OpenVDB
+
+Hints
+^^^^^^^^^^^^^^^
+
+Instead of explicitly setting the cache variables, the following variables
+may be provided to tell this module where to look.
+
+``OPENVDB_ROOT``
+  Preferred installation prefix.
+``OPENVDB_INCLUDEDIR``
+  Preferred include directory e.g. <prefix>/include
+``OPENVDB_LIBRARYDIR``
+  Preferred library directory e.g. <prefix>/lib
+``SYSTEM_LIBRARY_PATHS``
+  Paths appended to all include and lib searches.
+
+#]=======================================================================]
+
+MARK_AS_ADVANCED (
+  OpenVDB_INCLUDE_DIR
+  OpenVDB_LIBRARY
+  OPENVDB_NAMESPACE_VERSIONING
+)
+
+SET ( _OPENVDB_COMPONENT_LIST
+  openvdb
+  )
+
+IF ( OpenVDB_FIND_COMPONENTS )
+  SET ( OPENVDB_COMPONENTS_PROVIDED TRUE )
+  SET ( _IGNORED_COMPONENTS "" )
+  FOREACH ( COMPONENT ${OpenVDB_FIND_COMPONENTS} )
+    IF ( NOT ${COMPONENT} IN_LIST _OPENVDB_COMPONENT_LIST )
+      LIST ( APPEND _IGNORED_COMPONENTS ${COMPONENT} )
+    ENDIF ()
+  ENDFOREACH()
+
+  IF ( _IGNORED_COMPONENTS )
+    MESSAGE ( STATUS "Ignoring unknown components of OpenVDB:" )
+    FOREACH ( COMPONENT ${_IGNORED_COMPONENTS} )
+      MESSAGE ( STATUS "  ${COMPONENT}" )
+    ENDFOREACH ()
+    LIST ( REMOVE_ITEM OpenVDB_FIND_COMPONENTS ${_IGNORED_COMPONENTS} )
+  ENDIF ()
+ELSE ()
+  SET ( OPENVDB_COMPONENTS_PROVIDED FALSE )
+  SET ( OpenVDB_FIND_COMPONENTS ${_OPENVDB_COMPONENT_LIST} )
+ENDIF ()
+
+# Append OPENVDB_ROOT or $ENV{OPENVDB_ROOT} if set (prioritize the direct cmake var)
+SET ( _OPENVDB_ROOT_SEARCH_DIR "" )
+
+IF ( OPENVDB_ROOT )
+  LIST ( APPEND _OPENVDB_ROOT_SEARCH_DIR ${OPENVDB_ROOT} )
+ELSE ()
+  SET ( _ENV_OPENVDB_ROOT $ENV{OPENVDB_ROOT} )
+  IF ( _ENV_OPENVDB_ROOT )
+    LIST ( APPEND _OPENVDB_ROOT_SEARCH_DIR ${_ENV_OPENVDB_ROOT} )
+  ENDIF ()
+ENDIF ()
 
-FIND_PACKAGE( PackageHandleStandardArgs )
+# Additionally try and use pkconfig to find OpenVDB
 
-FIND_PATH( OPENVDB_LOCATION include/openvdb/version.h
-  "$ENV{OPENVDB_ROOT}"
+FIND_PACKAGE ( PkgConfig )
+PKG_CHECK_MODULES ( PC_OpenVDB QUIET openvdb )
+
+# ------------------------------------------------------------------------
+#  Search for OpenVDB include DIR
+# ------------------------------------------------------------------------
+
+SET ( _OPENVDB_INCLUDE_SEARCH_DIRS "" )
+LIST ( APPEND _OPENVDB_INCLUDE_SEARCH_DIRS
+  ${OPENVDB_INCLUDEDIR}
+  ${_OPENVDB_ROOT_SEARCH_DIR}
+  ${PC_OpenVDB_INCLUDE_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
+  )
+
+# Look for a standard OpenVDB header file.
+FIND_PATH ( OpenVDB_INCLUDE_DIR openvdb/version.h
   NO_DEFAULT_PATH
-  NO_SYSTEM_ENVIRONMENT_PATH
-  PATHS ${SYSTEM_LIBRARY_PATHS}
+  PATHS ${_OPENVDB_INCLUDE_SEARCH_DIRS}
+  PATH_SUFFIXES include
   )
 
-FIND_PACKAGE_HANDLE_STANDARD_ARGS( OpenVDB
-  REQUIRED_VARS OPENVDB_LOCATION
+IF ( EXISTS "${OpenVDB_INCLUDE_DIR}/openvdb/version.h" )
+  SET ( OPENVDB_VERSION_FILE ${OpenVDB_INCLUDE_DIR}/openvdb/version.h )
+  FILE ( STRINGS "${OPENVDB_VERSION_FILE}" openvdb_version_str
+    REGEX "^#define[\t ]+OPENVDB_LIBRARY_MAJOR_VERSION_NUMBER[\t ]+.*"
+    )
+  STRING ( REGEX REPLACE "^.*OPENVDB_LIBRARY_MAJOR_VERSION_NUMBER[\t ]+([0-9]*).*$" "\\1"
+    OpenVDB_MAJOR_VERSION "${openvdb_version_str}"
+    )
+
+  FILE ( STRINGS "${OPENVDB_VERSION_FILE}" openvdb_version_str
+    REGEX "^#define[\t ]+OPENVDB_LIBRARY_MINOR_VERSION_NUMBER[\t ]+.*"
+    )
+  STRING ( REGEX REPLACE "^.*OPENVDB_LIBRARY_MINOR_VERSION_NUMBER[\t ]+([0-9]*).*$" "\\1"
+    OpenVDB_MINOR_VERSION "${openvdb_version_str}"
+    )
+
+  FILE ( STRINGS "${OPENVDB_VERSION_FILE}" openvdb_version_str
+    REGEX "^#define[\t ]+OPENVDB_LIBRARY_PATCH_VERSION_NUMBER[\t ]+.*"
+    )
+  STRING ( REGEX REPLACE "^.*OPENVDB_LIBRARY_PATCH_VERSION_NUMBER[\t ]+([0-9]*).*$" "\\1"
+    OpenVDB_PATCH_VERSION "${openvdb_version_str}"
+    )
+  UNSET ( openvdb_version_str )
+  UNSET ( OPENVDB_VERSION_FILE )
+  SET ( OpenVDB_VERSION ${OpenVDB_MAJOR_VERSION}.${OpenVDB_MINOR_VERSION}.${OpenVDB_PATCH_VERSION} )
+ENDIF ()
+
+# ------------------------------------------------------------------------
+#  Search for OPENVDB lib DIR
+# ------------------------------------------------------------------------
+
+SET ( _OPENVDB_LIBRARYDIR_SEARCH_DIRS "" )
+
+# Append to _OPENVDB_LIBRARYDIR_SEARCH_DIRS in priority order
+
+LIST ( APPEND _OPENVDB_LIBRARYDIR_SEARCH_DIRS
+  ${OPENVDB_LIBRARYDIR}
+  ${_OPENVDB_ROOT_SEARCH_DIR}
+  ${PC_OpenVDB_LIBRARY_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
   )
 
-IF( OpenVDB_FOUND )
-  SET( OpenVDB_INCLUDE_DIR ${OPENVDB_LOCATION}/include
-    CACHE PATH "OpenVDB include directory")
+# Build suffix directories
+
+SET ( OPENVDB_PATH_SUFFIXES
+  lib64
+  lib
+)
+
+SET ( _OPENVDB_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES} )
+set ( OpenVDB_LIB_COMPONENTS "" )
 
-  SET( OpenVDB_LIBRARY_DIR ${OPENVDB_LOCATION}/lib
-    CACHE PATH "OpenVDB library directory" )
+FOREACH ( COMPONENT ${OpenVDB_FIND_COMPONENTS} )
+  IF ( OPENVDB_USE_STATIC_LIBS )
+    IF ( UNIX )
+      SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".a" )
+    ENDIF ()
+  ENDIF ()
 
-  FIND_LIBRARY( OpenVDB_OPENVDB_LIBRARY openvdb
-    PATHS ${OpenVDB_LIBRARY_DIR}
+  SET ( LIB_NAME ${COMPONENT} )
+  FIND_LIBRARY ( OpenVDB_${COMPONENT}_LIBRARY ${LIB_NAME}
     NO_DEFAULT_PATH
-    NO_SYSTEM_ENVIRONMENT_PATH
+    PATHS ${_OPENVDB_LIBRARYDIR_SEARCH_DIRS}
+    PATH_SUFFIXES ${OPENVDB_PATH_SUFFIXES}
     )
+  LIST ( APPEND OpenVDB_LIB_COMPONENTS ${OpenVDB_${COMPONENT}_LIBRARY} )
+
+  IF ( OpenVDB_${COMPONENT}_LIBRARY )
+    SET ( OpenVDB_${COMPONENT}_FOUND TRUE )
+  ELSE ()
+    SET ( OpenVDB_${COMPONENT}_FOUND FALSE )
+  ENDIF ()
+ENDFOREACH ()
+
+# reset lib suffix
+
+SET ( CMAKE_FIND_LIBRARY_SUFFIXES ${_OPENVDB_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES} )
+
+# ------------------------------------------------------------------------
+#  Cache and set OPENVDB_FOUND
+# ------------------------------------------------------------------------
+
+INCLUDE ( FindPackageHandleStandardArgs )
+FIND_PACKAGE_HANDLE_STANDARD_ARGS ( OpenVDB
+  FOUND_VAR OpenVDB_FOUND
+  REQUIRED_VARS
+    OpenVDB_INCLUDE_DIR
+    OpenVDB_LIB_COMPONENTS
+  VERSION_VAR OpenVDB_VERSION
+  HANDLE_COMPONENTS
+)
+
+IF ( OpenVDB_FOUND )
+  SET ( OpenVDB_LIBRARIES
+    ${OpenVDB_LIB_COMPONENTS}
+  )
+  SET ( OpenVDB_INCLUDE_DIRS ${OpenVDB_INCLUDE_DIR} )
+  SET ( OpenVDB_DEFINITIONS ${PC_OpenVDB_CFLAGS_OTHER} )
+
+  SET ( OpenVDB_LIBRARY_DIRS "" )
+  FOREACH ( LIB ${OpenVDB_LIB_COMPONENTS} )
+    GET_FILENAME_COMPONENT ( _OPENVDB_LIBDIR ${LIB} DIRECTORY )
+    LIST ( APPEND OpenVDB_LIBRARY_DIRS ${_OPENVDB_LIBDIR} )
+  ENDFOREACH ()
+  LIST ( REMOVE_DUPLICATES OpenVDB_LIBRARY_DIRS )
+
+  # Configure imported target
 
-  SET( OpenVDB_LIBRARIES "")
-  LIST( APPEND OpenVDB_LIBRARIES ${OpenVDB_OPENVDB_LIBRARY} )
-
-  SET( OPENVDB_VERSION_FILE ${OpenVDB_INCLUDE_DIR}/openvdb/version.h )
-
-  FILE( STRINGS "${OPENVDB_VERSION_FILE}" openvdb_major_version_str
-    REGEX "^#define[\t ]+OPENVDB_LIBRARY_MAJOR_VERSION_NUMBER[\t ]+.*")
-  FILE( STRINGS "${OPENVDB_VERSION_FILE}" openvdb_minor_version_str
-    REGEX "^#define[\t ]+OPENVDB_LIBRARY_MINOR_VERSION_NUMBER[\t ]+.*")
-  FILE( STRINGS "${OPENVDB_VERSION_FILE}" openvdb_patch_version_str
-    REGEX "^#define[\t ]+OPENVDB_LIBRARY_PATCH_VERSION_NUMBER[\t ]+.*")
-
-  STRING( REGEX REPLACE "^.*OPENVDB_LIBRARY_MAJOR_VERSION_NUMBER[\t ]+([0-9]*).*$" "\\1"
-    _openvdb_major_version_number "${openvdb_major_version_str}")
-  STRING( REGEX REPLACE "^.*OPENVDB_LIBRARY_MINOR_VERSION_NUMBER[\t ]+([0-9]*).*$" "\\1"
-    _openvdb_minor_version_number "${openvdb_minor_version_str}")
-  STRING( REGEX REPLACE "^.*OPENVDB_LIBRARY_PATCH_VERSION_NUMBER[\t ]+([0-9]*).*$" "\\1"
-    _openvdb_patch_version_number "${openvdb_patch_version_str}")
-
-  SET( OpenVDB_MAJOR_VERSION ${_openvdb_major_version_number}
-    CACHE STRING "OpenVDB major version number" )
-  SET( OpenVDB_MINOR_VERSION ${_openvdb_minor_version_number}
-    CACHE STRING "OpenVDB minor version number" )
-  SET( OpenVDB_PATCH_VERSION ${_openvdb_patch_version_number}
-    CACHE STRING "OpenVDB patch version number" )
-
-ENDIF( OpenVDB_FOUND )
+  FOREACH ( COMPONENT ${OpenVDB_FIND_COMPONENTS} )
+    IF ( NOT TARGET OpenVDB::${COMPONENT} )
+      ADD_LIBRARY ( OpenVDB::${COMPONENT} UNKNOWN IMPORTED )
+      SET_TARGET_PROPERTIES ( OpenVDB::${COMPONENT} PROPERTIES
+        IMPORTED_LOCATION "${OpenVDB_${COMPONENT}_LIBRARY}"
+        INTERFACE_COMPILE_OPTIONS "${OpenVDB_DEFINITIONS}"
+        INTERFACE_INCLUDE_DIRECTORIES "${OpenVDB_INCLUDE_DIR}"
+      )
+    ENDIF ()
+  ENDFOREACH ()
+ELSEIF ( OpenVDB_FIND_REQUIRED )
+  MESSAGE ( FATAL_ERROR "Unable to find OpenVDB" )
+ENDIF ()
diff --git a/cmake/FindTBB.cmake b/cmake/FindTBB.cmake
index d0c60b4b1..f751e4af8 100644
--- a/cmake/FindTBB.cmake
+++ b/cmake/FindTBB.cmake
@@ -1,4 +1,4 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
 #
 # All rights reserved. This software is distributed under the
 # Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
@@ -24,113 +24,296 @@
 # IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
 # LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
 #
+#[=======================================================================[.rst:
 
-#-*-cmake-*-
-# - Find TBB
-#
-# Author : Nicholas Yue yue.nicholas@gmail.com
-#
-# This auxiliary CMake file helps in find the TBB headers and libraries
-#
-# TBB_FOUND                  set if TBB is found.
-# TBB_INCLUDE_DIR            TBB's include directory
-# TBB_tbb_LIBRARY            TBB libraries
-# TBB_tbb_preview_LIBRARY    TBB_preview libraries (Mulitple Rendering Context)
-# TBB_tbbmalloc_LIBRARY      TBBmalloc libraries (Mulitple Rendering Context)
+FindTBB
+---------
+
+Find Tbb include dirs and libraries
+
+Use this module by invoking find_package with the form::
+
+  find_package(TBB
+    [version] [EXACT]      # Minimum or EXACT version
+    [REQUIRED]             # Fail with error if Tbb is not found
+    [COMPONENTS <libs>...] # Tbb libraries by their canonical name
+                           # e.g. "tbb" for "libtbb"
+    )
+
+IMPORTED Targets
+^^^^^^^^^^^^^^^^
+
+``TBB::tbb``
+  The tbb library target.
+``TBB::tbbmalloc``
+  The tbbmalloc library target.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This will define the following variables:
+
+``Tbb_FOUND``
+  True if the system has the Tbb library.
+``Tbb_VERSION``
+  The version of the Tbb library which was found.
+``Tbb_INCLUDE_DIRS``
+  Include directories needed to use Tbb.
+``Tbb_LIBRARIES``
+  Libraries needed to link to Tbb.
+``Tbb_LIBRARY_DIRS``
+  Tbb library directories.
+``TBB_{COMPONENT}_FOUND``
+  True if the system has the named TBB component.
+
+Cache Variables
+^^^^^^^^^^^^^^^
+
+The following cache variables may also be set:
+
+``Tbb_INCLUDE_DIR``
+  The directory containing ``tbb/tbb_stddef.h``.
+``Tbb_{COMPONENT}_LIBRARY``
+  Individual component libraries for Tbb
+
+Hints
+^^^^^^^^^^^^^^^
+
+Instead of explicitly setting the cache variables, the following variables
+may be provided to tell this module where to look.
+
+``TBB_ROOT``
+  Preferred installation prefix.
+``TBB_INCLUDEDIR``
+  Preferred include directory e.g. <prefix>/include
+``TBB_LIBRARYDIR``
+  Preferred library directory e.g. <prefix>/lib
+``SYSTEM_LIBRARY_PATHS``
+  Paths appended to all include and lib searches.
+
+#]=======================================================================]
+
+MARK_AS_ADVANCED (
+  Tbb_INCLUDE_DIR
+  Tbb_LIBRARY
+)
+
+SET ( _TBB_COMPONENT_LIST
+  tbb
+  tbbmalloc
+  )
+
+IF ( TBB_FIND_COMPONENTS )
+  SET ( _TBB_COMPONENTS_PROVIDED TRUE )
+  SET ( _IGNORED_COMPONENTS "" )
+  FOREACH ( COMPONENT ${TBB_FIND_COMPONENTS} )
+    IF ( NOT ${COMPONENT} IN_LIST _TBB_COMPONENT_LIST )
+      LIST ( APPEND _IGNORED_COMPONENTS ${COMPONENT} )
+    ENDIF ()
+  ENDFOREACH()
+
+  IF ( _IGNORED_COMPONENTS )
+    MESSAGE ( STATUS "Ignoring unknown components of TBB:" )
+    FOREACH ( COMPONENT ${_IGNORED_COMPONENTS} )
+      MESSAGE ( STATUS "  ${COMPONENT}" )
+    ENDFOREACH ()
+    LIST ( REMOVE_ITEM TBB_FIND_COMPONENTS ${_IGNORED_COMPONENTS} )
+  ENDIF ()
+ELSE ()
+  SET ( _TBB_COMPONENTS_PROVIDED FALSE )
+  SET ( TBB_FIND_COMPONENTS ${_TBB_COMPONENT_LIST} )
+ENDIF ()
+
+# Append TBB_ROOT or $ENV{TBB_ROOT} if set (prioritize the direct cmake var)
+SET ( _TBB_ROOT_SEARCH_DIR "" )
+
+IF ( TBB_ROOT )
+  LIST ( APPEND _TBB_ROOT_SEARCH_DIR ${TBB_ROOT} )
+ELSE ()
+  SET ( _ENV_TBB_ROOT $ENV{TBB_ROOT} )
+  IF ( _ENV_TBB_ROOT )
+    LIST ( APPEND _TBB_ROOT_SEARCH_DIR ${_ENV_TBB_ROOT} )
+  ENDIF ()
+ENDIF ()
+
+# Additionally try and use pkconfig to find Tbb
+
+FIND_PACKAGE ( PkgConfig )
+PKG_CHECK_MODULES ( PC_Tbb QUIET tbb )
 
-FIND_PACKAGE ( PackageHandleStandardArgs )
+# ------------------------------------------------------------------------
+#  Search for tbb include DIR
+# ------------------------------------------------------------------------
 
-# SET ( TBB_FOUND FALSE )
+SET ( _TBB_INCLUDE_SEARCH_DIRS "" )
+LIST ( APPEND _TBB_INCLUDE_SEARCH_DIRS
+  ${TBB_INCLUDEDIR}
+  ${_TBB_ROOT_SEARCH_DIR}
+  ${PC_Tbb_INCLUDE_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
+  )
 
-FIND_PATH( TBB_LOCATION include/tbb/tbb.h
-  "$ENV{TBB_ROOT}"
+# Look for a standard tbb header file.
+FIND_PATH ( Tbb_INCLUDE_DIR tbb/tbb_stddef.h
   NO_DEFAULT_PATH
-  NO_CMAKE_ENVIRONMENT_PATH
-  NO_CMAKE_PATH
-  NO_SYSTEM_ENVIRONMENT_PATH
-  NO_CMAKE_SYSTEM_PATH
-  PATHS ${SYSTEM_LIBRARY_PATHS}
+  PATHS ${_TBB_INCLUDE_SEARCH_DIRS}
+  PATH_SUFFIXES include
   )
 
-FIND_PACKAGE_HANDLE_STANDARD_ARGS ( TBB
-  REQUIRED_VARS TBB_LOCATION
+IF ( EXISTS "${Tbb_INCLUDE_DIR}/tbb/tbb_stddef.h" )
+    FILE ( STRINGS "${Tbb_INCLUDE_DIR}/tbb/tbb_stddef.h"
+      _tbb_version_major_string REGEX "#define TBB_VERSION_MAJOR "
+      )
+    STRING ( REGEX REPLACE "#define TBB_VERSION_MAJOR" ""
+      _tbb_version_major_string "${_tbb_version_major_string}"
+      )
+    STRING ( STRIP "${_tbb_version_major_string}" Tbb_VERSION_MAJOR )
+
+    FILE ( STRINGS "${Tbb_INCLUDE_DIR}/tbb/tbb_stddef.h"
+       _tbb_version_minor_string REGEX "#define TBB_VERSION_MINOR "
+      )
+    STRING ( REGEX REPLACE "#define TBB_VERSION_MINOR" ""
+      _tbb_version_minor_string "${_tbb_version_minor_string}"
+      )
+    STRING ( STRIP "${_tbb_version_minor_string}" Tbb_VERSION_MINOR )
+
+    UNSET ( _tbb_version_major_string )
+    UNSET ( _tbb_version_minor_string )
+
+    SET ( Tbb_VERSION ${Tbb_VERSION_MAJOR}.${Tbb_VERSION_MINOR} )
+ENDIF ()
+
+# ------------------------------------------------------------------------
+#  Search for TBB lib DIR
+# ------------------------------------------------------------------------
+
+SET ( _TBB_LIBRARYDIR_SEARCH_DIRS "" )
+
+# Append to _TBB_LIBRARYDIR_SEARCH_DIRS in priority order
+
+SET ( _TBB_LIBRARYDIR_SEARCH_DIRS "" )
+LIST ( APPEND _TBB_LIBRARYDIR_SEARCH_DIRS
+  ${TBB_LIBRARYDIR}
+  ${_TBB_ROOT_SEARCH_DIR}
+  ${PC_Tbb_LIBRARY_DIRS}
+  ${SYSTEM_LIBRARY_PATHS}
   )
 
+SET ( TBB_PATH_SUFFIXES
+  lib64
+  lib
+)
+
+SET ( _TBB_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES} )
+set ( Tbb_LIB_COMPONENTS "" )
+
+# platform branching
+
+IF (APPLE)
+  IF (TBB_FOR_CLANG)
+    LIST ( INSERT TBB_PATH_SUFFIXES 0 lib/libc++ )
+  ENDIF ()
+ELSEIF ( WIN32 )
+  IF ( MSVC10 )
+    SET ( TBB_VC_DIR vc10 )
+  ELSEIF ( MSVC11 )
+    SET ( TBB_VC_DIR vc11 )
+  ELSEIF ( MSVC12 )
+    SET ( TBB_VC_DIR vc12 )
+  ENDIF ()
+  LIST ( INSERT TBB_PATH_SUFFIXES 0 lib/intel64/${TBB_VC_DIR} )
+ELSE ()
+  IF ( ${CMAKE_CXX_COMPILER_ID} STREQUAL GNU )
+    IF ( TBB_MATCH_COMPILER_VERSION )
+      STRING ( REGEX MATCHALL "[0-9]+" GCC_VERSION_COMPONENTS ${CMAKE_CXX_COMPILER_VERSION} )
+      LIST ( GET GCC_VERSION_COMPONENTS 0 GCC_MAJOR )
+      LIST ( GET GCC_VERSION_COMPONENTS 1 GCC_MINOR )
+      LIST ( INSERT TBB_PATH_SUFFIXES 0 lib/intel64/gcc${GCC_MAJOR}.${GCC_MINOR} )
+    ELSE ()
+      LIST ( INSERT TBB_PATH_SUFFIXES 0 lib/intel64/gcc4.4 )
+    ENDIF ()
+    LIST ( INSERT TBB_PATH_SUFFIXES 1 lib/x86_64-linux-gnu )
+  ENDIF ()
+ENDIF ()
+
+FOREACH ( COMPONENT ${TBB_FIND_COMPONENTS} )
+  # library suffix handling
+  IF ( WIN32 )
+    SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".lib" )
+  ENDIF ()
+
+  IF ( TBB_USE_STATIC_LIBS )
+    IF ( UNIX )
+      SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".a" )
+    ENDIF ()
+  ENDIF ()
+
+  SET ( LIB_NAME ${COMPONENT} )
+  FIND_LIBRARY ( Tbb_${COMPONENT}_LIBRARY ${LIB_NAME}
+    NO_DEFAULT_PATH
+    PATHS ${_TBB_LIBRARYDIR_SEARCH_DIRS}
+    PATH_SUFFIXES ${TBB_PATH_SUFFIXES}
+    )
+  LIST ( APPEND Tbb_LIB_COMPONENTS ${Tbb_${COMPONENT}_LIBRARY} )
+
+  IF ( Tbb_${COMPONENT}_LIBRARY )
+    SET ( TBB_${COMPONENT}_FOUND TRUE )
+  ELSE ()
+    SET ( TBB_${COMPONENT}_FOUND FALSE )
+  ENDIF ()
+ENDFOREACH ()
+
+# reset lib suffix
+
+SET ( CMAKE_FIND_LIBRARY_SUFFIXES ${_TBB_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES})
+
+# ------------------------------------------------------------------------
+#  Cache and set TBB_FOUND
+# ------------------------------------------------------------------------
+
+INCLUDE ( FindPackageHandleStandardArgs )
+FIND_PACKAGE_HANDLE_STANDARD_ARGS ( TBB
+  FOUND_VAR TBB_FOUND
+  REQUIRED_VARS
+    Tbb_INCLUDE_DIR
+    Tbb_LIB_COMPONENTS
+  VERSION_VAR Tbb_VERSION
+  HANDLE_COMPONENTS
+)
+
 IF ( TBB_FOUND )
+  SET ( Tbb_LIBRARIES
+    ${Tbb_LIB_COMPONENTS}
+  )
+  SET ( Tbb_INCLUDE_DIRS ${Tbb_INCLUDE_DIR} )
+  SET ( Tbb_DEFINITIONS ${PC_Tbb_CFLAGS_OTHER} )
+
+  SET ( Tbb_LIBRARY_DIRS "" )
+  FOREACH ( LIB ${Tbb_LIB_COMPONENTS} )
+    GET_FILENAME_COMPONENT ( _TBB_LIBDIR ${LIB} DIRECTORY )
+    LIST ( APPEND Tbb_LIBRARY_DIRS ${_TBB_LIBDIR} )
+  ENDFOREACH ()
+  LIST ( REMOVE_DUPLICATES Tbb_LIBRARY_DIRS )
+
+  # CMake sometimes struggles to follow TBB's imported target, as libtbb.so
+  # is usually just a file which defines "INPUT (libtbb.so.2)". As it's not
+  # a symlink, we need to include this directory manually incase it's not on
+  # the environment library path
+
+  LINK_DIRECTORIES ( ${Tbb_LIBRARY_DIRS} )
+
+  # Configure imported targets
 
-  SET( TBB_INCLUDE_DIR "${TBB_LOCATION}/include" CACHE STRING "TBB include directory")
-
-  IF (APPLE)
-	IF (TBB_FOR_CLANG)
-      SET ( TBB_LIBRARYDIR ${TBB_LOCATION}/lib/libc++ CACHE STRING "TBB library directory")
-	ELSE ()
-      SET ( TBB_LIBRARYDIR ${TBB_LOCATION}/lib CACHE STRING "TBB library directory")
-	ENDIF ()
-	SET(CMAKE_FIND_LIBRARY_SUFFIXES ".dylib")
-	FIND_LIBRARY ( TBB_LIBRARY_PATH tbb PATHS ${TBB_LIBRARYDIR} )
-	FIND_LIBRARY ( TBB_PREVIEW_LIBRARY_PATH tbb_preview PATHS ${TBB_LIBRARYDIR} )
-	FIND_LIBRARY ( TBBMALLOC_LIBRARY_PATH tbbmalloc PATHS ${TBB_LIBRARYDIR} )
-	LIST ( APPEND TBB_LIBRARIES_LIST ${TBB_LIBRARY_PATH} ${TBBmx_LIBRARY_PATH} )
-  ELSEIF (WIN32)
-	IF (MSVC10)
-      SET ( TBB_VC_DIR vc10 )
-	ELSEIF (MSVC11)
-      SET ( TBB_VC_DIR vc11 )
-	ELSEIF (MSVC12)
-      SET ( TBB_VC_DIR vc12 )
-	ENDIF ( MSVC10)
-	#  MESSAGE ( "TBB_VC_DIR = ${TBB_VC_DIR}" )
-	SET (TBB_PATH_SUFFIXES intel64/${TBB_VC_DIR} )
-	FIND_LIBRARY ( TBB_LIBRARY_PATH tbb PATHS ${TBB_LIBRARYDIR} PATH_SUFFIXES ${TBB_PATH_SUFFIXES})
-	FIND_LIBRARY ( TBB_PREVIEW_LIBRARY_PATH tbb_preview PATHS ${TBB_LIBRARYDIR}  PATH_SUFFIXES ${TBB_PATH_SUFFIXES})
-	FIND_LIBRARY ( TBBMALLOC_LIBRARY_PATH tbbmalloc PATHS ${TBB_LIBRARYDIR}  PATH_SUFFIXES ${TBB_PATH_SUFFIXES})
-	LIST ( APPEND TBB_LIBRARIES_LIST ${TBB_LIBRARY_PATH} ${TBBmx_LIBRARY_PATH} )
-  ELSE (APPLE)
-	# MESSAGE ( "CMAKE_COMPILER_IS_GNUCXX = ${CMAKE_COMPILER_IS_GNUCXX}")
-    SET ( TBB_LIBRARYDIR ${TBB_LOCATION}/lib CACHE STRING "TBB library directory")
-	IF (${CMAKE_COMPILER_IS_GNUCXX})
-	  IF ( TBB_MATCH_COMPILER_VERSION )
-		STRING(REGEX MATCHALL "[0-9]+" GCC_VERSION_COMPONENTS ${CMAKE_CXX_COMPILER_VERSION})
-		LIST(GET GCC_VERSION_COMPONENTS 0 GCC_MAJOR)
-		LIST(GET GCC_VERSION_COMPONENTS 1 GCC_MINOR)
-		# MESSAGE(STATUS ${GCC_MAJOR})
-		# MESSAGE(STATUS ${GCC_MINOR})
-		# MESSAGE ( "TBB CMAKE_CXX_COMPILER_VERSION = ${CMAKE_CXX_COMPILER_VERSION}")
-		SET ( TBB_PATH_SUFFIXES intel64/gcc${GCC_MAJOR}.${GCC_MINOR} x86_64-linux-gnu )
-	  ELSE ()
-		SET ( TBB_PATH_SUFFIXES intel64/gcc4.4 x86_64-linux-gnu )
-	  ENDIF ()
-	ELSE ()
-      MESSAGE ( FATAL_ERROR "Can't handle non-GCC compiler")
-	ENDIF ()
-	FIND_LIBRARY ( TBB_LIBRARY_PATH tbb PATHS ${TBB_LIBRARYDIR} PATH_SUFFIXES ${TBB_PATH_SUFFIXES}
-      NO_DEFAULT_PATH
-      NO_CMAKE_ENVIRONMENT_PATH
-      NO_CMAKE_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-      NO_CMAKE_SYSTEM_PATH
-	  )
-	FIND_LIBRARY ( TBB_PREVIEW_LIBRARY_PATH tbb_preview PATHS ${TBB_LIBRARYDIR} PATH_SUFFIXES ${TBB_PATH_SUFFIXES}
-      NO_DEFAULT_PATH
-      NO_CMAKE_ENVIRONMENT_PATH
-      NO_CMAKE_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-      NO_CMAKE_SYSTEM_PATH
-	  )
-	FIND_LIBRARY ( TBBMALLOC_LIBRARY_PATH tbbmalloc PATHS ${TBB_LIBRARYDIR} PATH_SUFFIXES ${TBB_PATH_SUFFIXES}
-      NO_DEFAULT_PATH
-      NO_CMAKE_ENVIRONMENT_PATH
-      NO_CMAKE_PATH
-      NO_SYSTEM_ENVIRONMENT_PATH
-      NO_CMAKE_SYSTEM_PATH
-	  )
-	LIST ( APPEND TBB_LIBRARIES_LIST ${TBB_LIBRARY_PATH} ${TBBmx_LIBRARY_PATH} )
-  ENDIF (APPLE)
-
-  GET_FILENAME_COMPONENT ( TBB_LIBRARYDIR ${TBB_LIBRARY_PATH} PATH CACHE )
-
-  SET( Tbb_TBB_LIBRARY ${TBB_LIBRARY_PATH} CACHE STRING "tbb library")
-  SET( Tbb_TBB_PREVIEW_LIBRARY ${TBB_PREVIEW_LIBRARY_PATH} CACHE STRING "tbb_preview library")
-  SET( Tbb_TBBMALLOC_LIBRARY ${TBBMALLOC_LIBRARY_PATH} CACHE STRING "tbbmalloc library")
-
-ENDIF ( TBB_FOUND )
+  FOREACH ( COMPONENT ${TBB_FIND_COMPONENTS} )
+    IF ( NOT TARGET TBB::${COMPONENT} )
+      ADD_LIBRARY ( TBB::${COMPONENT} UNKNOWN IMPORTED )
+      SET_TARGET_PROPERTIES ( TBB::${COMPONENT} PROPERTIES
+        IMPORTED_LOCATION "${Tbb_${COMPONENT}_LIBRARY}"
+        INTERFACE_COMPILE_OPTIONS "${Tbb_DEFINITIONS}"
+        INTERFACE_INCLUDE_DIRECTORIES "${Tbb_INCLUDE_DIR}"
+      )
+    ENDIF ()
+  ENDFOREACH ()
+ELSEIF ( TBB_FIND_REQUIRED )
+  MESSAGE ( FATAL_ERROR "Unable to find TBB")
+ENDIF ()
diff --git a/cmake/OpenVDBGLFW3Setup.cmake b/cmake/OpenVDBGLFW3Setup.cmake
new file mode 100644
index 000000000..8ecdf9ec0
--- /dev/null
+++ b/cmake/OpenVDBGLFW3Setup.cmake
@@ -0,0 +1,108 @@
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
+#
+# All rights reserved. This software is distributed under the
+# Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
+#
+# Redistributions of source code must retain the above copyright
+# and license notice and the following restrictions and disclaimer.
+#
+# *     Neither the name of DreamWorks Animation nor the names of
+# its contributors may be used to endorse or promote products derived
+# from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+# IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
+# LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
+#
+#[=======================================================================[.rst:
+
+OpenVDBGLFW3Setup
+---------
+
+Wraps the call the FindPackage ( glfw3 ) for OpenVDB builds. Provides
+some extra options for finding the glfw3 installation without polluting
+the OpenVDB Binaries cmake.
+
+Use this module by invoking include with the form::
+
+  include ( OpenVDBGLFW3Setup )
+
+IMPORTED Targets
+^^^^^^^^^^^^^^^^
+
+``glfw``
+  The glfw3 library target.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This will define the following variables:
+
+``glfw3_FOUND``
+  True if the system has glfw3 installed.
+``glfw3_VERSION``
+  The version of the glfw3 library which was found.
+
+Hints
+^^^^^^^^^^^^^^^
+
+The following variables may be provided to tell this module where to look.
+
+``GLFW3_ROOT``
+  Preferred installation prefix.
+
+#]=======================================================================]
+
+# Find the glfw3 installation and use glfw's CMake to initialize
+# the glfw lib
+
+SET ( _GLFW3_ROOT_SEARCH_DIR "" )
+
+IF ( GLFW3_ROOT )
+  LIST ( APPEND _GLFW3_ROOT_SEARCH_DIR ${GLFW3_ROOT} )
+ELSE ()
+  SET ( _ENV_GLFW_ROOT $ENV{GLFW3_ROOT} )
+  IF ( _ENV_GLFW_ROOT )
+    LIST ( APPEND _GLFW3_ROOT_SEARCH_DIR ${_ENV_GLFW_ROOT} )
+  ENDIF ()
+ENDIF ()
+
+# Additionally try and use pkconfig to find glfw, though we only use
+# pkg-config to re-direct to the cmake. In other words, glfw's cmake is
+# expected to be installed
+FIND_PACKAGE ( PkgConfig )
+PKG_CHECK_MODULES ( PC_glfw3 QUIET glfw3 )
+
+IF ( PC_glfw3_FOUND )
+  FOREACH ( DIR ${PC_glfw3_LIBRARY_DIRS} )
+    LIST ( APPEND _GLFW3_ROOT_SEARCH_DIR ${DIR} )
+  ENDFOREACH ()
+ENDIF ()
+
+FIND_PATH ( GLFW3_CMAKE_LOCATION glfw3Config.cmake
+  NO_DEFAULT_PATH
+  PATHS ${_GLFW3_ROOT_SEARCH_DIR}
+  PATH_SUFFIXES lib/cmake/glfw3 cmake/glfw3 glfw3
+  )
+
+IF ( GLFW3_CMAKE_LOCATION )
+  LIST ( APPEND CMAKE_PREFIX_PATH "${GLFW3_CMAKE_LOCATION}" )
+ENDIF ()
+
+FIND_PACKAGE ( glfw3 ${MINIMUM_GLFW_VERSION} REQUIRED )
+
+FIND_PACKAGE ( PackageHandleStandardArgs )
+FIND_PACKAGE_HANDLE_STANDARD_ARGS ( glfw3
+  REQUIRED_VARS glfw3_DIR glfw3_FOUND
+  VERSION_VAR glfw3_VERSION
+  )
diff --git a/cmake/OpenVDBHoudiniSetup.cmake b/cmake/OpenVDBHoudiniSetup.cmake
new file mode 100644
index 000000000..a4ef54029
--- /dev/null
+++ b/cmake/OpenVDBHoudiniSetup.cmake
@@ -0,0 +1,236 @@
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
+#
+# All rights reserved. This software is distributed under the
+# Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
+#
+# Redistributions of source code must retain the above copyright
+# and license notice and the following restrictions and disclaimer.
+#
+# *     Neither the name of DreamWorks Animation nor the names of
+# its contributors may be used to endorse or promote products derived
+# from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+# IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
+# LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
+#
+#[=======================================================================[.rst:
+
+OpenVDBHoudiniSetup
+---------
+
+Wraps the call the FindPackage ( Houdini ) for OpenVDB builds. This
+ensures that all dependencies that are included with a Houdini
+distribution are configured to load from that installation.
+
+This CMake searches for the HoudiniConfig.cmake module provided by
+SideFX to configure the OpenVDB Houdini base and DSO libraries. Users
+can provide paths to the location of their Houdini Installation by
+setting HOUDINI_ROOT either as an environment variable or by passing it
+to CMake. This module also reads the value of $HFS, usually set by
+sourcing the Houdini Environment. Note that as long as you provide a
+path to your Houdini Installation you do not need to source the
+Houdini Environment.
+
+Use this module by invoking include with the form::
+
+  include ( OpenVDBHoudiniSetup )
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This will define the following variables:
+
+``Houdini_FOUND``
+  True if the system has Houdini installed.
+``OPENVDB_HOUDINI_ABI``
+  The ABI version that Houdini uses for it's own OpenVDB installation.
+
+A variety of variables will also be set from HoudiniConfig.cmake.
+
+Additionally, the following values are set for all dependent OpenVDB
+builds, ensuring they link against the correct libraries. This may
+overwrite user provided values.
+
+``ZLIB_ROOT``
+``ZLIB_LIBRARY``
+``OPENEXR_INCLUDEDIR``
+``OPENEXR_LIBRARYDIR``
+``ILMBASE_INCLUDEDIR``
+``ILMBASE_LIBRARYDIR``
+``TBB_INCLUDEDIR``
+``TBB_LIBRARYDIR``
+``BLOSC_INCLUDEDIR``
+``BLOSC_LIBRARYDIR``
+
+Hints
+^^^^^^^^^^^^^^^
+
+Instead of explicitly setting the cache variables, the following variables
+may be provided to tell this module where to look.
+
+``ENV{HFS}``
+  Preferred installation prefix.
+``HOUDINI_ROOT``
+  Preferred installation prefix.
+``CMAKE_PREFIX_PATH``
+  Add the location of your Houdini installations CMake to this path.
+
+#]=======================================================================]
+
+# Find the Houdini installation and use Houdini's CMake to initialize
+# the Houdini lib
+
+SET ( _HOUDINI_ROOT_SEARCH_DIR "" )
+
+IF ( HOUDINI_ROOT )
+  LIST ( APPEND _HOUDINI_ROOT_SEARCH_DIR ${HOUDINI_ROOT} )
+ELSE ()
+  SET ( _ENV_HOUDINI_ROOT $ENV{HOUDINI_ROOT} )
+  IF ( _ENV_HOUDINI_ROOT )
+    LIST ( APPEND _HOUDINI_ROOT_SEARCH_DIR ${_ENV_HOUDINI_ROOT} )
+  ENDIF ()
+ENDIF ()
+
+IF ( DEFINED ENV{HFS} )
+  LIST ( APPEND _HOUDINI_ROOT_SEARCH_DIR $ENV{HFS} )
+ENDIF ()
+
+# ------------------------------------------------------------------------
+#  Search for Houdini CMake
+# ------------------------------------------------------------------------
+
+FIND_PATH ( HOUDINI_CMAKE_LOCATION HoudiniConfig.cmake
+  NO_DEFAULT_PATH
+  PATHS ${_HOUDINI_ROOT_SEARCH_DIR}
+  PATH_SUFFIXES toolkit/cmake cmake
+  )
+
+IF ( HOUDINI_CMAKE_LOCATION )
+  LIST ( APPEND CMAKE_PREFIX_PATH "${HOUDINI_CMAKE_LOCATION}" )
+ENDIF ()
+
+FIND_PACKAGE ( Houdini REQUIRED )
+IF ( NOT Houdini_FOUND )
+  MESSAGE ( FATAL_ERROR "Unable to locate Houdini Installation." )
+ENDIF ()
+
+FIND_PACKAGE ( PackageHandleStandardArgs )
+FIND_PACKAGE_HANDLE_STANDARD_ARGS ( Houdini
+  REQUIRED_VARS _houdini_hfs_root Houdini_FOUND
+  VERSION_VAR Houdini_VERSION
+  )
+
+# Additionally link in HoudiniRAY to the imported Houdini target for VRAY_OpenVDB_Points.
+# Note that HoudiniRAY is currently missing from the list of imported Houdini libs
+
+_houdini_create_libraries (
+  PATHS dsolib/libHoudiniRAY.so
+  TARGET_NAMES HoudiniRAY
+  TYPE SHARED
+  )
+
+# ------------------------------------------------------------------------
+#  Configure dependencies
+# ------------------------------------------------------------------------
+
+# Congfigure dependency hints to point to Houdini. Allow for user overriding is custom
+# Houdini installations are in use
+
+# ZLIB
+
+IF ( NOT ZLIB_ROOT )
+  SET ( ZLIB_ROOT ${_houdini_hfs_root}/toolkit/include )
+ENDIF ()
+IF ( NOT ZLIB_LIBRARY )
+  # Full path to zlib library
+  SET ( ZLIB_LIBRARY ${_houdini_hfs_root}/dsolib/libz.so )
+  IF ( NOT EXISTS ${ZLIB_LIBRARY} )
+    MESSAGE ( WARNING "The OpenVDB Houdini CMake setup is unable to locate libz within "
+      "the Houdini installation at: ${_houdini_hfs_root}. OpenVDB may not build correctly."
+      )
+  ENDIF ()
+ENDIF ()
+
+# TBB
+
+IF ( NOT TBB_INCLUDEDIR )
+  SET ( TBB_INCLUDEDIR ${_houdini_hfs_root}/toolkit/include )
+ENDIF ()
+IF ( NOT TBB_LIBRARYDIR )
+  SET ( TBB_LIBRARYDIR ${_houdini_hfs_root}/dsolib )
+ENDIF ()
+
+# Blosc
+
+IF ( NOT BLOSC_INCLUDEDIR )
+  SET ( BLOSC_INCLUDEDIR ${_houdini_hfs_root}/toolkit/include )
+ENDIF ()
+IF ( NOT BLOSC_LIBRARYDIR )
+  SET ( BLOSC_LIBRARYDIR ${_houdini_hfs_root}/dsolib )
+ENDIF ()
+
+# Boost
+
+IF (( Houdini_VERSION_MAJOR LESS 16 ) OR
+  (( Houdini_VERSION_MAJOR EQUAL 16 ) AND ( Houdini_VERSION_MINOR LESS 5 )))
+  IF ( OPENVDB_BUILD_PYTHON_MODULE )
+    # Prior to the introduction of HBoost (Houdini's namespaced and shipped Boost version from 16.5),
+    # we built against Houdini's version of Boost which didn't include Boost.Python
+    SET ( OPENVDB_BUILD_PYTHON_MODULE OFF )
+    MESSAGE ( WARNING "Disabling compilation of the OpenVDB Python module. The python module requires "
+      "Boost.Python which cannot be linked in when building against Houdini Version 16.0 and earlier." )
+  ENDIF ()
+  # Reset boost hints if not set
+  IF ( NOT BOOST_INCLUDEDIR )
+    SET ( BOOST_INCLUDEDIR ${_houdini_hfs_root}/toolkit/include )
+  ENDIF ()
+  IF ( NOT BOOST_LIBRARYDIR )
+    SET ( BOOST_LIBRARYDIR ${_houdini_hfs_root}/dsolib )
+  ENDIF ()
+ENDIF ()
+
+# OpenEXR and ILMBase
+
+IF (( Houdini_VERSION_MAJOR LESS 17 ) OR
+  (( Houdini_VERSION_MAJOR EQUAL 17 ) AND ( Houdini_VERSION_MINOR LESS 5 )))
+  # Prior to 17.5, we needed to use ilmbase and openexr shipped libs from Houdini
+
+  # OpenEXR
+  IF ( NOT OPENEXR_INCLUDEDIR )
+    SET ( OPENEXR_INCLUDEDIR ${_houdini_hfs_root}/toolkit/include )
+  ENDIF ()
+  IF ( NOT OPENEXR_LIBRARYDIR )
+    SET ( OPENEXR_LIBRARYDIR ${_houdini_hfs_root}/dsolib )
+  ENDIF ()
+
+  # ILMBase
+  IF ( NOT ILMBASE_INCLUDEDIR )
+    SET ( ILMBASE_INCLUDEDIR ${_houdini_hfs_root}/toolkit/include )
+  ENDIF ()
+  IF ( NOT ILMBASE_LIBRARYDIR )
+    SET ( ILMBASE_LIBRARYDIR ${_houdini_hfs_root}/dsolib )
+  ENDIF ()
+ENDIF ()
+
+# Explicitly configure the OpenVDB ABI version depending on the Houdini
+# version.
+
+IF ( ( Houdini_VERSION_MAJOR LESS 16 ) OR
+     ( Houdini_VERSION_MAJOR EQUAL 16 ) AND ( Houdini_VERSION_MINOR LESS 5 ) )
+  SET ( OPENVDB_HOUDINI_ABI 3 )
+ELSEIF (Houdini_VERSION_MAJOR LESS 17)
+  SET ( OPENVDB_HOUDINI_ABI 4 )
+ELSE ()
+  SET ( OPENVDB_HOUDINI_ABI 5 )
+ENDIF ()
diff --git a/openvdb/CMakeLists.txt b/openvdb/CMakeLists.txt
index b43e2ebc7..5f0496d39 100644
--- a/openvdb/CMakeLists.txt
+++ b/openvdb/CMakeLists.txt
@@ -24,122 +24,126 @@
 # IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
 # LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
 #
-cmake_minimum_required(VERSION 3.1)
-PROJECT ( OpenVDBCore )
+#[=======================================================================[
 
-set(CMAKE_CXX_STANDARD 11)
+  CMake Configuration for OpenVDB Core
 
-IF ( USE_GLFW3 )
-  FIND_PACKAGE ( GLFW3 REQUIRED )
-  SET ( OPENVDB_USE_GLFW_FLAG "-DOPENVDB_USE_GLFW_3" )
-  IF ( UNIX AND NOT APPLE )
-    SET ( GLFW_DEPENDENT_LIBRARIES "X11;Xi;Xrandr;Xinerama;Xcursor;Xxf86vm" )
-  ENDIF ( UNIX AND NOT APPLE )
-  SET ( GLFW_LINK_LIBRARY ${GLFW3_glfw_LIBRARY} )
-  SET ( GLFW_INCLUDE_DIRECTORY  ${GLFW3_INCLUDE_DIR} CACHE STRING "GLFW3 include directory")
-ELSE ()
-  FIND_PACKAGE ( GLFW REQUIRED )
-  IF ( UNIX AND NOT APPLE )
-    SET ( GLFW_DEPENDENT_LIBRARIES "X11;Xi;Xrandr;Xinerama;Xcursor;Xxf86vm" )
-  ENDIF ()
-  SET ( GLFW_LINK_LIBRARY ${GLFW_glfw_LIBRARY} )
-  SET ( GLFW_INCLUDE_DIRECTORY  ${GLFW_INCLUDE_DIR} CACHE STRING "GLFW include directory")
+#]=======================================================================]
+
+PROJECT ( OpenVDBCore )
+CMAKE_MINIMUM_REQUIRED ( VERSION 3.3 )
+# Monitoring <PackageName>_ROOT variables
+IF ( POLICY CMP0074 )
+  CMAKE_POLICY ( SET CMP0074 NEW )
 ENDIF ()
 
-IF (WIN32)
-  FIND_PACKAGE ( GLEW REQUIRED )
+###### OpenVDB Core Options
+
+OPTION ( OPENVDB_TOOLS_RAYTRACER_USE_EXR [=[Build with -DOPENVDB_TOOLS_RAYTRACER_USE_EXR,"
+linking OpenVDB against OpenEXR and enabling EXR serialization output from OpenVDB's ray
+tarcer.]=] OFF )
+SET ( OPENVDB_LIBRARY_NAME "openvdb" CACHE STRING "The name of the openvdb library to build." )
+
+MARK_AS_ADVANCED (
+  OPENVDB_LIBRARY_NAME
+  )
+
+#########################################################################
+
+MESSAGE ( STATUS "----------------------------------------------------" )
+MESSAGE ( STATUS "------------- Configuring OpenVDBCore --------------" )
+MESSAGE ( STATUS "----------------------------------------------------" )
+
+##########################################################################
+
+# Collect and configure lib dependencies
+
+INCLUDE_DIRECTORIES ( ../ )
+INCLUDE_DIRECTORIES ( . )
+
+IF ( OPENVDB_TOOLS_RAYTRACER_USE_EXR )
+  FIND_PACKAGE ( ILMBase REQUIRED )
+  FIND_PACKAGE ( OpenEXR REQUIRED )
 ELSE ()
-  FIND_PACKAGE ( Threads REQUIRED )
-ENDIF()
-
-# Determine OpenVDB version
-#define OPENVDB_LIBRARY_MAJOR_VERSION_NUMBER 4
-#define OPENVDB_LIBRARY_MINOR_VERSION_NUMBER 0
-#define OPENVDB_LIBRARY_PATCH_VERSION_NUMBER 0
-SET ( OPENVDB_VERSION_FILE ${CMAKE_CURRENT_SOURCE_DIR}/version.h )
-
-FILE ( STRINGS "${OPENVDB_VERSION_FILE}" openvdb_major_version_str REGEX "^#define[\t ]+OPENVDB_LIBRARY_MAJOR_VERSION_NUMBER[\t ]+.*")
-FILE ( STRINGS "${OPENVDB_VERSION_FILE}" openvdb_minor_version_str REGEX "^#define[\t ]+OPENVDB_LIBRARY_MINOR_VERSION_NUMBER[\t ]+.*")
-FILE ( STRINGS "${OPENVDB_VERSION_FILE}" openvdb_patch_version_str REGEX "^#define[\t ]+OPENVDB_LIBRARY_PATCH_VERSION_NUMBER[\t ]+.*")
-
-STRING (REGEX REPLACE "^.*OPENVDB_LIBRARY_MAJOR_VERSION_NUMBER[\t ]+([0-9]*).*$" "\\1"
-  _openvdb_major_version_number "${openvdb_major_version_str}")
-STRING (REGEX REPLACE "^.*OPENVDB_LIBRARY_MINOR_VERSION_NUMBER[\t ]+([0-9]*).*$" "\\1"
-  _openvdb_minor_version_number "${openvdb_minor_version_str}")
-STRING (REGEX REPLACE "^.*OPENVDB_LIBRARY_PATCH_VERSION_NUMBER[\t ]+([0-9]*).*$" "\\1"
-  _openvdb_patch_version_number "${openvdb_patch_version_str}")
-
-SET ( OPENVDB_MAJOR_VERSION_NUMBER ${_openvdb_major_version_number} CACHE STRING "OpenVDB major version number" )
-SET ( OPENVDB_MINOR_VERSION_NUMBER ${_openvdb_minor_version_number} CACHE STRING "OpenVDB minor version number" )
-SET ( OPENVDB_PATCH_VERSION_NUMBER ${_openvdb_patch_version_number} CACHE STRING "OpenVDB build version number" )
-
-# MESSAGE ( "OPENVDB_VERSION_FILE = ${OPENVDB_VERSION_FILE}")
-# MESSAGE ( "OPENVDB_MAJOR_VERSION_NUMBER = ${OPENVDB_MAJOR_VERSION_NUMBER}" )
-# MESSAGE ( "OPENVDB_MINOR_VERSION_NUMBER = ${OPENVDB_MINOR_VERSION_NUMBER}" )
-# MESSAGE ( "OPENVDB_PATCH_VERSION_NUMBER = ${OPENVDB_PATCH_VERSION_NUMBER}" )
-
-FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} REQUIRED COMPONENTS iostreams system thread ${OPENVDB_BOOST_PYTHON_LIBRARY_COMPONENT_NAME} )
-IF (WIN32 AND OPENVDB_DISABLE_BOOST_IMPLICIT_LINKING)
-  ADD_DEFINITIONS ( -DBOOST_ALL_NO_LIB )
+  FIND_PACKAGE ( ILMBase REQUIRED COMPONENTS Half )
 ENDIF ()
 
-FIND_PACKAGE ( Blosc REQUIRED )
-FIND_PACKAGE ( TBB REQUIRED )
+FIND_PACKAGE ( TBB REQUIRED COMPONENTS tbb )
 FIND_PACKAGE ( ZLIB REQUIRED )
-FIND_PACKAGE ( ILMBase REQUIRED )
-FIND_PACKAGE ( OpenEXR REQUIRED )
-FIND_PACKAGE ( OpenGL REQUIRED )
-IF (OPENVDB_BUILD_DOCS)
-  FIND_PACKAGE ( Doxygen REQUIRED )
+
+IF ( USE_LOG4CPLUS )
+  FIND_PACKAGE ( Log4cplus REQUIRED )
 ENDIF ()
-IF (OPENVDB_BUILD_UNITTESTS)
-  FIND_PACKAGE ( CPPUnit REQUIRED )
+
+IF ( USE_BLOSC )
+  FIND_PACKAGE ( Blosc ${MINIMUM_BLOSC_VERSION} REQUIRED )
+  IF ( Blosc_FOUND AND Blosc_VERSION VERSION_GREATER ${MINIMUM_BLOSC_VERSION} )
+    MESSAGE ( WARNING "The version of Blosc located is greater than ${MINIMUM_BLOSC_VERSION}. "
+      "There have been reported issues with using later versions of Blosc with OpenVDB. "
+      "OpenVDB has been tested fully against Blosc ${MINIMUM_BLOSC_VERSION}, it is "
+      "recommended that you use this version where possible."
+      )
+  ENDIF ()
 ENDIF ()
 
-IF (APPLE)
-  FIND_LIBRARY ( COCOA_LIBRARY Cocoa )
-  FIND_LIBRARY ( IOKIT_LIBRARY IOKit )
-  FIND_LIBRARY ( COREVIDEO_LIBRARY CoreVideo )
+FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} REQUIRED COMPONENTS iostreams system )
+
+IF ( UNIX )
+  FIND_PACKAGE ( Threads REQUIRED )
 ENDIF ()
 
-IF ( NOT OPENVDB_BUILD_HOUDINI_SOPS )
-  # If we are building OpenVDB Houdini SOP, we need to use the headers
-  # shipped with Houdini to ensure version compatibility
-  INCLUDE_DIRECTORIES ( SYSTEM ${Boost_INCLUDE_DIR} )
-  INCLUDE_DIRECTORIES ( SYSTEM ${TBB_INCLUDE_DIR} )
-  # INCLUDE_DIRECTORIES ( ${OPENGL_INCLUDE_DIR} )
-  INCLUDE_DIRECTORIES ( SYSTEM ${ZLIB_INCLUDE_DIR} )
+# Set core deps. Note that the order here is important. If we're building against
+# Houdini 17.5 we must include OpenEXR and ILMBase deps first to ensure the normal
+# namespaced headers are used over the Houdini 17.5 ones (which will be imported
+# through targets like tbb which are still deployed with Houdini)
+
+SET ( OPENVDB_CORE_DEPENDANT_LIBS
+  Boost::iostreams
+  Boost::system
+  ILMBase::Half
+  )
+
+IF ( OPENVDB_TOOLS_RAYTRACER_USE_EXR )
+  LIST ( APPEND OPENVDB_CORE_DEPENDANT_LIBS
+    ILMBase::IlmThread
+    ILMBase::Iex
+    ILMBase::Imath
+    OpenEXR::IlmImf
+    )
 ENDIF ()
 
-INCLUDE_DIRECTORIES ( SYSTEM ${ILMBASE_INCLUDE_DIRS} )
-INCLUDE_DIRECTORIES ( SYSTEM ${OPENEXR_INCLUDE_DIRS} )
-INCLUDE_DIRECTORIES ( SYSTEM ${GLFW_INCLUDE_DIRECTORY} )
+IF ( USE_LOG4CPLUS )
+  LIST ( APPEND OPENVDB_CORE_DEPENDANT_LIBS Log4cplus::log4cplus )
+ENDIF ()
 
-IF (WIN32)
-  INCLUDE_DIRECTORIES ( SYSTEM ${GLEW_INCLUDE_DIR} )
+IF ( USE_BLOSC )
+  LIST ( APPEND OPENVDB_CORE_DEPENDANT_LIBS Blosc::blosc )
 ENDIF ()
 
-INCLUDE_DIRECTORIES ( . ) # So they can simulate referencing installed headers
+LIST ( APPEND OPENVDB_CORE_DEPENDANT_LIBS
+  TBB::tbb
+  ZLIB::ZLIB
+  Threads::Threads
+)
 
-IF (WIN32)
+##########################################################################
+
+IF ( WIN32 )
   # Because of implicit linking!
   LINK_DIRECTORIES ( ${Boost_LIBRARY_DIR} )
+  IF ( OPENVDB_DISABLE_BOOST_IMPLICIT_LINKING )
+    ADD_DEFINITIONS ( -DBOOST_ALL_NO_LIB )
+  ENDIF ()
 ENDIF ()
 
-INCLUDE_DIRECTORIES ( SYSTEM ${BLOSC_INCLUDE_DIR} )
-INCLUDE_DIRECTORIES ( SYSTEM ${CPPUNIT_INCLUDE_DIR} )
-
-IF (WIN32)
+# @todo Should be target definitions
+IF ( WIN32 )
   ADD_DEFINITIONS ( -D_WIN32 -DNOMINMAX -DHALF_EXPORTS -DOPENVDB_DLL )
 ELSE ()
-  ADD_DEFINITIONS ( -pthread -fPIC )
+  ADD_DEFINITIONS ( -fPIC )
 ENDIF ()
 
-# Working around hardcoding of path at DWA
-FILE ( GLOB VIEWER_SOURCE_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} viewer/* )
-FILE ( MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/dwa/openvdb_viewer )
-FILE ( COPY ${VIEWER_SOURCE_FILES} DESTINATION ${CMAKE_BINARY_DIR}/dwa/openvdb_viewer )
-INCLUDE_DIRECTORIES ( ${CMAKE_BINARY_DIR}/dwa )
+##### Core library configuration
 
 SET ( OPENVDB_LIBRARY_SOURCE_FILES
   Grid.cc
@@ -168,10 +172,151 @@ SET ( OPENVDB_LIBRARY_SOURCE_FILES
   util/Util.cc
   )
 
-SET_SOURCE_FILES_PROPERTIES ( ${OPENVDB_LIBRARY_SOURCE_FILES}
-  PROPERTIES
-  COMPILE_FLAGS "-DOPENVDB_PRIVATE -DOPENVDB_USE_BLOSC ${OPENVDB_USE_GLFW_FLAG}"
-  )
+SET ( OPENVDB_LIBRARY_INCLUDE_FILES
+  Exceptions.h
+  Grid.h
+  Types.h
+  version.h
+  Metadata.h
+  MetaMap.h
+  openvdb.h
+  Platform.h
+  PlatformConfig.h
+)
+
+SET ( OPENVDB_LIBRARY_IO_INCLUDE_FILES
+  io/Archive.h
+  io/Compression.h
+  io/File.h
+  io/GridDescriptor.h
+  io/io.h
+  io/Queue.h
+  io/Stream.h
+  io/TempFile.h
+)
+
+SET ( OPENVDB_LIBRARY_MATH_INCLUDE_FILES
+  math/BBox.h
+  math/ConjGradient.h
+  math/Coord.h
+  math/DDA.h
+  math/FiniteDifference.h
+  math/LegacyFrustum.h
+  math/Maps.h
+  math/Mat.h
+  math/Mat3.h
+  math/Mat4.h
+  math/Math.h
+  math/Operators.h
+  math/Proximity.h
+  math/QuantizedUnitVec.h
+  math/Quat.h
+  math/Ray.h
+  math/Stats.h
+  math/Stencils.h
+  math/Transform.h
+  math/Tuple.h
+  math/Vec2.h
+  math/Vec3.h
+  math/Vec4.h
+)
+
+SET ( OPENVDB_LIBRARY_POINTS_INCLUDE_FILES
+  points/AttributeArray.h
+  points/AttributeArrayString.h
+  points/AttributeGroup.h
+  points/AttributeSet.h
+  points/IndexFilter.h
+  points/IndexIterator.h
+  points/PointAdvect.h
+  points/PointAttribute.h
+  points/PointConversion.h
+  points/PointCount.h
+  points/PointDataGrid.h
+  points/PointDelete.h
+  points/PointGroup.h
+  points/PointMask.h
+  points/PointMove.h
+  points/PointSample.h
+  points/PointScatter.h
+  points/StreamCompression.h
+)
+
+SET ( OPENVDB_LIBRARY_TOOLS_INCLUDE_FILES
+  tools/ChangeBackground.h
+  tools/Clip.h
+  tools/Composite.h
+  tools/Dense.h
+  tools/DenseSparseTools.h
+  tools/Diagnostics.h
+  tools/Filter.h
+  tools/GridOperators.h
+  tools/GridTransformer.h
+  tools/Interpolation.h
+  tools/LevelSetAdvect.h
+  tools/LevelSetFilter.h
+  tools/LevelSetFracture.h
+  tools/LevelSetMeasure.h
+  tools/LevelSetMorph.h
+  tools/LevelSetPlatonic.h
+  tools/LevelSetRebuild.h
+  tools/LevelSetSphere.h
+  tools/LevelSetTracker.h
+  tools/LevelSetUtil.h
+  tools/Mask.h
+  tools/MeshToVolume.h
+  tools/Morphology.h
+  tools/MultiResGrid.h
+  tools/ParticleAtlas.h
+  tools/ParticlesToLevelSet.h
+  tools/PointAdvect.h
+  tools/PointIndexGrid.h
+  tools/PointPartitioner.h
+  tools/PointScatter.h
+  tools/PointsToMask.h
+  tools/PoissonSolver.h
+  tools/PotentialFlow.h
+  tools/Prune.h
+  tools/RayIntersector.h
+  tools/RayTracer.h
+  tools/SignedFloodFill.h
+  tools/Statistics.h
+  tools/TopologyToLevelSet.h
+  tools/ValueTransformer.h
+  tools/VectorTransformer.h
+  tools/VelocityFields.h
+  tools/VolumeAdvect.h
+  tools/VolumeToMesh.h
+  tools/VolumeToSpheres.h
+)
+
+SET ( OPENVDB_LIBRARY_TREE_INCLUDE_FILES
+  tree/InternalNode.h
+  tree/Iterator.h
+  tree/LeafBuffer.h
+  tree/LeafManager.h
+  tree/LeafNode.h
+  tree/LeafNodeBool.h
+  tree/LeafNodeMask.h
+  tree/NodeManager.h
+  tree/NodeUnion.h
+  tree/RootNode.h
+  tree/Tree.h
+  tree/TreeIterator.h
+  tree/ValueAccessor.h
+)
+
+SET ( OPENVDB_LIBRARY_UTIL_INCLUDE_FILES
+  util/CpuTimer.h
+  util/Formats.h
+  util/logging.h
+  util/MapsUtil.h
+  util/Name.h
+  util/NodeMasks.h
+  util/NullInterrupter.h
+  util/PagedArray.h
+  util/Util.h
+)
 
 ADD_LIBRARY ( openvdb_static STATIC
   ${OPENVDB_LIBRARY_SOURCE_FILES}
@@ -180,278 +325,56 @@ ADD_LIBRARY ( openvdb_shared SHARED
   ${OPENVDB_LIBRARY_SOURCE_FILES}
   )
 
-TARGET_LINK_LIBRARIES ( openvdb_static
-  ${Boost_IOSTREAMS_LIBRARY}
-  ${Boost_SYSTEM_LIBRARY}
-  ${Tbb_TBB_LIBRARY}
-  ${Ilmbase_HALF_LIBRARY}
-  ${ZLIB_LIBRARY}
-  ${BLOSC_blosc_LIBRARY}
-  )
-TARGET_LINK_LIBRARIES ( openvdb_shared
-  ${Boost_IOSTREAMS_LIBRARY}
-  ${Boost_SYSTEM_LIBRARY}
-  ${Tbb_TBB_LIBRARY}
-  ${Ilmbase_HALF_LIBRARY}
-  ${ZLIB_LIBRARY}
-  ${BLOSC_blosc_LIBRARY}
-  )
-
-IF (WIN32)
-  SET_TARGET_PROPERTIES ( openvdb_static
-	PROPERTIES OUTPUT_NAME libopenvdb
-	)
-ELSE()
-  SET_TARGET_PROPERTIES ( openvdb_static
-	PROPERTIES OUTPUT_NAME openvdb
-	)
-ENDIF()
-
-SET_TARGET_PROPERTIES(
-  openvdb_shared
-  PROPERTIES
-  OUTPUT_NAME openvdb
-  SOVERSION ${OPENVDB_MAJOR_VERSION_NUMBER}.${OPENVDB_MINOR_VERSION_NUMBER}
-  VERSION ${OPENVDB_MAJOR_VERSION_NUMBER}.${OPENVDB_MINOR_VERSION_NUMBER}.${OPENVDB_PATCH_VERSION_NUMBER}
-  )
+##########################################################################
 
-SET ( VDB_LOD_SOURCE_FILES  cmd/openvdb_lod.cc )
-SET_SOURCE_FILES_PROPERTIES ( ${VDB_LOD_SOURCE_FILES}
-  PROPERTIES
-  COMPILE_FLAGS "-DOPENVDB_USE_BLOSC"
-  )
+# Configure c flags
 
-ADD_EXECUTABLE ( vdb_lod
-    ${VDB_LOD_SOURCE_FILES}
-  )
+TARGET_COMPILE_DEFINITIONS ( openvdb_static PRIVATE "-DOPENVDB_PRIVATE" )
+TARGET_COMPILE_DEFINITIONS ( openvdb_shared PRIVATE "-DOPENVDB_PRIVATE" )
 
-TARGET_LINK_LIBRARIES ( vdb_lod
-  openvdb_shared
-  ${CMAKE_THREAD_LIBS_INIT}
-  ${BLOSC_blosc_LIBRARY}
-  m
-  stdc++
-  )
+IF ( OPENVDB_TOOLS_RAYTRACER_USE_EXR )
+  TARGET_COMPILE_DEFINITIONS ( openvdb_static PRIVATE "-DOPENVDB_TOOLS_RAYTRACER_USE_EXR" )
+  TARGET_COMPILE_DEFINITIONS ( openvdb_shared PRIVATE "-DOPENVDB_TOOLS_RAYTRACER_USE_EXR" )
+ENDIF ()
 
-SET ( VDB_PRINT_SOURCE_FILES  cmd/openvdb_print.cc )
-SET_SOURCE_FILES_PROPERTIES ( ${VDB_PRINT_SOURCE_FILES}
-  PROPERTIES
-  COMPILE_FLAGS "-DOPENVDB_USE_BLOSC ${OPENVDB_USE_GLFW_FLAG}"
-  )
+IF ( USE_BLOSC )
+  TARGET_COMPILE_DEFINITIONS ( openvdb_static PRIVATE "-DOPENVDB_USE_BLOSC" )
+  TARGET_COMPILE_DEFINITIONS ( openvdb_shared PRIVATE "-DOPENVDB_USE_BLOSC" )
+ENDIF ()
 
-ADD_EXECUTABLE ( vdb_print
-  ${VDB_PRINT_SOURCE_FILES}
-  )
+IF ( USE_LOG4CPLUS )
+  TARGET_COMPILE_DEFINITIONS ( openvdb_static PUBLIC "-DOPENVDB_USE_LOG4CPLUS" )
+  TARGET_COMPILE_DEFINITIONS ( openvdb_shared PUBLIC "-DOPENVDB_USE_LOG4CPLUS" )
+ENDIF ()
 
-TARGET_LINK_LIBRARIES ( vdb_print
-  openvdb_shared
-  ${CMAKE_THREAD_LIBS_INIT}
-  ${BLOSC_blosc_LIBRARY}
-  m
-  stdc++
-  )
+##########################################################################
 
-SET ( VDB_RENDER_SOURCE_FILES cmd/openvdb_render.cc )
-SET_SOURCE_FILES_PROPERTIES ( ${VDB_RENDER_SOURCE_FILES}
-  PROPERTIES
-  COMPILE_FLAGS "-DOPENVDB_USE_BLOSC ${OPENVDB_USE_GLFW_FLAG}"
-  )
-ADD_EXECUTABLE ( vdb_render
-  ${VDB_RENDER_SOURCE_FILES}
+TARGET_LINK_LIBRARIES ( openvdb_static
+  ${OPENVDB_CORE_DEPENDANT_LIBS}
   )
 
-TARGET_LINK_LIBRARIES ( vdb_render
-  openvdb_shared
-  ${CMAKE_THREAD_LIBS_INIT}
-  ${BLOSC_blosc_LIBRARY}
-  ${Openexr_ILMIMF_LIBRARY}
-  ${Ilmbase_ILMTHREAD_LIBRARY}
-  ${Ilmbase_IEX_LIBRARY}
-  m
-  stdc++
+TARGET_LINK_LIBRARIES ( openvdb_shared
+  ${OPENVDB_CORE_DEPENDANT_LIBS}
   )
 
-SET ( VDB_VIEW_SOURCE_FILES
-  cmd/openvdb_view.cc
-  viewer/Camera.cc
-  viewer/ClipBox.cc
-  viewer/Font.cc
-  viewer/RenderModules.cc
-  viewer/Viewer.cc
-  )
-SET_SOURCE_FILES_PROPERTIES ( ${VDB_VIEW_SOURCE_FILES}
-  PROPERTIES
-  COMPILE_FLAGS "-DOPENVDB_USE_BLOSC ${OPENVDB_USE_GLFW_FLAG} -DGL_GLEXT_PROTOTYPES=1"
-  )
-IF (NOT WIN32)
-  ADD_EXECUTABLE ( vdb_view
-    ${VDB_VIEW_SOURCE_FILES}
+IF ( WIN32 )
+  SET_TARGET_PROPERTIES ( openvdb_static
+    PROPERTIES OUTPUT_NAME libopenvdb
     )
-  
-  target_include_directories ( vdb_view SYSTEM PRIVATE ${Boost_INCLUDE_DIR} )
-
-  TARGET_LINK_LIBRARIES ( vdb_view
-    openvdb_shared
-    ${Boost_THREAD_LIBRARY}
-    ${OPENGL_gl_LIBRARY}
-    ${OPENGL_glu_LIBRARY}
-    ${COCOA_LIBRARY}
-    ${IOKIT_LIBRARY}
-    ${COREVIDEO_LIBRARY}
-    ${GLFW_LINK_LIBRARY}
-    ${GLFW_DEPENDENT_LIBRARIES}
-    ${GLEW_GLEW_LIBRARY}
-    m
-    stdc++
+ELSE ()
+  SET_TARGET_PROPERTIES ( openvdb_static
+    PROPERTIES OUTPUT_NAME openvdb
     )
 ENDIF ()
 
-SET ( UNITTEST_SOURCE_FILES
-  unittest/main.cc
-  unittest/TestAttributeArray.cc
-  unittest/TestAttributeArrayString.cc
-  unittest/TestAttributeGroup.cc
-  unittest/TestAttributeSet.cc
-  unittest/TestBBox.cc
-  unittest/TestConjGradient.cc
-  unittest/TestCoord.cc
-  unittest/TestCpt.cc
-  unittest/TestCurl.cc
-  unittest/TestDense.cc
-  unittest/TestDenseSparseTools.cc
-  unittest/TestDiagnostics.cc
-  unittest/TestDivergence.cc
-  unittest/TestDoubleMetadata.cc
-  unittest/TestExceptions.cc
-  unittest/TestFile.cc
-  unittest/TestFloatMetadata.cc
-  unittest/TestGradient.cc
-  unittest/TestGrid.cc
-  unittest/TestGridBbox.cc
-  unittest/TestGridDescriptor.cc
-  unittest/TestGridIO.cc
-  unittest/TestGridTransformer.cc
-  unittest/TestIndexFilter.cc
-  unittest/TestIndexIterator.cc
-  unittest/TestInit.cc
-  unittest/TestInt32Metadata.cc
-  unittest/TestInt64Metadata.cc
-  unittest/TestInternalOrigin.cc
-  unittest/TestLaplacian.cc
-  unittest/TestLeaf.cc
-  unittest/TestLeafBool.cc
-  unittest/TestLeafManager.cc
-  unittest/TestLeafMask.cc
-  unittest/TestLeafIO.cc
-  unittest/TestLeafOrigin.cc
-  unittest/TestLevelSetRayIntersector.cc
-  unittest/TestLevelSetUtil.cc
-  unittest/TestLinearInterp.cc
-  unittest/TestMaps.cc
-  unittest/TestMat4Metadata.cc
-  unittest/TestMath.cc
-  unittest/TestMeanCurvature.cc
-  unittest/TestMeshToVolume.cc
-  unittest/TestMetadata.cc
-  unittest/TestMetadataIO.cc
-  unittest/TestMetaMap.cc
-  unittest/TestMultiResGrid.cc
-  unittest/TestName.cc
-  unittest/TestNodeIterator.cc
-  unittest/TestNodeManager.cc
-  unittest/TestNodeMask.cc
-  unittest/TestParticleAtlas.cc
-  unittest/TestParticlesToLevelSet.cc
-  unittest/TestPointAttribute.cc
-  unittest/TestPointConversion.cc
-  unittest/TestPointCount.cc
-  unittest/TestPointDataLeaf.cc
-  unittest/TestPointGroup.cc
-  unittest/TestPointIndexGrid.cc
-  unittest/TestPointPartitioner.cc
-  unittest/TestPointsToMask.cc
-  unittest/TestPoissonSolver.cc
-  unittest/TestPrePostAPI.cc
-  unittest/TestQuadraticInterp.cc
-  unittest/TestQuantizedUnitVec.cc
-  unittest/TestQuat.cc
-  unittest/TestRay.cc
-  unittest/TestStats.cc
-  unittest/TestStream.cc
-  unittest/TestStreamCompression.cc
-  unittest/TestStringMetadata.cc
-  unittest/TestTools.cc
-  unittest/TestTopologyToLevelSet.cc
-  unittest/TestTransform.cc
-  unittest/TestTree.cc
-  unittest/TestTreeCombine.cc
-  unittest/TestTreeGetSetValues.cc
-  unittest/TestTreeIterators.cc
-  unittest/TestTreeVisitor.cc
-  unittest/TestTypes.cc
-  unittest/TestUtil.cc
-  unittest/TestValueAccessor.cc
-  unittest/TestVec2Metadata.cc
-  unittest/TestVec3Metadata.cc
-  unittest/TestVolumeRayIntersector.cc
-  unittest/TestVolumeToMesh.cc
-  )
-
-SET_SOURCE_FILES_PROPERTIES ( ${UNITTEST_SOURCE_FILES}
+SET_TARGET_PROPERTIES ( openvdb_shared
   PROPERTIES
-  COMPILE_FLAGS "-DOPENVDB_USE_BLOSC"
+    OUTPUT_NAME ${OPENVDB_LIBRARY_NAME}
+    SOVERSION ${OpenVDB_MAJOR_VERSION}.${OpenVDB_MINOR_VERSION}
+    VERSION ${OpenVDB_MAJOR_VERSION}.${OpenVDB_MINOR_VERSION}.${OpenVDB_PATCH_VERSION}
   )
 
-IF ( OPENVDB_BUILD_UNITTESTS )
-
-  ADD_EXECUTABLE ( vdb_test
-    ${UNITTEST_SOURCE_FILES}
-    )
-
-  TARGET_LINK_LIBRARIES ( vdb_test
-    ${CPPUnit_cppunit_LIBRARY}
-    openvdb_shared
-    m
-    stdc++
-    )
-
-  ADD_TEST ( vdb_unit_test vdb_test )
-
-ENDIF (OPENVDB_BUILD_UNITTESTS)
-
-# Doxygen docmentation
-IF (OPENVDB_BUILD_DOCS)
-
-  FILE ( READ ${CMAKE_CURRENT_SOURCE_DIR}/doxygen-config DOXYGEN_CONFIG_CONTENT )
-  FILE ( WRITE ${CMAKE_CURRENT_BINARY_DIR}/cmake-doxygen-config ${DOXYGEN_CONFIG_CONTENT} )
-  FILE ( APPEND ${CMAKE_CURRENT_BINARY_DIR}/cmake-doxygen-config "OUTPUT_DIRECTORY=${CMAKE_CURRENT_BINARY_DIR}/doc\n" )
-
-  ADD_CUSTOM_TARGET ( doc
-    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/cmake-doxygen-config
-    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
-    COMMENT "Generating API documentation with Doxygen" VERBATIM
-    )
-
-  INSTALL ( CODE "EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build  \"${PROJECT_BINARY_DIR}\" --target doc)")
-  INSTALL ( DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/html DESTINATION docs)
-
-ENDIF ()
-
 # Installation
-IF ( NOT WIN32 )
-  INSTALL ( TARGETS
-    vdb_view
-    DESTINATION
-    bin
-    )
-ENDIF ()
-INSTALL ( TARGETS
-  vdb_lod
-  vdb_print
-  vdb_render
-  DESTINATION
-  bin
-  )
 
 INSTALL ( TARGETS
   openvdb_static
@@ -459,23 +382,41 @@ INSTALL ( TARGETS
   lib
   )
 
-IF (WIN32)
+IF ( WIN32 )
   INSTALL ( TARGETS
-	openvdb_shared
-	RUNTIME DESTINATION bin COMPONENT Runtime
-	ARCHIVE DESTINATION lib COMPONENT Runtime
-	)
-ELSE()
+    openvdb_shared
+    RUNTIME DESTINATION bin COMPONENT Runtime
+    ARCHIVE DESTINATION lib COMPONENT Runtime
+    )
+ELSE ()
   INSTALL ( TARGETS
-	openvdb_shared
-	DESTINATION
-	lib
-	)
+    openvdb_shared
+    DESTINATION
+    lib
+    )
 ENDIF ()
 
-INSTALL ( DIRECTORY ${PROJECT_SOURCE_DIR} DESTINATION include
-  FILES_MATCHING PATTERN "*.h"
-  PATTERN "python" EXCLUDE
-  PATTERN "cmd" EXCLUDE
-  PATTERN "doc" EXCLUDE
+IF ( OPENVDB_ENABLE_RPATH )
+  # @todo There is probably a better way to do this for imported targets
+  LIST ( APPEND RPATHS
+    ${Boost_LIBRARY_DIRS}
+    ${ILMBase_LIBRARY_DIRS}
+    ${OpenEXR_LIBRARY_DIRS}
+    ${Log4cplus_LIBRARY_DIRS}
+    ${Blosc_LIBRARY_DIRS}
+    ${Tbb_LIBRARY_DIRS}
   )
+  LIST ( REMOVE_DUPLICATES RPATHS )
+  SET_TARGET_PROPERTIES ( openvdb_shared
+    PROPERTIES INSTALL_RPATH "${RPATHS}"
+    )
+ENDIF ()
+
+
+INSTALL ( FILES ${OPENVDB_LIBRARY_INCLUDE_FILES} DESTINATION include/openvdb )
+INSTALL ( FILES ${OPENVDB_LIBRARY_IO_INCLUDE_FILES} DESTINATION include/openvdb/io )
+INSTALL ( FILES ${OPENVDB_LIBRARY_MATH_INCLUDE_FILES} DESTINATION include/openvdb/math )
+INSTALL ( FILES ${OPENVDB_LIBRARY_POINTS_INCLUDE_FILES} DESTINATION include/openvdb/points )
+INSTALL ( FILES ${OPENVDB_LIBRARY_TOOLS_INCLUDE_FILES} DESTINATION include/openvdb/tools )
+INSTALL ( FILES ${OPENVDB_LIBRARY_TREE_INCLUDE_FILES} DESTINATION include/openvdb/tree )
+INSTALL ( FILES ${OPENVDB_LIBRARY_UTIL_INCLUDE_FILES} DESTINATION include/openvdb/util )
diff --git a/openvdb/cmd/CMakeLists.txt b/openvdb/cmd/CMakeLists.txt
new file mode 100644
index 000000000..771e28649
--- /dev/null
+++ b/openvdb/cmd/CMakeLists.txt
@@ -0,0 +1,293 @@
+## Copyright (c) 2012-2019 DreamWorks Animation LLC
+#
+# All rights reserved. This software is distributed under the
+# Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
+#
+# Redistributions of source code must retain the above copyright
+# and license notice and the following restrictions and disclaimer.
+#
+# *     Neither the name of DreamWorks Animation nor the names of
+# its contributors may be used to endorse or promote products derived
+# from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+# IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
+# LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
+#
+#[=======================================================================[
+
+  CMake Configuration for OpenVDB Binaries
+
+#]=======================================================================]
+
+PROJECT ( OpenVDBBinaries )
+CMAKE_MINIMUM_REQUIRED ( VERSION 3.3 )
+# Monitoring <PackageName>_ROOT variables
+IF ( POLICY CMP0074 )
+  CMAKE_POLICY ( SET CMP0074 NEW )
+ENDIF ()
+
+###### OpenVDB Binary Component Options
+
+OPTION ( OPENVDB_BUILD_VDB_LOD "Build vdb_lod" ON )
+OPTION ( OPENVDB_BUILD_VDB_PRINT "Build vdb_print" ON )
+OPTION ( OPENVDB_BUILD_VDB_RENDER "Build vdb_render" ON )
+OPTION ( OPENVDB_BUILD_VDB_VIEW "Build vdb_view" ON )
+
+#########################################################################
+
+MESSAGE ( STATUS "----------------------------------------------------" )
+MESSAGE ( STATUS "----------- Configuring OpenVDBBinaries ------------" )
+MESSAGE ( STATUS "----------------------------------------------------" )
+
+##########################################################################
+
+# Collect and configure lib dependencies
+
+IF ( NOT OPENVDB_BUILD_CORE )
+  FIND_PACKAGE ( OpenVDB REQUIRED )
+  SET ( OPENVDB_LIB OpenVDB::openvdb )
+ELSE ()
+  SET ( OPENVDB_LIB openvdb_shared )
+  INCLUDE_DIRECTORIES ( ../../ )
+ENDIF ()
+
+FIND_PACKAGE ( ILMBase REQUIRED COMPONENTS Half Iex IlmThread )
+FIND_PACKAGE ( TBB REQUIRED COMPONENTS tbb )
+FIND_PACKAGE ( ZLIB REQUIRED )
+
+IF ( USE_LOG4CPLUS )
+  FIND_PACKAGE ( Log4cplus REQUIRED )
+ENDIF ()
+
+IF ( USE_BLOSC )
+  FIND_PACKAGE ( Blosc ${MINIMUM_BLOSC_VERSION} REQUIRED )
+ENDIF ()
+
+FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} REQUIRED COMPONENTS iostreams system )
+
+IF ( UNIX )
+  FIND_PACKAGE ( Threads REQUIRED )
+ENDIF ()
+
+# Set core deps. Note that the order here is important. If we're building against
+# Houdini 17.5 we must include OpenEXR and ILMBase deps first to ensure the normal
+# namespaced headers are used over the Houdini 17.5 ones (which will be imported
+# through targets like tbb which are still deployed with Houdini)
+
+SET ( OPENVDB_BINARIES_DEPENDANT_LIBS
+  ${OPENVDB_LIB}
+  Boost::iostreams
+  Boost::system
+  ILMBase::Half
+  )
+
+IF ( USE_LOG4CPLUS )
+  LIST ( APPEND OPENVDB_BINARIES_DEPENDANT_LIBS Log4cplus::log4cplus )
+ENDIF ()
+
+IF ( USE_BLOSC )
+  LIST ( APPEND OPENVDB_BINARIES_DEPENDANT_LIBS Blosc::blosc )
+ENDIF ()
+
+LIST ( APPEND OPENVDB_BINARIES_DEPENDANT_LIBS
+  TBB::tbb
+  ZLIB::ZLIB
+  Threads::Threads
+  m
+  stdc++
+)
+
+##########################################################################
+
+IF ( WIN32 )
+  # Because of implicit linking!
+  LINK_DIRECTORIES ( ${Boost_LIBRARY_DIR} )
+  IF ( OPENVDB_DISABLE_BOOST_IMPLICIT_LINKING )
+    ADD_DEFINITIONS ( -DBOOST_ALL_NO_LIB )
+  ENDIF ()
+ENDIF ()
+
+IF ( WIN32 )
+  ADD_DEFINITIONS ( -D_WIN32 -DNOMINMAX -DHALF_EXPORTS -DOPENVDB_DLL )
+ELSE ()
+  ADD_DEFINITIONS ( -fPIC )
+ENDIF ()
+
+# rpath handling
+
+SET ( RPATHS )
+IF ( OPENVDB_ENABLE_RPATH )
+  # @todo There is probably a better way to do this for imported targets
+  LIST ( APPEND RPATHS
+    ${Boost_LIBRARY_DIRS}
+    ${ILMBase_LIBRARY_DIRS}
+    ${Log4cplus_LIBRARY_DIRS}
+    ${Blosc_LIBRARY_DIRS}
+    ${Tbb_LIBRARY_DIRS}
+  )
+  IF ( OPENVDB_BUILD_CORE )
+    LIST ( APPEND RPATHS ${CMAKE_INSTALL_PREFIX}/lib )
+  ELSE ()
+    LIST ( APPEND RPATHS ${OpenVDB_LIBRARY_DIRS} )
+  ENDIF ()
+
+  LIST ( REMOVE_DUPLICATES RPATHS )
+ENDIF ()
+
+# @todo improve the viewer header system
+
+FILE ( GLOB VIEWER_SOURCE_FILES ../viewer/*.h )
+FILE ( MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/dwa/openvdb_viewer )
+FILE ( COPY ${VIEWER_SOURCE_FILES} DESTINATION ${CMAKE_BINARY_DIR}/dwa/openvdb_viewer )
+INCLUDE_DIRECTORIES ( ${CMAKE_BINARY_DIR}/dwa )
+
+##########################################################################
+
+##### VDB binaries
+
+#### vdb_lod
+
+IF ( OPENVDB_BUILD_VDB_LOD )
+  SET ( VDB_LOD_SOURCE_FILES  openvdb_lod.cc )
+  ADD_EXECUTABLE ( vdb_lod ${VDB_LOD_SOURCE_FILES} )
+  TARGET_LINK_LIBRARIES ( vdb_lod ${OPENVDB_BINARIES_DEPENDANT_LIBS} )
+
+  IF ( USE_LOG4CPLUS )
+    TARGET_COMPILE_DEFINITIONS ( vdb_lod PRIVATE  "-DOPENVDB_USE_LOG4CPLUS" )
+  ENDIF ()
+
+  IF ( OPENVDB_ENABLE_RPATH )
+    SET_TARGET_PROPERTIES ( vdb_lod
+      PROPERTIES INSTALL_RPATH "${RPATHS}"
+      )
+  ENDIF ()
+
+  INSTALL ( TARGETS vdb_lod DESTINATION bin )
+ENDIF ()
+
+##########################################################################
+
+#### vdb_print
+
+IF ( OPENVDB_BUILD_VDB_PRINT )
+  SET ( VDB_PRINT_SOURCE_FILES openvdb_print.cc )
+  ADD_EXECUTABLE ( vdb_print ${VDB_PRINT_SOURCE_FILES} )
+  TARGET_LINK_LIBRARIES ( vdb_print ${OPENVDB_BINARIES_DEPENDANT_LIBS} )
+  IF ( USE_LOG4CPLUS )
+    TARGET_COMPILE_DEFINITIONS ( vdb_print PRIVATE "-DOPENVDB_USE_LOG4CPLUS" )
+  ENDIF ()
+
+  IF ( OPENVDB_ENABLE_RPATH )
+    SET_TARGET_PROPERTIES ( vdb_print
+      PROPERTIES INSTALL_RPATH "${RPATHS}"
+      )
+  ENDIF ()
+
+  INSTALL ( TARGETS vdb_print DESTINATION bin )
+ENDIF ()
+
+##########################################################################
+
+#### vdb_render
+
+IF ( OPENVDB_BUILD_VDB_RENDER )
+  FIND_PACKAGE ( OpenEXR REQUIRED COMPONENTS IlmImf )
+
+  SET ( VDB_RENDER_SOURCE_FILES openvdb_render.cc )
+  ADD_EXECUTABLE ( vdb_render ${VDB_RENDER_SOURCE_FILES} )
+  TARGET_LINK_LIBRARIES ( vdb_render
+    OpenEXR::IlmImf
+    ILMBase::IlmThread
+    ILMBase::Iex
+    ${OPENVDB_BINARIES_DEPENDANT_LIBS} # include last - see comment above
+    )
+  IF ( USE_LOG4CPLUS )
+    TARGET_COMPILE_DEFINITIONS ( vdb_render PRIVATE
+      "-DOPENVDB_USE_LOG4CPLUS"
+      )
+  ENDIF ()
+
+  IF ( OPENVDB_ENABLE_RPATH )
+    SET ( OPENVDB_RENDER_RPATHS )
+    LIST ( APPEND OPENVDB_RENDER_RPATHS
+      ${OpenEXR_LIBRARY_DIRS}
+      ${RPATHS}
+    )
+    LIST ( REMOVE_DUPLICATES OPENVDB_RENDER_RPATHS )
+
+    SET_TARGET_PROPERTIES ( vdb_render
+      PROPERTIES INSTALL_RPATH "${OPENVDB_RENDER_RPATHS}"
+      )
+    UNSET ( OPENVDB_RENDER_RPATHS )
+  ENDIF ()
+
+  INSTALL ( TARGETS vdb_render DESTINATION bin )
+ENDIF ()
+
+##########################################################################
+
+#### vdb_view
+
+IF ( OPENVDB_BUILD_VDB_VIEW )
+  IF ( WIN32 )
+    MESSAGE ( WARNING "Currently no CMake support for building vdb_view binary on Windows." )
+    # @todo
+    # FIND_PACKAGE ( GLEW REQUIRED )
+    # INCLUDE_DIRECTORIES ( SYSTEM ${GLEW_INCLUDE_DIR} )
+  ELSE ()
+    FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} REQUIRED COMPONENTS thread )
+    FIND_PACKAGE ( OpenGL REQUIRED )
+
+    # wraps FIND_PACKAGE ( glfw3 ) and sets the glfw target
+    INCLUDE ( OpenVDBGLFW3Setup )
+
+    SET ( VDB_VIEW_SOURCE_FILES
+      openvdb_view.cc
+      ../viewer/Camera.cc
+      ../viewer/ClipBox.cc
+      ../viewer/Font.cc
+      ../viewer/RenderModules.cc
+      ../viewer/Viewer.cc
+      )
+
+    ADD_EXECUTABLE ( vdb_view ${VDB_VIEW_SOURCE_FILES} )
+    TARGET_LINK_LIBRARIES ( vdb_view
+      Boost::thread
+      OpenGL::GL
+      OpenGL::GLU
+      glfw
+      dl
+      ${OPENVDB_BINARIES_DEPENDANT_LIBS} # include last - see comment above
+      )
+
+    TARGET_COMPILE_DEFINITIONS ( vdb_view PRIVATE
+      "-DOPENVDB_USE_GLFW_3" "-DGL_GLEXT_PROTOTYPES=1"
+      )
+    IF ( USE_LOG4CPLUS )
+      TARGET_COMPILE_DEFINITIONS ( vdb_view PRIVATE
+        "-DOPENVDB_USE_LOG4CPLUS"
+        )
+    ENDIF ()
+
+    IF ( OPENVDB_ENABLE_RPATH )
+      SET_TARGET_PROPERTIES ( vdb_view
+        PROPERTIES INSTALL_RPATH "${RPATHS}"
+        )
+    ENDIF ()
+
+    INSTALL ( TARGETS vdb_view DESTINATION bin )
+  ENDIF ()
+ENDIF ()
+
+UNSET ( RPATHS )
diff --git a/openvdb/python/CMakeLists.txt b/openvdb/python/CMakeLists.txt
index 17974c70d..37e0c8e8f 100644
--- a/openvdb/python/CMakeLists.txt
+++ b/openvdb/python/CMakeLists.txt
@@ -1,49 +1,166 @@
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
+#
+# All rights reserved. This software is distributed under the
+# Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
+#
+# Redistributions of source code must retain the above copyright
+# and license notice and the following restrictions and disclaimer.
+#
+# *     Neither the name of DreamWorks Animation nor the names of
+# its contributors may be used to endorse or promote products derived
+# from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+# IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
+# LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
+#
+#[=======================================================================[
+
+  CMake Configuration for OpenVDB Python bindings
+
+#]=======================================================================]
+
+PROJECT ( OpenVDBPython )
+CMAKE_MINIMUM_REQUIRED ( VERSION 3.3 )
+# Monitoring <PackageName>_ROOT variables
+IF ( POLICY CMP0074 )
+  CMAKE_POLICY ( SET CMP0074 NEW )
+ENDIF ()
+
+###### OpenVDB Python Options
+
+OPTION ( USE_NUMPY [=[
+Build the python library with numpy support. Currently requires CMake 3.12.]=] OFF )
+OPTION ( OPENVDB_PYTHON_WRAP_ALL_GRID_TYPES [=[
+Expose (almost) all of the grid types in the python module. Otherwise, only FloatGrid, BoolGrid and
+Vec3SGrid will be exposed (see, e.g., exportIntGrid() in python/pyIntGrid.cc). Compiling the Python
+module with this ON can be very memory-intensive.]=] OFF )
+
+SET ( PYTHON_VERSION "2.7" CACHE STRING "The python version to use when building the OpenVDB
+  Python module. Note that the available version of Boost.Python should also match this." )
+
+#########################################################################
+
+MESSAGE ( STATUS "----------------------------------------------------" )
+MESSAGE ( STATUS "------------ Configuring OpenVDBPython -------------" )
+MESSAGE ( STATUS "----------------------------------------------------" )
+
+##########################################################################
+
+# Collect and configure lib dependencies
 
-PROJECT ( PyOpenVDB )
+IF ( NOT OPENVDB_BUILD_CORE )
+  FIND_PACKAGE ( OpenVDB REQUIRED )
+  SET ( OPENVDB_LIB OpenVDB::openvdb )
+ELSE ()
+  SET ( OPENVDB_LIB openvdb_shared )
+  INCLUDE_DIRECTORIES ( ../../ )
+ENDIF ()
+
+FIND_PACKAGE ( ILMBase REQUIRED COMPONENTS Half )
+FIND_PACKAGE ( TBB REQUIRED COMPONENTS tbb )
+FIND_PACKAGE ( ZLIB REQUIRED )
+
+IF ( USE_LOG4CPLUS )
+  FIND_PACKAGE ( Log4cplus REQUIRED )
+ENDIF ()
+
+IF ( USE_BLOSC )
+  FIND_PACKAGE ( Blosc ${MINIMUM_BLOSC_VERSION} REQUIRED )
+ENDIF ()
+
+SET ( OPENVDB_PYTHON_DEPS )
+
+# If CMake is < 3.12, use the old style python search and alias the variables
+# Note that the Interpreter component is only required for the python test
+IF ( ${CMAKE_VERSION} VERSION_LESS 3.12 )
+  IF ( USE_NUMPY )
+    MESSAGE ( FATAL_ERROR "No CMake support for FindPackage ( NumPy ) currently "
+      "available for OpenVDB. Requires CMake 3.12." )
+  ENDIF ()
 
-FIND_PACKAGE ( PythonInterp REQUIRED )
-FIND_PACKAGE ( PythonLibs REQUIRED )
-FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} REQUIRED COMPONENTS python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR} )
+  FIND_PACKAGE ( PythonInterp ${PYTHON_VERSION} REQUIRED )
+  FIND_PACKAGE ( PythonLibs ${PYTHON_VERSION} REQUIRED )
 
+  SET ( Python_VERSION_MAJOR ${PYTHON_VERSION_MAJOR} )
+  SET ( Python_VERSION_MINOR ${PYTHON_VERSION_MINOR} )
+  SET ( Python_EXECUTABLE ${PYTHON_EXECUTABLE} )
+  SET ( OPENVDB_PYTHON_DEPS ${PYTHON_LIBRARIES} )
+  GET_FILENAME_COMPONENT ( Python_LIBRARY_DIRS ${OPENVDB_PYTHON_DEPS} DIRECTORY )
 
-IF ( NOT OPENVDB_BUILD_CORE )
-  FIND_PACKAGE ( OpenVDB REQUIRED )
+  INCLUDE_DIRECTORIES ( SYSTEM ${PYTHON_INCLUDE_DIR} )
+ELSE ()
+  # To ensure consistent versions between components Interpreter, Compiler,
+  # Development and NumPy, specify all components at the same time when using
+  # FindPython
+  IF ( USE_NUMPY )
+    FIND_PACKAGE ( Python ${PYTHON_VERSION} REQUIRED COMPONENTS Interpreter Development NumPy )
+    LIST ( APPEND OPENVDB_PYTHON_DEPS Python::NumPy )
+  ELSE ()
+    FIND_PACKAGE ( Python ${PYTHON_VERSION} REQUIRED COMPONENTS Interpreter Development )
+  ENDIF ()
+  LIST ( APPEND OPENVDB_PYTHON_DEPS Python::Python )
+ENDIF ()
 
-  FIND_PACKAGE ( ILMBase REQUIRED )
-  FIND_PACKAGE ( OpenEXR REQUIRED )
-  FIND_PACKAGE ( Blosc REQUIRED )
-  FIND_PACKAGE ( TBB REQUIRED )
-  FIND_PACKAGE ( ZLIB REQUIRED )
+IF ( BOOST_PYTHON_NAMESPACE_VERSIONING )
+  SET ( BOOST_PYTHON_LIB "python${Python_VERSION_MAJOR}${Python_VERSION_MINOR}" )
+ELSE ()
+  SET ( BOOST_PYTHON_LIB "python" )
+ENDIF ()
 
+FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION}
+  REQUIRED COMPONENTS iostreams system ${BOOST_PYTHON_LIB}
+)
 
-  # Set the variables that are otherwise defined in the core module.
-  SET ( OPENVDB_MAJOR_VERSION_NUMBER ${OpenVDB_MAJOR_VERSION} )
-  SET ( OPENVDB_MINOR_VERSION_NUMBER ${OpenVDB_MINOR_VERSION} )
-  SET ( OPENVDB_PATCH_VERSION_NUMBER ${OpenVDB_PATCH_VERSION} )
+IF ( UNIX )
+  FIND_PACKAGE ( Threads REQUIRED )
+ENDIF ()
 
-  # Use the library installed
-  SET ( OPENVDB_LIB ${OpenVDB_OPENVDB_LIBRARY} )
+# Set core deps. Note that the order here is important. If we're building against
+# Houdini 17.5 we must include OpenEXR and ILMBase deps first to ensure the normal
+# namespaced headers are used over the Houdini 17.5 ones (which will be imported
+# through targets like tbb which are still deployed with Houdini)
+
+SET ( OPENVDB_PYTHON_DEPENDANT_LIBS
+  ${OPENVDB_LIB}
+  Boost::${BOOST_PYTHON_LIB}
+  Boost::iostreams
+  Boost::system
+  ILMBase::Half
+  ${OPENVDB_PYTHON_DEPS}
+)
+
+IF ( USE_LOG4CPLUS )
+  LIST ( APPEND OPENVDB_PYTHON_DEPENDANT_LIBS Log4cplus::log4cplus )
+ENDIF ()
+
+IF ( USE_BLOSC )
+  LIST ( APPEND OPENVDB_PYTHON_DEPENDANT_LIBS Blosc::blosc )
+ENDIF ()
+
+LIST ( APPEND OPENVDB_BINARIES_DEPENDANT_LIBS
+  TBB::tbb
+  ZLIB::ZLIB
+  Threads::Threads
+)
+
+##########################################################################
 
-ELSE ()
-  # Use the target
-  SET ( OPENVDB_LIB openvdb_shared)
-ENDIF ( NOT OPENVDB_BUILD_CORE )
-
-INCLUDE_DIRECTORIES ( SYSTEM ${ILMBASE_INCLUDE_DIRS} )
-INCLUDE_DIRECTORIES ( SYSTEM ${OPENEXR_INCLUDE_DIRS} )
-INCLUDE_DIRECTORIES ( SYSTEM ${Boost_INCLUDE_DIR} )
-INCLUDE_DIRECTORIES ( SYSTEM ${BLOSC_INCLUDE_DIR} )
-INCLUDE_DIRECTORIES ( SYSTEM ${TBB_INCLUDE_DIR} )
-INCLUDE_DIRECTORIES ( SYSTEM ${ZLIB_INCLUDE_DIR} )
-INCLUDE_DIRECTORIES ( SYSTEM ${PYTHON_INCLUDE_DIR} )
-# MESSAGE ( "PYTHON_VERSION_STRING = ${PYTHON_VERSION_STRING}" )
-
-# MESSAGE ( "PYTHON_VERSION_MAJOR = ${PYTHON_VERSION_MAJOR}" )
-# MESSAGE ( "PYTHON_VERSION_MINOR = ${PYTHON_VERSION_MINOR}" )
 SET ( OPENVDB_PYTHON_MODULE_SOURCE_FILES
   pyFloatGrid.cc
   pyIntGrid.cc
   pyMetadata.cc
+  pyPointGrid.cc
   pyOpenVDBModule.cc
   pyPointGrid.cc
   pyTransform.cc
@@ -52,62 +169,73 @@ SET ( OPENVDB_PYTHON_MODULE_SOURCE_FILES
 
 IF ( NOT DEFINED PYOPENVDB_INSTALL_DIRECTORY )
   SET ( PYOPENVDB_INSTALL_DIRECTORY
-    lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}
+    lib/python${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}
     CACHE STRING "The directory to install the pyopenvdb.so module."
     )
 ENDIF ( NOT DEFINED PYOPENVDB_INSTALL_DIRECTORY )
 
-SET_SOURCE_FILES_PROPERTIES ( ${OPENVDB_PYTHON_MODULE_SOURCE_FILES}
-  PROPERTIES
-  COMPILE_FLAGS "-DOPENVDB_PRIVATE -DOPENVDB_USE_BLOSC ${OPENVDB_USE_GLFW_FLAG}"
+ADD_LIBRARY ( pyopenvdb SHARED
+  ${OPENVDB_PYTHON_MODULE_SOURCE_FILES}
   )
 
-# RPath handling
-IF ( OPENVDB_ENABLE_RPATH )
-
-  SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
+IF ( OPENVDB_PYTHON_WRAP_ALL_GRID_TYPES )
+  TARGET_COMPILE_DEFINITIONS ( pyopenvdb PRIVATE "-DPY_OPENVDB_WRAP_ALL_GRID_TYPES" )
+ENDIF ()
 
-  IF( OpenVDB_LIBRARY_DIR )
-    SET(CMAKE_INSTALL_RPATH ${OpenVDB_LIBRARY_DIR})
-  ELSE ()
-    MESSAGE ( WARNING "Assumes the openvdb shared library is one level up")
-    MESSAGE ( WARNING "If this is wrong set OpenVDB_LIBRARY_DIR to correct path")
-    SET(CMAKE_INSTALL_RPATH "$ORIGIN/..")
-  ENDIF ()
-ENDIF ( OPENVDB_ENABLE_RPATH )
+IF ( USE_LOG4CPLUS )
+  TARGET_COMPILE_DEFINITIONS ( pyopenvdb PUBLIC "-DOPENVDB_USE_LOG4CPLUS" )
+ENDIF ()
 
-ADD_LIBRARY ( pyopenvdb SHARED
-  ${OPENVDB_PYTHON_MODULE_SOURCE_FILES}
-  )
+IF ( USE_NUMPY )
+  TARGET_COMPILE_DEFINITIONS ( pyopenvdb PUBLIC "-DPY_OPENVDB_USE_NUMPY" )
+ENDIF ()
 
 TARGET_LINK_LIBRARIES ( pyopenvdb
-  ${OPENVDB_LIB}
-  ${OPENGL_gl_LIBRARY}
-  ${OPENGL_glu_LIBRARY}
-  ${COCOA_LIBRARY}
-  ${IOKIT_LIBRARY}
-  ${COREVIDEO_LIBRARY}
-  ${GLFW_LINK_LIBRARY}
-  ${GLFW_DEPENDENT_LIBRARIES}
-  ${GLEW_GLEW_LIBRARY}
-  ${Boost_PYTHON_LIBRARY}
-  ${PYTHON_LIBRARY}
-  ${Ilmbase_HALF_LIBRARY}
+  ${OPENVDB_PYTHON_DEPENDANT_LIBS}
   )
 
 SET_TARGET_PROPERTIES ( pyopenvdb PROPERTIES
   PREFIX ""
   )
 
-ADD_TEST ( pytest ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/TestOpenVDB.py )
-SET_TESTS_PROPERTIES ( pytest PROPERTIES ENVIRONMENT "PYTHONPATH=${CMAKE_CURRENT_BINARY_DIR}")
+IF ( OPENVDB_ENABLE_RPATH )
+  # @todo There is probably a better way to do this for imported targets
+  LIST ( APPEND RPATHS
+    ${Boost_LIBRARY_DIRS}
+    ${ILMBase_LIBRARY_DIRS}
+    ${Log4cplus_LIBRARY_DIRS}
+    ${Blosc_LIBRARY_DIRS}
+    ${Tbb_LIBRARY_DIRS}
+    ${Python_LIBRARY_DIRS}
+  )
+  IF ( OPENVDB_BUILD_CORE )
+    LIST ( APPEND RPATHS ${CMAKE_INSTALL_PREFIX}/lib )
+  ELSE ()
+    LIST ( APPEND RPATHS ${OpenVDB_LIBRARY_DIRS} )
+  ENDIF ()
+
+  LIST ( REMOVE_DUPLICATES RPATHS )
+  SET_TARGET_PROPERTIES ( pyopenvdb
+    PROPERTIES INSTALL_RPATH "${RPATHS}"
+    )
+  UNSET ( RPATHS )
+ENDIF ()
+
+SET ( PYTHON_PUBLIC_INCLUDE_NAMES
+  pyopenvdb.h
+  )
 
 INSTALL ( TARGETS
   pyopenvdb
   DESTINATION
   ${PYOPENVDB_INSTALL_DIRECTORY}
-  )       
-
-INSTALL ( DIRECTORY ${PROJECT_SOURCE_DIR} DESTINATION include
-  FILES_MATCHING PATTERN "*.h"
   )
+
+INSTALL ( FILES ${PYTHON_PUBLIC_INCLUDE_NAMES} DESTINATION include/openvdb/python )
+
+# pytest
+
+ADD_TEST ( pytest ${Python_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/TestOpenVDB.py )
+SET_TESTS_PROPERTIES ( pytest PROPERTIES ENVIRONMENT "PYTHONPATH=${CMAKE_CURRENT_BINARY_DIR}" )
+
+
diff --git a/openvdb/python/pyOpenVDBModule.cc b/openvdb/python/pyOpenVDBModule.cc
index 6535973f3..b41095bbe 100644
--- a/openvdb/python/pyOpenVDBModule.cc
+++ b/openvdb/python/pyOpenVDBModule.cc
@@ -28,6 +28,7 @@
 //
 ///////////////////////////////////////////////////////////////////////////
 
+#include <iostream> // must be included before python on macos
 #include <cstring> // for strncmp(), strrchr(), etc.
 #include <limits>
 #include <string>
diff --git a/openvdb/unittest/CMakeLists.txt b/openvdb/unittest/CMakeLists.txt
new file mode 100644
index 000000000..0ccaeff97
--- /dev/null
+++ b/openvdb/unittest/CMakeLists.txt
@@ -0,0 +1,229 @@
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
+#
+# All rights reserved. This software is distributed under the
+# Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
+#
+# Redistributions of source code must retain the above copyright
+# and license notice and the following restrictions and disclaimer.
+#
+# *     Neither the name of DreamWorks Animation nor the names of
+# its contributors may be used to endorse or promote products derived
+# from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+# IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
+# LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
+#
+#[=======================================================================[
+
+  CMake Configuration for OpenVDB Unit Tests
+
+#]=======================================================================]
+
+PROJECT ( OpenVDBUnitTests )
+CMAKE_MINIMUM_REQUIRED ( VERSION 3.3 )
+# Monitoring <PackageName>_ROOT variables
+IF ( POLICY CMP0074 )
+  CMAKE_POLICY ( SET CMP0074 NEW )
+ENDIF ()
+
+##########################################################################
+
+MESSAGE ( STATUS "----------------------------------------------------" )
+MESSAGE ( STATUS "----------- Configuring OpenVDBUnitTests -----------" )
+MESSAGE ( STATUS "----------------------------------------------------" )
+
+##########################################################################
+
+# Collect and configure lib dependencies
+
+IF ( NOT OPENVDB_BUILD_CORE )
+  FIND_PACKAGE ( OpenVDB REQUIRED )
+  SET ( OPENVDB_LIB OpenVDB::openvdb )
+ELSE ()
+  SET ( OPENVDB_LIB openvdb_shared )
+  INCLUDE_DIRECTORIES ( ../../ )
+ENDIF ()
+
+FIND_PACKAGE ( ILMBase REQUIRED COMPONENTS Half )
+FIND_PACKAGE ( TBB REQUIRED COMPONENTS tbb )
+FIND_PACKAGE ( ZLIB REQUIRED )
+FIND_PACKAGE ( CPPUnit REQUIRED )
+
+IF ( USE_LOG4CPLUS )
+  FIND_PACKAGE ( Log4cplus REQUIRED )
+ENDIF ()
+
+IF ( USE_BLOSC )
+  FIND_PACKAGE ( Blosc ${MINIMUM_BLOSC_VERSION} REQUIRED )
+ENDIF ()
+
+FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} REQUIRED COMPONENTS iostreams system )
+
+IF ( UNIX )
+  FIND_PACKAGE ( Threads REQUIRED )
+ENDIF ()
+
+# Set core deps. Note that the order here is important. If we're building against
+# Houdini 17.5 we must include OpenEXR and ILMBase deps first to ensure the normal
+# namespaced headers are used over the Houdini 17.5 ones (which will be imported
+# through targets like tbb which are still deployed with Houdini)
+
+SET ( OPENVDB_TEST_DEPENDANT_LIBS
+  ${OPENVDB_LIB}
+  Boost::iostreams
+  Boost::system
+  ILMBase::Half
+  CPPUnit::CPPUnit
+)
+
+IF ( USE_LOG4CPLUS )
+  LIST ( APPEND OPENVDB_TEST_DEPENDANT_LIBS Log4cplus::log4cplus )
+ENDIF ()
+
+IF ( USE_BLOSC )
+  LIST ( APPEND OPENVDB_TEST_DEPENDANT_LIBS Blosc::blosc )
+ENDIF ()
+
+LIST ( APPEND OPENVDB_TEST_DEPENDANT_LIBS
+  TBB::tbb
+  ZLIB::ZLIB
+  Threads::Threads
+  m
+  stdc++
+)
+
+##########################################################################
+
+IF ( WIN32 AND OPENVDB_DISABLE_BOOST_IMPLICIT_LINKING )
+  ADD_DEFINITIONS ( -DBOOST_ALL_NO_LIB )
+ENDIF ()
+
+IF ( WIN32 )
+  # Because of implicit linking!
+  LINK_DIRECTORIES ( ${Boost_LIBRARY_DIR} )
+ENDIF ()
+
+IF ( WIN32 )
+  ADD_DEFINITIONS ( -D_WIN32 -DNOMINMAX -DHALF_EXPORTS -DOPENVDB_DLL )
+ELSE ()
+  ADD_DEFINITIONS ( -fPIC )
+ENDIF ()
+
+
+##### VDB unit tests
+
+SET ( UNITTEST_SOURCE_FILES
+  main.cc
+  TestAttributeArray.cc
+  TestAttributeArrayString.cc
+  TestAttributeGroup.cc
+  TestAttributeSet.cc
+  TestBBox.cc
+  TestConjGradient.cc
+  TestCoord.cc
+  TestCpt.cc
+  TestCurl.cc
+  TestDense.cc
+  TestDenseSparseTools.cc
+  TestDiagnostics.cc
+  TestDivergence.cc
+  TestDoubleMetadata.cc
+  TestExceptions.cc
+  TestFile.cc
+  TestFloatMetadata.cc
+  TestGradient.cc
+  TestGrid.cc
+  TestGridBbox.cc
+  TestGridDescriptor.cc
+  TestGridIO.cc
+  TestGridTransformer.cc
+  TestIndexFilter.cc
+  TestIndexIterator.cc
+  TestInit.cc
+  TestInt32Metadata.cc
+  TestInt64Metadata.cc
+  TestInternalOrigin.cc
+  TestLaplacian.cc
+  TestLeaf.cc
+  TestLeafBool.cc
+  TestLeafManager.cc
+  TestLeafMask.cc
+  TestLeafIO.cc
+  TestLeafOrigin.cc
+  TestLevelSetRayIntersector.cc
+  TestLevelSetUtil.cc
+  TestLinearInterp.cc
+  TestMaps.cc
+  TestMat4Metadata.cc
+  TestMath.cc
+  TestMeanCurvature.cc
+  TestMeshToVolume.cc
+  TestMetadata.cc
+  TestMetadataIO.cc
+  TestMetaMap.cc
+  TestMultiResGrid.cc
+  TestName.cc
+  TestNodeIterator.cc
+  TestNodeManager.cc
+  TestNodeMask.cc
+  TestParticleAtlas.cc
+  TestParticlesToLevelSet.cc
+  TestPointAttribute.cc
+  TestPointConversion.cc
+  TestPointCount.cc
+  TestPointDataLeaf.cc
+  TestPointGroup.cc
+  TestPointIndexGrid.cc
+  TestPointPartitioner.cc
+  TestPointsToMask.cc
+  TestPoissonSolver.cc
+  TestPrePostAPI.cc
+  TestQuadraticInterp.cc
+  TestQuantizedUnitVec.cc
+  TestQuat.cc
+  TestRay.cc
+  TestStats.cc
+  TestStream.cc
+  TestStreamCompression.cc
+  TestStringMetadata.cc
+  TestTools.cc
+  TestTopologyToLevelSet.cc
+  TestTransform.cc
+  TestTree.cc
+  TestTreeCombine.cc
+  TestTreeGetSetValues.cc
+  TestTreeIterators.cc
+  TestTreeVisitor.cc
+  TestTypes.cc
+  TestUtil.cc
+  TestValueAccessor.cc
+  TestVec2Metadata.cc
+  TestVec3Metadata.cc
+  TestVolumeRayIntersector.cc
+  TestVolumeToMesh.cc
+  )
+
+ADD_EXECUTABLE ( vdb_test ${UNITTEST_SOURCE_FILES} )
+
+TARGET_LINK_LIBRARIES ( vdb_test ${OPENVDB_TEST_DEPENDANT_LIBS} )
+
+IF ( USE_BLOSC )
+  TARGET_COMPILE_DEFINITIONS ( vdb_test PRIVATE "-DOPENVDB_USE_BLOSC" )
+ENDIF ()
+
+IF ( USE_LOG4CPLUS )
+  TARGET_COMPILE_DEFINITIONS ( vdb_test PRIVATE "-DOPENVDB_USE_LOG4CPLUS" )
+ENDIF ()
+
+ADD_TEST ( vdb_unit_test vdb_test )
diff --git a/openvdb_houdini/CMakeLists.txt b/openvdb_houdini/CMakeLists.txt
index fc80c77a0..b801c90d5 100644
--- a/openvdb_houdini/CMakeLists.txt
+++ b/openvdb_houdini/CMakeLists.txt
@@ -1,4 +1,4 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
 #
 # All rights reserved. This software is distributed under the
 # Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
@@ -24,111 +24,192 @@
 # IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
 # LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
 #
-cmake_minimum_required(VERSION 3.1)
-set(CMAKE_CXX_STANDARD 11)
+#[=======================================================================[
 
-PROJECT ( OpenVDB_Houdini )
+  CMake Configuration for the OpenVDB Houdini Plugin.
 
-OPTION ( OPENVDB_HOUDINI_SUBDIR "Install plugins to <prefix>/houdini/<version> instead of <prefix>/houdini<version>" OFF)
+  See the OpenVDBHoudiniSetup.cmake module for more information on how to
+  locate and use a Houdini Installation.
+
+  There are two main stages for the OpenVDB Houdini build; the OpenVDB
+  Houdini base shared library and all subsequent dependent nodes (SOPs,
+  SHOPs, procedurals etc.) By default, both are installed to the same
+  prefix:
+
+    <prefix>/include  - Shared openvdb_houdini headers
+    <prefix>/lib      - Location of libopenvdb_houdini
+    <prefix>/dso      - Location of all other .so
+
+  Where prefix is ${CMAKE_INSTALL_PREFIX}/houdini<version>. If you're
+  building the Houdini plug-ins independently of the Core OpenVDB library,
+  users may wish to set CMAKE_INSTALL_PREFIX to $HIH (provided by the
+  Houdini Environment).
+
+  If you wish to build and install the Houdini plug-in alongside the core
+  library, or simply wish to customize the install paths of the above,
+  the following variables can be set and provided to CMake:
+
+   OPENVDB_HOUDINI_INSTALL_LIB_BASE_DIR
+     - The prefix for the shared library and headers
+   OPENVDB_HOUDINI_INSTALL_BASE_DIR
+     - The prefix for all other dsos, icons, config files etcs.
+
+#]=======================================================================]
+
+PROJECT ( OpenVDBHoudini )
+CMAKE_MINIMUM_REQUIRED ( VERSION 3.3 )
+IF ( POLICY CMP0074 )
+  CMAKE_POLICY ( SET CMP0074 NEW )
+ENDIF ()
+
+# CMake options for installation paths (if not overriding OPENVDB_HOUDINI_INSTALL variables)
+OPTION ( OPENVDB_HOUDINI_SUBDIR "Install plugins to <prefix>/houdini/<version> instead of <prefix>/houdini<version>" OFF )
 OPTION ( OPENVDB_HOUDINI_SHORT_VERSION "User major.minor as <version> instead of major.minor.patch" ON )
-OPTION ( OPENVDB_HOUDINI_INSTALL_LIBRARY "Install headers and place the shared library in a lib directory." OFF)
-FIND_PACKAGE ( HDK REQUIRED )
+OPTION ( OPENVDB_HOUDINI_INSTALL_LIBRARY "Install headers and place the shared library in a lib directory." ON )
+
+# SESITAG CMake options
+OPTION ( OPENVDB_HOUDINI_CACHE_ONCE_SESI_TAG "Build the SESI Tag information on the first run of CMake only." ON )
+OPTION ( OPENVDB_HOUDINI_DISABLE_SESI_TAG [=[
+Disable SESI tag information on the OpenVDB DSOs. This is for CI/testing only - dsos without"
+tag information will not load correctly.]=] OFF )
+
+SET ( CUSTOM_SESI_TAG_INFO "CMake ${CMAKE_VERSION}"
+  CACHE STRING "Custom data to feed to sesitag when compiling the Houdini DSOs." )
+
+##########################################################################
+##########################################################################
 
-# Checking if hdk version is >= 16.5
-# Houdini 16.5 stopped shipping boost.
-IF (( HDK_VERSION_MAJOR GREATER 16 ) OR 
-    (( HDK_VERSION_MAJOR EQUAL 16 ) AND ( HDK_VERSION_MINOR EQUAL 5 )))
+MESSAGE ( STATUS "----------------------------------------------------" )
+MESSAGE ( STATUS "------------ Configuring OpenVDBHoudini ------------" )
+MESSAGE ( STATUS "----------------------------------------------------" )
 
-  FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} REQUIRED )
-  INCLUDE_DIRECTORIES ( SYSTEM ${Boost_INCLUDE_DIR} )
+# Configure installation - most of the Houdini variables are set by the
+# root CMake search for the Houdini Installation
 
-ENDIF()
+SET ( HOUDINI_FOLDER_VERSION "${Houdini_VERSION_MAJOR}.${Houdini_VERSION_MINOR}" )
+IF ( NOT OPENVDB_HOUDINI_SHORT_VERSION )
+  SET ( HOUDINI_FOLDER_VERSION "${HOUDINI_FOLDER_VERSION}.${Houdini_VERSION_PATCH}" )
+ENDIF ()
+
+IF ( OPENVDB_HOUDINI_SUBDIR )
+  SET ( HOUDINI_SUB_DIRECTORY "houdini/${HOUDINI_FOLDER_VERSION}" )
+ELSE ()
+  SET ( HOUDINI_SUB_DIRECTORY "houdini${HOUDINI_FOLDER_VERSION}" )
+ENDIF ()
+
+SET ( OPENVDB_HOUDINI_INSTALL_BASE_DIR
+  ${CMAKE_INSTALL_PREFIX}/${HOUDINI_SUB_DIRECTORY}
+  CACHE PATH "Base install path for OpenVDB Houdini nodes and icons."
+  )
+SET ( OPENVDB_HOUDINI_INSTALL_LIB_BASE_DIR
+  ${OPENVDB_HOUDINI_INSTALL_BASE_DIR}
+  CACHE PATH "Base install path for OpenVDB Houdini shared libraries and headers."
+  )
+
+MESSAGE ( STATUS "Houdini base DSO install path: ${OPENVDB_HOUDINI_INSTALL_BASE_DIR}" )
+MESSAGE ( STATUS "Houdini base lib install path: ${OPENVDB_HOUDINI_INSTALL_LIB_BASE_DIR}" )
+
+##########################################################################
+
+# Collect and configure lib dependencies
 
 IF ( NOT OPENVDB_BUILD_CORE )
   FIND_PACKAGE ( OpenVDB REQUIRED )
+  SET ( OPENVDB_LIB OpenVDB::openvdb )
+ELSE ()
+  SET ( OPENVDB_LIB openvdb_shared )
+  INCLUDE_DIRECTORIES ( ../ )
+ENDIF ()
 
-  # Set the variables that are otherwise defined in the core module.
-  SET ( OPENVDB_MAJOR_VERSION_NUMBER ${OpenVDB_MAJOR_VERSION} )
-  SET ( OPENVDB_MINOR_VERSION_NUMBER ${OpenVDB_MINOR_VERSION} )
-  SET ( OPENVDB_PATCH_VERSION_NUMBER ${OpenVDB_PATCH_VERSION} )
+SET ( OPENVDB_HOUDINI_DEPENDANT_LIBS
+  ${OPENVDB_LIB}
+)
+# Checking if hdk version is >= 17.5 Houdini 17.5 stopped shipping ilmbase
+# and openexr so users can optionally set ILMBASE_/OPENEXR_ variables to find
+# their own ILMBASE_/OPENEXR_ # installation
+IF (( Houdini_VERSION_MAJOR GREATER 17 ) OR
+    (( Houdini_VERSION_MAJOR EQUAL 17 ) AND ( Houdini_VERSION_MINOR EQUAL 5 )))
+  FIND_PACKAGE ( ILMBase REQUIRED COMPONENTS Half )
+  LIST ( APPEND OPENVDB_HOUDINI_DEPENDANT_LIBS ILMBase::Half )
+ENDIF ()
 
-  # Use the library installed
-  SET ( OPENVDB_SHARED_LIB ${OpenVDB_OPENVDB_LIBRARY} )
-ELSE ()
-  # Use the target
-  SET ( OPENVDB_SHARED_LIB openvdb_shared)
-ENDIF ( NOT OPENVDB_BUILD_CORE )
+# Checking if hdk version is >= 16.5 Houdini 16.5 stopped shipping boost.
+# so users can optionally set BOOST_ variables to find their own BOOST_
+# installation
+IF (( Houdini_VERSION_MAJOR GREATER 16 ) OR
+    (( Houdini_VERSION_MAJOR EQUAL 16 ) AND ( Houdini_VERSION_MINOR EQUAL 5 )))
+  FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} REQUIRED COMPONENTS iostreams system )
+  LIST ( APPEND OPENVDB_HOUDINI_DEPENDANT_LIBS
+    Boost::iostreams
+    Boost::system
+    )
+ENDIF ()
 
-# This is to work around DWA way of doing stuff - REPEATED WITH VARIATION
-FILE ( GLOB HOUDINI_UTILS_HEADER RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} houdini/*.h )
+IF ( USE_LOG4CPLUS )
+  FIND_PACKAGE ( Log4cplus REQUIRED )
+  LIST ( APPEND OPENVDB_HOUDINI_DEPENDANT_LIBS Log4cplus::log4cplus )
+ENDIF ()
+
+FIND_PACKAGE ( TBB REQUIRED COMPONENTS tbb )
+LIST ( APPEND OPENVDB_HOUDINI_DEPENDANT_LIBS TBB::tbb )
+
+IF ( USE_BLOSC )
+  FIND_PACKAGE ( Blosc ${MINIMUM_BLOSC_VERSION} REQUIRED )
+  LIST ( APPEND OPENVDB_HOUDINI_DEPENDANT_LIBS Blosc::blosc )
+ENDIF ()
+
+# @note Linking openvdb_houdini against Houdini brings in all interface compile
+# definitions, including MAKING_DSO
+LIST ( APPEND OPENVDB_HOUDINI_DEPENDANT_LIBS Houdini )
+
+##########################################################################
 
 # Copy the files belonging to houdini_utils
-SET  ( OPENVDB_HOUDINI_UTILS_DIR ${PROJECT_BINARY_DIR}/houdini_utils )
+
+SET ( OPENVDB_HOUDINI_UTILS_DIR ${PROJECT_BINARY_DIR}/houdini_utils )
 FILE ( MAKE_DIRECTORY ${OPENVDB_HOUDINI_UTILS_DIR} )
-FILE ( COPY ${HOUDINI_UTILS_HEADER} DESTINATION ${OPENVDB_HOUDINI_UTILS_DIR}
-  FILES_MATCHING
-  PATTERN "geometry.h" 
-  PATTERN "ParmFactory.h"
-  PATTERN "OP_NodeChain.h"
+FILE ( COPY
+    houdini/geometry.h
+    houdini/OP_NodeChain.h
+    houdini/ParmFactory.h
+  DESTINATION
+    ${OPENVDB_HOUDINI_UTILS_DIR}
   )
 
-# Copy the files not belonging to houdini_utils to openvdb_houdini
+# Copy the files belonging to openvdb_houdini
 SET  ( OPENVDB_HOUDINI_LOCAL_DIR ${PROJECT_BINARY_DIR}/openvdb_houdini )
 FILE ( MAKE_DIRECTORY ${OPENVDB_HOUDINI_LOCAL_DIR} )
-FILE ( COPY ${HOUDINI_UTILS_HEADER} DESTINATION ${OPENVDB_HOUDINI_LOCAL_DIR} 
-  PATTERN "geometry.h" EXCLUDE
-  PATTERN "ParmFactory.h" EXCLUDE
-  PATTERN "OP_NodeChain.h" EXCLUDE
+FILE ( COPY
+    houdini/AttributeTransferUtil.h
+    houdini/GEO_PrimVDB.h
+    houdini/GeometryUtil.h
+    houdini/GT_GEOPrimCollectVDB.h
+    houdini/GU_PrimVDB.h
+    houdini/GU_VDBPointTools.h
+    houdini/PointUtils.h
+    houdini/SOP_NodeVDB.h
+    houdini/SOP_VDBVerbUtils.h
+    houdini/UT_VDBTools.h
+    houdini/UT_VDBUtils.h
+    houdini/Utils.h
+  DESTINATION
+    ${OPENVDB_HOUDINI_LOCAL_DIR}
   )
 
-
 INCLUDE_DIRECTORIES (
-  ${OpenVDB_INCLUDE_DIR}
-  # houdini
   ${OPENVDB_HOUDINI_UTILS_DIR}
   ${OPENVDB_HOUDINI_LOCAL_DIR}
   ${PROJECT_BINARY_DIR}
   )
 
-INCLUDE_DIRECTORIES ( SYSTEM ${HDK_INCLUDE_DIR} )
-# MESSAGE ( "HDK_DEFINITIONS = ${HDK_DEFINITIONS}" )
-
-LINK_DIRECTORIES($ENV{HFS}/dsolib)
-
-IF (NOT WIN32)
-  ADD_DEFINITIONS ( -pthread -fPIC )
-ENDIF ()
-
-SET ( OPENVDB_HFS_INSTALL_BASE_DIR
-  ${CMAKE_INSTALL_PREFIX}/houdini$<$<BOOL:${OPENVDB_HOUDINI_SUBDIR}>:/>${HDK_VERSION_MAJOR}.${HDK_VERSION_MINOR}$<$<NOT:$<BOOL:${OPENVDB_HOUDINI_SHORT_VERSION}>>:.${HDK_VERSION_BUILD}> 
-  CACHE PATH "Base install path for houdini"
-  )
-
-# RPath handling
-IF ( OPENVDB_ENABLE_RPATH )
-
-  # when building, don't use the install RPATH already
-  # (but later on when installing)
-  SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
-
-  # Use $ORIGIN for relative referencing
-  # The second $ORIGIN is present for the openvdb_houdini shared library.
-  IF( OPENVDB_HOUDINI_INSTALL_LIBRARY )
-    SET(CMAKE_INSTALL_RPATH "$ORIGIN/../../lib:$ORIGIN/../lib")
-  ELSE ()
-    SET(CMAKE_INSTALL_RPATH "$ORIGIN/../../lib:$ORIGIN")
-  ENDIF ()
-  # SET(CMAKE_INSTALL_RPATH "$ORIGIN")
-
-ENDIF ( OPENVDB_ENABLE_RPATH )
-
 ADD_LIBRARY ( openvdb_houdini SHARED
-  houdini/GeometryUtil.cc
   houdini/GEO_PrimVDB.cc
+  houdini/GEO_VDBTranslator.cc
+  houdini/geometry.cc
+  houdini/GeometryUtil.cc
   houdini/GT_GEOPrimCollectVDB.cc
   houdini/GU_PrimVDB.cc
   houdini/GU_VDBPointTools.cc
-  houdini/geometry.cc
   houdini/ParmFactory.cc
   houdini/PointUtils.cc
   houdini/SOP_NodeVDB.cc
@@ -137,117 +218,248 @@ ADD_LIBRARY ( openvdb_houdini SHARED
   )
 
 TARGET_LINK_LIBRARIES ( openvdb_houdini
-  ${OPENVDB_SHARED_LIB}
-  HoudiniPRM
-  HoudiniGEO
-  HoudiniUT
-  HoudiniOP2
-  HoudiniOP3
-  HoudiniAPPS3
+  ${OPENVDB_HOUDINI_DEPENDANT_LIBS}
   )
 
-SET_TARGET_PROPERTIES(
-  openvdb_houdini
+IF ( OPENVDB_ENABLE_RPATH )
+  # @todo There is probably a better way to do this for imported targets
+  SET ( RPATHS )
+  LIST ( APPEND RPATHS
+    ${Boost_LIBRARY_DIRS}
+    ${ILMBase_LIBRARY_DIRS}
+    ${Log4cplus_LIBRARY_DIRS}
+    ${Blosc_LIBRARY_DIRS}
+    ${Tbb_LIBRARY_DIRS}
+  )
+  IF ( OPENVDB_BUILD_CORE )
+    LIST ( APPEND ${CMAKE_INSTALL_PREFIX}/lib )
+  ELSE ()
+    LIST ( APPEND ${OpenVDB_LIBRARY_DIRS} )
+  ENDIF ()
+
+  LIST ( REMOVE_DUPLICATES RPATHS )
+
+  SET_TARGET_PROPERTIES ( openvdb_houdini
+    PROPERTIES INSTALL_RPATH "${RPATHS}"
+    )
+  UNSET ( RPATHS )
+ENDIF ()
+
+
+SET_TARGET_PROPERTIES ( openvdb_houdini
   PROPERTIES
-  SOVERSION ${OPENVDB_MAJOR_VERSION_NUMBER}.${OPENVDB_MINOR_VERSION_NUMBER}
-  VERSION ${OPENVDB_MAJOR_VERSION_NUMBER}.${OPENVDB_MINOR_VERSION_NUMBER}.${OPENVDB_PATCH_VERSION_NUMBER}
-  )
-
-SET ( OPENVDB_SOP_NAMES "" )
-LIST ( APPEND OPENVDB_SOP_NAMES "GR_PrimVDBPoints" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Advect" )
-LIST ( APPEND OPENVDB_SOP_NAMES "GEO_VDBTranslator" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Advect_Points" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Analysis" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Clip" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Combine" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Convert" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Create" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Diagnostics" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Fill" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Filter" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Filter_Level_Set" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Fracture" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_From_Particles" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_From_Polygons" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_LOD" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Metadata" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Morph_Level_Set" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Noise" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Occlusion_Mask" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Platonic" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Points_Convert" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Points_Group" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Potential_Flow" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Prune" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Rasterize_Points" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Ray" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Read" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Rebuild_Level_Set" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Remap" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Remove_Divergence" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Resample" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Sample_Points" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Sort_Points" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Scatter" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Segment" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_To_Polygons" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_To_Spheres" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Topology_To_Level_Set" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Transform" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Vector_Merge" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Vector_Split" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Visualize" )
-LIST ( APPEND OPENVDB_SOP_NAMES "SOP_OpenVDB_Write" )
-
-FOREACH ( SOP_NAME ${OPENVDB_SOP_NAMES} )
-  # MESSAGE ( "SOP_NAME = ${SOP_NAME}" )
-
-  HDK_ADD_LIBRARY ( ${SOP_NAME}
-    houdini/${SOP_NAME}.cc
+    OUTPUT_NAME openvdb_houdini
+    SOVERSION ${OpenVDB_MAJOR_VERSION}.${OpenVDB_MINOR_VERSION}
+    VERSION ${OpenVDB_MAJOR_VERSION}.${OpenVDB_MINOR_VERSION}.${OpenVDB_PATCH_VERSION}
+  )
+
+SET ( OPENVDB_DSO_NAMES
+  GR_PrimVDBPoints
+  SHOP_OpenVDB_Points
+  SOP_OpenVDB_Advect
+  SOP_OpenVDB_Advect_Points
+  SOP_OpenVDB_Analysis
+  SOP_OpenVDB_Clip
+  SOP_OpenVDB_Combine
+  SOP_OpenVDB_Convert
+  SOP_OpenVDB_Create
+  SOP_OpenVDB_Densify
+  SOP_OpenVDB_Diagnostics
+  SOP_OpenVDB_Fill
+  SOP_OpenVDB_Filter
+  SOP_OpenVDB_Filter_Level_Set
+  SOP_OpenVDB_Fracture
+  SOP_OpenVDB_From_Particles
+  SOP_OpenVDB_From_Polygons
+  SOP_OpenVDB_LOD
+  SOP_OpenVDB_Metadata
+  SOP_OpenVDB_Morph_Level_Set
+  SOP_OpenVDB_Noise
+  SOP_OpenVDB_Occlusion_Mask
+  SOP_OpenVDB_Platonic
+  SOP_OpenVDB_Points_Convert
+  SOP_OpenVDB_Points_Delete
+  SOP_OpenVDB_Points_Group
+  SOP_OpenVDB_Potential_Flow
+  SOP_OpenVDB_Prune
+  SOP_OpenVDB_Rasterize_Points
+  SOP_OpenVDB_Ray
+  SOP_OpenVDB_Read
+  SOP_OpenVDB_Rebuild_Level_Set
+  SOP_OpenVDB_Remap
+  SOP_OpenVDB_Remove_Divergence
+  SOP_OpenVDB_Resample
+  SOP_OpenVDB_Sample_Points
+  SOP_OpenVDB_Scatter
+  SOP_OpenVDB_Segment
+  SOP_OpenVDB_Sort_Points
+  SOP_OpenVDB_To_Polygons
+  SOP_OpenVDB_To_Spheres
+  SOP_OpenVDB_Topology_To_Level_Set
+  SOP_OpenVDB_Transform
+  SOP_OpenVDB_Vector_Merge
+  SOP_OpenVDB_Vector_Split
+  SOP_OpenVDB_Visualize
+  SOP_OpenVDB_Write
+  VRAY_OpenVDB_Points
+  )
+
+ADD_CUSTOM_TARGET ( openvdb_houdini_dsos
+  COMMENT "Group target which corresponds to all Houdini Nodes and DSOs "
+  "which aren't part of the shared library i.e. all targets in OPENVDB_DSO_NAMES."
+  )
+
+# If OPENVDB_HOUDINI_CACHE_ONCE_SESI_TAG is ON, manually run the sesitag binary
+# and cache the result for all subsequent runs.
+# @note _houdini_bin_dir is set from the HoudiniConfig.cmake module
+
+SET ( SESI_CACHE_TAG_DEFINE "" )
+IF ( OPENVDB_HOUDINI_CACHE_ONCE_SESI_TAG AND NOT OPENVDB_HOUDINI_DISABLE_SESI_TAG )
+  SET ( sesitag_input_file ${CMAKE_CURRENT_BINARY_DIR}/sesitag_input.cache/sesitag_input )
+
+  IF ( NOT EXISTS ${sesitag_input_file} )
+    STRING ( TIMESTAMP timestamp "%a %b %d %H:%M:%S %Y" )
+    SET ( tag_info "Generated on: ${timestamp}\n${CUSTOM_SESI_TAG_INFO}" )
+    FILE ( WRITE ${sesitag_input_file} "${tag_info}" )
+  ENDIF ()
+
+  SET ( sesitag_path "${_houdini_bin_dir}/sesitag${CMAKE_EXECUTABLE_SUFFIX}" )
+  EXECUTE_PROCESS (
+    COMMAND ${sesitag_path} -f ${sesitag_input_file}
+    RESULT_VARIABLE status_code
+    OUTPUT_VARIABLE SESI_CACHE_TAG_DEFINE
+  )
+
+  IF ( NOT status_code EQUAL 0 )
+    MESSAGE ( FATAL_ERROR "Error running sesitag: ${status_code}" )
+  ENDIF ()
+
+  STRING ( REPLACE "'" "" SESI_CACHE_TAG_DEFINE ${SESI_CACHE_TAG_DEFINE} )
+  STRING ( REPLACE "-D" "" SESI_CACHE_TAG_DEFINE ${SESI_CACHE_TAG_DEFINE} )
+  MESSAGE ( STATUS "Using cache sesi tag data for Houdini DSOs: ${sesitag_input_file}" )
+ENDIF ()
+
+# Add all dsos as libraries and configure them for houdini
+
+MESSAGE ( STATUS "Configuring Houdini DSOs..." )
+
+FOREACH ( DSO_NAME ${OPENVDB_DSO_NAMES} )
+
+  # Create the lib
+
+  ADD_LIBRARY ( ${DSO_NAME} SHARED
+    houdini/${DSO_NAME}.cc
     )
 
-  target_compile_options(${SOP_NAME} PRIVATE -fext-numeric-literals)
+  # Link in deps
 
-  TARGET_LINK_LIBRARIES ( ${SOP_NAME}
+  TARGET_LINK_LIBRARIES ( ${DSO_NAME}
     openvdb_houdini
-    ${OPENVDB_SHARED_LIB}
+    ${OPENVDB_HOUDINI_DEPENDANT_LIBS}
     )
 
-  INSTALL ( TARGETS
-    ${SOP_NAME}
-    DESTINATION
-    ${OPENVDB_HFS_INSTALL_BASE_DIR}/dso
+  # Call houdini_configure_target to setup the sesi tag information. We set
+  # INSTDIR to the project build directory and configure the actuall install
+  # paths ourselves (otherwise cmake will configure the build to build directly
+  # to the install dir)
+
+  houdini_configure_target ( ${DSO_NAME}
+    INSTDIR ${PROJECT_BINARY_DIR}
+    PREFIX ""
+    TAGINFO ${CUSTOM_SESI_TAG_INFO}
+  )
+
+  # Add openvdb c flags
+
+  IF ( USE_LOG4CPLUS )
+    TARGET_COMPILE_DEFINITIONS ( ${DSO_NAME} PRIVATE "-DOPENVDB_USE_LOG4CPLUS" )
+  ENDIF ()
+
+  # If the sesi tag needs replacing or removing, manually configure the compile
+  # options for each DSO and replace the UT_DSO_TAGINFO define
+  # @todo ask for more options from sidefx for controlling tag timestamps
+
+  IF ( OPENVDB_HOUDINI_DISABLE_SESI_TAG OR SESI_CACHE_TAG_DEFINE )
+    GET_TARGET_PROPERTY ( DSO_DEFINITIONS ${DSO_NAME} COMPILE_DEFINITIONS )
+    STRING ( REGEX REPLACE "UT_DSO_TAGINFO=\".+\"" "${SESI_CACHE_TAG_DEFINE}" DSO_DEFINITIONS "${DSO_DEFINITIONS}")
+    SET_TARGET_PROPERTIES ( ${DSO_NAME}
+      PROPERTIES COMPILE_DEFINITIONS "${DSO_DEFINITIONS}"
     )
+  ENDIF ()
+
+  # Configure rpaths
+  # Encode the path to libopenvdb.so into plugins, and because some
+  # plugins might depend on Houdini libraries that are not linked into
+  # hython (among other tools), encode the Houdini library path as well.
+
+  IF ( OPENVDB_ENABLE_RPATH )
+      SET ( RPATHS )
+      IF ( OPENVDB_BUILD_CORE )
+        LIST ( APPEND RPATHS ${CMAKE_INSTALL_PREFIX}/lib )
+      ELSE ()
+        LIST ( APPEND RPATHS ${OpenVDB_LIBRARY_DIRS} )
+      ENDIF ()
+      SET_TARGET_PROPERTIES ( ${DSO_NAME}
+        PROPERTIES INSTALL_RPATH "${RPATHS}"
+        )
+  ENDIF ()
+
+  ADD_DEPENDENCIES ( openvdb_houdini_dsos ${DSO_NAME} )
 
 ENDFOREACH ()
 
-# Installation
-INSTALL ( FILES
-  houdini/DW_OpenVDBRasterizePoints.cmd
-  DESTINATION
-  ${OPENVDB_HFS_INSTALL_BASE_DIR}/scripts/sop
-  )
+# This is only required for the OpenVDB Write SOP which enables a blosc menu
+# option if blosc is supported.
+# @todo If building against an external VDB lib, this should query if the lib
+# was built with blosc
+IF ( USE_BLOSC )
+  TARGET_COMPILE_DEFINITIONS ( SOP_OpenVDB_Write PRIVATE "-DOPENVDB_USE_BLOSC" )
+ENDIF ()
+
+##########
+# Installs
+##########
+
+IF ( OPENVDB_HOUDINI_INSTALL_LIBRARY )
 
-IF( OPENVDB_HOUDINI_INSTALL_LIBRARY )
-  # Install the openvdb_houdini as a proper library
-  INSTALL ( DIRECTORY 
+  INSTALL ( DIRECTORY
     ${OPENVDB_HOUDINI_UTILS_DIR}
     ${OPENVDB_HOUDINI_LOCAL_DIR}
-    DESTINATION ${OPENVDB_HFS_INSTALL_BASE_DIR}/include
+    DESTINATION ${OPENVDB_HOUDINI_INSTALL_LIB_BASE_DIR}/include
     )
 
   INSTALL ( TARGETS
     openvdb_houdini
-    DESTINATION
-    ${OPENVDB_HFS_INSTALL_BASE_DIR}/lib
+    DESTINATION ${OPENVDB_HOUDINI_INSTALL_LIB_BASE_DIR}/lib
     )
 
 ELSE ()
-  
+
   INSTALL ( TARGETS
     openvdb_houdini
-    DESTINATION
-    ${OPENVDB_HFS_INSTALL_BASE_DIR}/dso
+    DESTINATION ${OPENVDB_HOUDINI_INSTALL_LIB_BASE_DIR}/dso
     )
+
 ENDIF ()
+
+FOREACH ( DSO_NAME ${OPENVDB_DSO_NAMES} )
+  INSTALL ( TARGETS
+    ${DSO_NAME}
+    DESTINATION ${OPENVDB_HOUDINI_INSTALL_BASE_DIR}/dso
+    )
+ENDFOREACH ()
+
+INSTALL ( TARGETS
+  VRAY_OpenVDB_Points
+  DESTINATION ${OPENVDB_HOUDINI_INSTALL_BASE_DIR}/dso/mantra
+  )
+
+INSTALL ( FILES
+  houdini/SOP_OpenVDB.svg
+  DESTINATION ${OPENVDB_HOUDINI_INSTALL_BASE_DIR}/config/Icons
+  )
+
+INSTALL ( FILES
+  houdini/DW_OpenVDBRasterizePoints.cmd
+  DESTINATION ${OPENVDB_HOUDINI_INSTALL_BASE_DIR}/scripts/sop
+  )
diff --git a/openvdb_houdini/houdini/GEO_VDBTranslator.cc b/openvdb_houdini/houdini/GEO_VDBTranslator.cc
index 6f47c0b91..78c3ec25e 100644
--- a/openvdb_houdini/houdini/GEO_VDBTranslator.cc
+++ b/openvdb_houdini/houdini/GEO_VDBTranslator.cc
@@ -58,10 +58,6 @@
 #include "GU_PrimVDB.h"
 #include "Utils.h"
 
-#ifndef SESI_OPENVDB
-#include <UT/UT_DSOVersion.h>
-#endif
-
 #if (UT_VERSION_INT >= 0x0d00023d) // 13.0.573 or later
 #include <UT/UT_EnvControl.h>
 #endif
diff --git a/openvdb_maya/CMakeLists.txt b/openvdb_maya/CMakeLists.txt
index 05445a996..2274336d0 100644
--- a/openvdb_maya/CMakeLists.txt
+++ b/openvdb_maya/CMakeLists.txt
@@ -1,4 +1,4 @@
-# Copyright (c) 2012-2016 DreamWorks Animation LLC
+# Copyright (c) 2012-2019 DreamWorks Animation LLC
 #
 # All rights reserved. This software is distributed under the
 # Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
@@ -24,31 +24,63 @@
 # IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
 # LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
 #
+#[=======================================================================[
+
+  CMake Configuration for OpenVDB Maya
+
+#]=======================================================================]
+
 PROJECT ( OpenVDBMaya )
+CMAKE_MINIMUM_REQUIRED ( VERSION 3.3 )
+# Monitoring <PackageName>_ROOT variables
+IF ( POLICY CMP0074 )
+  CMAKE_POLICY ( SET CMP0074 NEW )
+ENDIF ()
 
-OPTION ( OPENVDB_MAYA_SUBDIR "Install plug-ins to <prefix>/maya/<version> instead of <prefix>/maya<version>" OFF)
-OPTION ( OPENVDB_MAYA_INSTALL_MOD "Install module file" ON)
+###### OpenVDB Maya Options
 
-FIND_PACKAGE ( Maya REQUIRED )
-FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} REQUIRED )
-FIND_PACKAGE ( ILMBase REQUIRED )
+OPTION ( OPENVDB_MAYA_SUBDIR "Install plug-ins to <prefix>/maya/<version> instead of <prefix>/maya<version>" OFF )
+OPTION ( OPENVDB_MAYA_INSTALL_MOD "Install module file" ON )
+
+##########################################################################
+
+MESSAGE ( STATUS "----------------------------------------------------" )
+MESSAGE ( STATUS "------------- Configuring OpenVDBMaya- -------------" )
+MESSAGE ( STATUS "----------------------------------------------------" )
+
+##########################################################################
+
+# Collect and configure lib dependencies
 
 IF ( NOT OPENVDB_BUILD_CORE )
   FIND_PACKAGE ( OpenVDB REQUIRED )
-
-  # Use the library installed
-  SET ( OPENVDB_SHARED_LIB ${OpenVDB_OPENVDB_LIBRARY} )
+  SET ( OPENVDB_SHARED_LIB OpenVDB::openvdb )
 ELSE ()
-  # Use the target
-  SET ( OPENVDB_SHARED_LIB openvdb_shared)
+  SET ( OPENVDB_SHARED_LIB openvdb_shared )
+  INCLUDE_DIRECTORIES ( ../ )
 ENDIF ()
 
-# Include them as system headers to avoid getting spammed by internal
-# warnings
-INCLUDE_DIRECTORIES ( SYSTEM ${MAYA_INCLUDE_DIR} )
-INCLUDE_DIRECTORIES ( SYSTEM ${Boost_INCLUDE_DIR} )
-INCLUDE_DIRECTORIES ( SYSTEM ${ILMBASE_INCLUDE_DIRS} )
+FIND_PACKAGE ( Maya REQUIRED )
+FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} REQUIRED COMPONENTS iostreams system )
+FIND_PACKAGE ( ILMBase REQUIRED COMPONENTS Half )
+
+SET ( OPENVDB_MAYA_DEPENDANT_LIBS
+  ${OPENVDB_SHARED_LIB}
+  Boost::iostreams
+  Boost::system
+  ILMBase::Half
+)
+
+IF ( USE_BLOSC )
+  FIND_PACKAGE ( Blosc ${MINIMUM_BLOSC_VERSION} REQUIRED )
+  LIST ( APPEND OPENVDB_MAYA_DEPENDANT_LIBS Blosc::blosc )
+ENDIF ()
 
+# @todo sort out tbb for maya - it's provided with maya and we should be using
+# those includes/libs. This will conflict if attempting to build the maya and
+# Houdini plugin
+
+INCLUDE_DIRECTORIES ( SYSTEM ${MAYA_INCLUDE_DIR} )
 ADD_DEFINITIONS ( ${MAYA_DEFINITIONS} )
 
 # This is to work around DWA way of doing stuff
@@ -57,19 +89,15 @@ LIST ( APPEND OPENVDB_MAYA_HEADER "maya/OpenVDBUtil.h" )
 SET  ( OPENVDB_MAYA_DIR ${PROJECT_BINARY_DIR}/openvdb_maya )
 FILE ( MAKE_DIRECTORY ${OPENVDB_MAYA_DIR} )
 FILE ( COPY ${OPENVDB_MAYA_HEADER} DESTINATION ${OPENVDB_MAYA_DIR} )
-INCLUDE_DIRECTORIES ( ${PROJECT_BINARY_DIR} )
-
-# RPath handling
-IF ( OPENVDB_ENABLE_RPATH )
 
-  # when building, don't use the install RPATH already
-  # (but later on when installing)
-  SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
+INCLUDE_DIRECTORIES ( ${PROJECT_BINARY_DIR} )
 
-  # Use $ORIGIN for relative referencing
-  SET(CMAKE_INSTALL_RPATH "$ORIGIN/../../lib")
+##########################################################################
 
-ENDIF ( OPENVDB_ENABLE_RPATH )
+SET( OPENVDB_MAYA_INSTALL_BASE_DIR
+  maya$<$<BOOL:${OPENVDB_MAYA_SUBDIR}>:/>${MAYA_VERSION_NUMBER}
+  CACHE PATH "Openvdb's maya install directory"
+  )
 
 SET ( OPENVDB_MAYA_MODULE_SOURCE_FILES
   maya/OpenVDBCopyNode.cc
@@ -88,7 +116,7 @@ SET ( OPENVDB_MAYA_MODULE_SOURCE_FILES
 
 SET_SOURCE_FILES_PROPERTIES ( ${OPENVDB_MAYA_MODULE_SOURCE_FILES}
   PROPERTIES
-  COMPILE_FLAGS "-DOPENVDB_PRIVATE -DOPENVDB_USE_BLOSC"
+  COMPILE_FLAGS "-DOPENVDB_PRIVATE"
   )
 
 ADD_LIBRARY ( openvdb_maya SHARED
@@ -96,7 +124,7 @@ ADD_LIBRARY ( openvdb_maya SHARED
   )
 
 TARGET_LINK_LIBRARIES ( openvdb_maya
-  ${OPENVDB_SHARED_LIB}
+  ${OPENVDB_MAYA_DEPENDANT_LIBS}
   ${MAYA_OpenMayaFX_LIBRARY}
   ${MAYA_OpenMayaUI_LIBRARY}
   ${MAYA_OpenMaya_LIBRARY}
@@ -110,9 +138,27 @@ SET_TARGET_PROPERTIES ( openvdb_maya
 
 MAYA_SET_LIBRARY_PROPERTIES ( openvdb_maya )
 
-SET( OPENVDB_MAYA_INSTALL_BASE_DIR
-  maya$<$<BOOL:${OPENVDB_MAYA_SUBDIR}>:/>${MAYA_VERSION_NUMBER}
-  CACHE PATH "Openvdb's maya install directory")
+IF ( OPENVDB_ENABLE_RPATH )
+  # @todo There is probably a better way to do this for imported targets
+  SET ( RPATHS )
+  LIST ( APPEND RPATHS
+    ${Boost_LIBRARY_DIRS}
+    ${ILMBase_LIBRARY_DIRS}
+    ${Blosc_LIBRARY_DIRS}
+  )
+  IF ( OPENVDB_BUILD_CORE )
+    LIST ( APPEND ${CMAKE_INSTALL_PREFIX}/lib )
+  ELSE ()
+    LIST ( APPEND ${OpenVDB_LIBRARY_DIRS} )
+  ENDIF ()
+
+  LIST ( REMOVE_DUPLICATES RPATHS )
+
+  SET_TARGET_PROPERTIES ( openvdb_maya
+    PROPERTIES INSTALL_RPATH "${RPATHS}"
+    )
+  UNSET ( RPATHS )
+ENDIF ()
 
 INSTALL ( TARGETS
   openvdb_maya